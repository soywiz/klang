TranslationUnitDecl 0x5555d4abde58 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x5555d4abe680 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x5555d4abe420 '__int128'
|-TypedefDecl 0x5555d4abe6f0 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x5555d4abe440 'unsigned __int128'
|-TypedefDecl 0x5555d4abe9f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x5555d4abe7d0 'struct __NSConstantString_tag'
|   `-Record 0x5555d4abe748 '__NSConstantString_tag'
|-TypedefDecl 0x5555d4abea90 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x5555d4abea50 'char *'
|   `-BuiltinType 0x5555d4abdf00 'char'
|-TypedefDecl 0x5555d4abed88 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag[1]'
| `-ConstantArrayType 0x5555d4abed30 'struct __va_list_tag[1]' 1 
|   `-RecordType 0x5555d4abeb70 'struct __va_list_tag'
|     `-Record 0x5555d4abeae8 '__va_list_tag'
|-TypedefDecl 0x5555d4abedf8 </usr/lib/llvm-16/lib/clang/16/include/stddef.h:46:1, col:23> col:23 referenced size_t 'unsigned long'
| `-BuiltinType 0x5555d4abe020 'unsigned long'
|-TypedefDecl 0x5555d4b35128 </usr/include/x86_64-linux-gnu/bits/types.h:31:1, col:23> col:23 __u_char 'unsigned char'
| `-BuiltinType 0x5555d4abdfc0 'unsigned char'
|-TypedefDecl 0x5555d4b35198 <line:32:1, col:28> col:28 __u_short 'unsigned short'
| `-BuiltinType 0x5555d4abdfe0 'unsigned short'
|-TypedefDecl 0x5555d4b35208 <line:33:1, col:22> col:22 __u_int 'unsigned int'
| `-BuiltinType 0x5555d4abe000 'unsigned int'
|-TypedefDecl 0x5555d4b35278 <line:34:1, col:27> col:27 __u_long 'unsigned long'
| `-BuiltinType 0x5555d4abe020 'unsigned long'
|-TypedefDecl 0x5555d4b352e8 <line:37:1, col:21> col:21 referenced __int8_t 'signed char'
| `-BuiltinType 0x5555d4abdf20 'signed char'
|-TypedefDecl 0x5555d4b35358 <line:38:1, col:23> col:23 referenced __uint8_t 'unsigned char'
| `-BuiltinType 0x5555d4abdfc0 'unsigned char'
|-TypedefDecl 0x5555d4b353c8 <line:39:1, col:26> col:26 referenced __int16_t 'short'
| `-BuiltinType 0x5555d4abdf40 'short'
|-TypedefDecl 0x5555d4b35438 <line:40:1, col:28> col:28 referenced __uint16_t 'unsigned short'
| `-BuiltinType 0x5555d4abdfe0 'unsigned short'
|-TypedefDecl 0x5555d4b354a8 <line:41:1, col:20> col:20 referenced __int32_t 'int'
| `-BuiltinType 0x5555d4abdf60 'int'
|-TypedefDecl 0x5555d4b35518 <line:42:1, col:22> col:22 referenced __uint32_t 'unsigned int'
| `-BuiltinType 0x5555d4abe000 'unsigned int'
|-TypedefDecl 0x5555d4b35588 <line:44:1, col:25> col:25 referenced __int64_t 'long'
| `-BuiltinType 0x5555d4abdf80 'long'
|-TypedefDecl 0x5555d4b355f8 <line:45:1, col:27> col:27 referenced __uint64_t 'unsigned long'
| `-BuiltinType 0x5555d4abe020 'unsigned long'
|-TypedefDecl 0x5555d4b356c0 <line:52:1, col:18> col:18 __int_least8_t '__int8_t':'signed char'
| `-ElaboratedType 0x5555d4b35680 '__int8_t' sugar
|   `-TypedefType 0x5555d4b35650 '__int8_t' sugar
|     |-Typedef 0x5555d4b352e8 '__int8_t'
|     `-BuiltinType 0x5555d4abdf20 'signed char'
|-TypedefDecl 0x5555d4b35790 <line:53:1, col:19> col:19 __uint_least8_t '__uint8_t':'unsigned char'
| `-ElaboratedType 0x5555d4b35750 '__uint8_t' sugar
|   `-TypedefType 0x5555d4b35720 '__uint8_t' sugar
|     |-Typedef 0x5555d4b35358 '__uint8_t'
|     `-BuiltinType 0x5555d4abdfc0 'unsigned char'
|-TypedefDecl 0x5555d4b35860 <line:54:1, col:19> col:19 __int_least16_t '__int16_t':'short'
| `-ElaboratedType 0x5555d4b35820 '__int16_t' sugar
|   `-TypedefType 0x5555d4b357f0 '__int16_t' sugar
|     |-Typedef 0x5555d4b353c8 '__int16_t'
|     `-BuiltinType 0x5555d4abdf40 'short'
|-TypedefDecl 0x5555d4b35930 <line:55:1, col:20> col:20 __uint_least16_t '__uint16_t':'unsigned short'
| `-ElaboratedType 0x5555d4b358f0 '__uint16_t' sugar
|   `-TypedefType 0x5555d4b358c0 '__uint16_t' sugar
|     |-Typedef 0x5555d4b35438 '__uint16_t'
|     `-BuiltinType 0x5555d4abdfe0 'unsigned short'
|-TypedefDecl 0x5555d4b35a00 <line:56:1, col:19> col:19 __int_least32_t '__int32_t':'int'
| `-ElaboratedType 0x5555d4b359c0 '__int32_t' sugar
|   `-TypedefType 0x5555d4b35990 '__int32_t' sugar
|     |-Typedef 0x5555d4b354a8 '__int32_t'
|     `-BuiltinType 0x5555d4abdf60 'int'
|-TypedefDecl 0x5555d4b35ad0 <line:57:1, col:20> col:20 __uint_least32_t '__uint32_t':'unsigned int'
| `-ElaboratedType 0x5555d4b35a90 '__uint32_t' sugar
|   `-TypedefType 0x5555d4b35a60 '__uint32_t' sugar
|     |-Typedef 0x5555d4b35518 '__uint32_t'
|     `-BuiltinType 0x5555d4abe000 'unsigned int'
|-TypedefDecl 0x5555d4b35ba0 <line:58:1, col:19> col:19 __int_least64_t '__int64_t':'long'
| `-ElaboratedType 0x5555d4b35b60 '__int64_t' sugar
|   `-TypedefType 0x5555d4b35b30 '__int64_t' sugar
|     |-Typedef 0x5555d4b35588 '__int64_t'
|     `-BuiltinType 0x5555d4abdf80 'long'
|-TypedefDecl 0x5555d4b35c70 <line:59:1, col:20> col:20 __uint_least64_t '__uint64_t':'unsigned long'
| `-ElaboratedType 0x5555d4b35c30 '__uint64_t' sugar
|   `-TypedefType 0x5555d4b35c00 '__uint64_t' sugar
|     |-Typedef 0x5555d4b355f8 '__uint64_t'
|     `-BuiltinType 0x5555d4abe020 'unsigned long'
|-TypedefDecl 0x5555d4b35ce0 <line:63:1, col:18> col:18 __quad_t 'long'
| `-BuiltinType 0x5555d4abdf80 'long'
|-TypedefDecl 0x5555d4b35d50 <line:64:1, col:27> col:27 __u_quad_t 'unsigned long'
| `-BuiltinType 0x5555d4abe020 'unsigned long'
|-TypedefDecl 0x5555d4b35dc0 <line:72:1, col:18> col:18 __intmax_t 'long'
| `-BuiltinType 0x5555d4abdf80 'long'
|-TypedefDecl 0x5555d4b35e30 <line:73:1, col:27> col:27 __uintmax_t 'unsigned long'
| `-BuiltinType 0x5555d4abe020 'unsigned long'
|-TypedefDecl 0x5555d4b35ea0 <line:137:22, line:145:25> col:25 __dev_t 'unsigned long'
| `-BuiltinType 0x5555d4abe020 'unsigned long'
|-TypedefDecl 0x5555d4b35f10 <line:137:22, line:146:25> col:25 __uid_t 'unsigned int'
| `-BuiltinType 0x5555d4abe000 'unsigned int'
|-TypedefDecl 0x5555d4b35f80 <line:137:22, line:147:25> col:25 __gid_t 'unsigned int'
| `-BuiltinType 0x5555d4abe000 'unsigned int'
|-TypedefDecl 0x5555d4b35ff0 <line:137:22, line:148:25> col:25 __ino_t 'unsigned long'
| `-BuiltinType 0x5555d4abe020 'unsigned long'
|-TypedefDecl 0x5555d4b36060 <line:137:22, line:149:27> col:27 __ino64_t 'unsigned long'
| `-BuiltinType 0x5555d4abe020 'unsigned long'
|-TypedefDecl 0x5555d4b3a060 <line:137:22, line:150:26> col:26 __mode_t 'unsigned int'
| `-BuiltinType 0x5555d4abe000 'unsigned int'
|-TypedefDecl 0x5555d4b3a0d0 <line:137:22, line:151:27> col:27 __nlink_t 'unsigned long'
| `-BuiltinType 0x5555d4abe020 'unsigned long'
|-TypedefDecl 0x5555d4b3a140 <line:137:22, line:152:25> col:25 __off_t 'long'
| `-BuiltinType 0x5555d4abdf80 'long'
|-TypedefDecl 0x5555d4b3a1b0 <line:137:22, line:153:27> col:27 referenced __off64_t 'long'
| `-BuiltinType 0x5555d4abdf80 'long'
|-TypedefDecl 0x5555d4b3a220 <line:137:22, line:154:25> col:25 referenced __pid_t 'int'
| `-BuiltinType 0x5555d4abdf60 'int'
|-RecordDecl 0x5555d4b3a278 </usr/include/x86_64-linux-gnu/bits/typesizes.h:73:24, col:47> col:24 struct definition
| `-FieldDecl 0x5555d4b3a3c0 <col:33, col:44> col:37 __val 'int[2]'
|-TypedefDecl 0x5555d4b3a468 </usr/include/x86_64-linux-gnu/bits/types.h:137:22, line:155:26> col:26 __fsid_t 'struct __fsid_t':'__fsid_t'
| `-ElaboratedType 0x5555d4b3a410 'struct __fsid_t' sugar
|   `-RecordType 0x5555d4b3a300 '__fsid_t'
|     `-Record 0x5555d4b3a278 ''
|-TypedefDecl 0x5555d4b3a4f0 <line:137:22, line:156:27> col:27 referenced __clock_t 'long'
| `-BuiltinType 0x5555d4abdf80 'long'
|-TypedefDecl 0x5555d4b3a560 <line:137:22, line:157:26> col:26 __rlim_t 'unsigned long'
| `-BuiltinType 0x5555d4abe020 'unsigned long'
|-TypedefDecl 0x5555d4b3a5d0 <line:137:22, line:158:28> col:28 __rlim64_t 'unsigned long'
| `-BuiltinType 0x5555d4abe020 'unsigned long'
|-TypedefDecl 0x5555d4b3a640 <line:137:22, line:159:24> col:24 __id_t 'unsigned int'
| `-BuiltinType 0x5555d4abe000 'unsigned int'
|-TypedefDecl 0x5555d4b3a6b0 <line:137:22, line:160:26> col:26 referenced __time_t 'long'
| `-BuiltinType 0x5555d4abdf80 'long'
|-TypedefDecl 0x5555d4b3a720 <line:137:22, line:161:30> col:30 __useconds_t 'unsigned int'
| `-BuiltinType 0x5555d4abe000 'unsigned int'
|-TypedefDecl 0x5555d4b3a790 <line:137:22, line:162:31> col:31 __suseconds_t 'long'
| `-BuiltinType 0x5555d4abdf80 'long'
|-TypedefDecl 0x5555d4b3a800 <line:137:22, line:163:33> col:33 __suseconds64_t 'long'
| `-BuiltinType 0x5555d4abdf80 'long'
|-TypedefDecl 0x5555d4b3a870 <line:137:22, line:165:27> col:27 __daddr_t 'int'
| `-BuiltinType 0x5555d4abdf60 'int'
|-TypedefDecl 0x5555d4b3a8e0 <line:137:22, line:166:25> col:25 __key_t 'int'
| `-BuiltinType 0x5555d4abdf60 'int'
|-TypedefDecl 0x5555d4b3a950 <line:137:22, line:169:29> col:29 referenced __clockid_t 'int'
| `-BuiltinType 0x5555d4abdf60 'int'
|-TypedefDecl 0x5555d4b3a9c0 <line:137:22, line:172:27> col:27 referenced __timer_t 'void *'
| `-PointerType 0x5555d4abe5e0 'void *'
|   `-BuiltinType 0x5555d4abdec0 'void'
|-TypedefDecl 0x5555d4b3aa30 <line:137:22, line:175:29> col:29 __blksize_t 'long'
| `-BuiltinType 0x5555d4abdf80 'long'
|-TypedefDecl 0x5555d4b3aaa0 <line:137:22, line:180:28> col:28 __blkcnt_t 'long'
| `-BuiltinType 0x5555d4abdf80 'long'
|-TypedefDecl 0x5555d4b3ab10 <line:137:22, line:181:30> col:30 __blkcnt64_t 'long'
| `-BuiltinType 0x5555d4abdf80 'long'
|-TypedefDecl 0x5555d4b3ab80 <line:137:22, line:184:30> col:30 __fsblkcnt_t 'unsigned long'
| `-BuiltinType 0x5555d4abe020 'unsigned long'
|-TypedefDecl 0x5555d4b3abf0 <line:137:22, line:185:32> col:32 __fsblkcnt64_t 'unsigned long'
| `-BuiltinType 0x5555d4abe020 'unsigned long'
|-TypedefDecl 0x5555d4b3ac60 <line:137:22, line:188:30> col:30 __fsfilcnt_t 'unsigned long'
| `-BuiltinType 0x5555d4abe020 'unsigned long'
|-TypedefDecl 0x5555d4b3acd0 <line:137:22, line:189:32> col:32 __fsfilcnt64_t 'unsigned long'
| `-BuiltinType 0x5555d4abe020 'unsigned long'
|-TypedefDecl 0x5555d4b3ad40 <line:137:22, line:192:28> col:28 __fsword_t 'long'
| `-BuiltinType 0x5555d4abdf80 'long'
|-TypedefDecl 0x5555d4b3adb0 <line:137:22, line:194:27> col:27 __ssize_t 'long'
| `-BuiltinType 0x5555d4abdf80 'long'
|-TypedefDecl 0x5555d4b3ae20 <line:137:22, line:197:33> col:33 referenced __syscall_slong_t 'long'
| `-BuiltinType 0x5555d4abdf80 'long'
|-TypedefDecl 0x5555d4b3ae90 <line:137:22, line:199:33> col:33 __syscall_ulong_t 'unsigned long'
| `-BuiltinType 0x5555d4abe020 'unsigned long'
|-TypedefDecl 0x5555d4b3af60 <line:203:1, col:19> col:19 __loff_t '__off64_t':'long'
| `-ElaboratedType 0x5555d4b3af20 '__off64_t' sugar
|   `-TypedefType 0x5555d4b3aef0 '__off64_t' sugar
|     |-Typedef 0x5555d4b3a1b0 '__off64_t'
|     `-BuiltinType 0x5555d4abdf80 'long'
|-TypedefDecl 0x5555d4b3afd0 <line:204:1, col:15> col:15 __caddr_t 'char *'
| `-PointerType 0x5555d4abea50 'char *'
|   `-BuiltinType 0x5555d4abdf00 'char'
|-TypedefDecl 0x5555d4b3c080 <line:137:22, line:207:25> col:25 __intptr_t 'long'
| `-BuiltinType 0x5555d4abdf80 'long'
|-TypedefDecl 0x5555d4b3c0f0 <line:137:22, line:210:23> col:23 __socklen_t 'unsigned int'
| `-BuiltinType 0x5555d4abe000 'unsigned int'
|-TypedefDecl 0x5555d4b3c160 <line:215:1, col:13> col:13 __sig_atomic_t 'int'
| `-BuiltinType 0x5555d4abdf60 'int'
|-TypedefDecl 0x5555d4b3c230 </usr/include/x86_64-linux-gnu/bits/types/clock_t.h:7:1, col:19> col:19 referenced clock_t '__clock_t':'long'
| `-ElaboratedType 0x5555d4b3c1f0 '__clock_t' sugar
|   `-TypedefType 0x5555d4b3c1c0 '__clock_t' sugar
|     |-Typedef 0x5555d4b3a4f0 '__clock_t'
|     `-BuiltinType 0x5555d4abdf80 'long'
|-TypedefDecl 0x5555d4b3c300 </usr/include/x86_64-linux-gnu/bits/types/time_t.h:10:1, col:18> col:18 referenced time_t '__time_t':'long'
| `-ElaboratedType 0x5555d4b3c2c0 '__time_t' sugar
|   `-TypedefType 0x5555d4b3c290 '__time_t' sugar
|     |-Typedef 0x5555d4b3a6b0 '__time_t'
|     `-BuiltinType 0x5555d4abdf80 'long'
|-RecordDecl 0x5555d4b3c358 </usr/include/x86_64-linux-gnu/bits/types/struct_tm.h:7:1, line:26:1> line:7:8 struct tm definition
| |-FieldDecl 0x5555d4b3c418 <line:9:3, col:7> col:7 tm_sec 'int'
| |-FieldDecl 0x5555d4b3c480 <line:10:3, col:7> col:7 tm_min 'int'
| |-FieldDecl 0x5555d4b3c4e8 <line:11:3, col:7> col:7 tm_hour 'int'
| |-FieldDecl 0x5555d4b3c550 <line:12:3, col:7> col:7 tm_mday 'int'
| |-FieldDecl 0x5555d4b3c5b8 <line:13:3, col:7> col:7 tm_mon 'int'
| |-FieldDecl 0x5555d4b3c620 <line:14:3, col:7> col:7 tm_year 'int'
| |-FieldDecl 0x5555d4b3c688 <line:15:3, col:7> col:7 tm_wday 'int'
| |-FieldDecl 0x5555d4b3c6f0 <line:16:3, col:7> col:7 tm_yday 'int'
| |-FieldDecl 0x5555d4b3c758 <line:17:3, col:7> col:7 tm_isdst 'int'
| |-FieldDecl 0x5555d4b3c7c0 <line:20:3, col:12> col:12 tm_gmtoff 'long'
| `-FieldDecl 0x5555d4b3c828 <line:21:3, col:15> col:15 tm_zone 'const char *'
|-RecordDecl 0x5555d4b3c878 </usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h:11:1, line:31:1> line:11:8 struct timespec definition
| |-FieldDecl 0x5555d4b3c930 <line:16:3, col:12> col:12 tv_sec '__time_t':'long'
| `-FieldDecl 0x5555d4b3c9f0 <line:21:3, col:21> col:21 tv_nsec '__syscall_slong_t':'long'
|-TypedefDecl 0x5555d4b3cab0 </usr/include/x86_64-linux-gnu/bits/types/clockid_t.h:7:1, col:21> col:21 referenced clockid_t '__clockid_t':'int'
| `-ElaboratedType 0x5555d4b3ca70 '__clockid_t' sugar
|   `-TypedefType 0x5555d4b3ca40 '__clockid_t' sugar
|     |-Typedef 0x5555d4b3a950 '__clockid_t'
|     `-BuiltinType 0x5555d4abdf60 'int'
|-TypedefDecl 0x5555d4b3cb80 </usr/include/x86_64-linux-gnu/bits/types/timer_t.h:7:1, col:19> col:19 referenced timer_t '__timer_t':'void *'
| `-ElaboratedType 0x5555d4b3cb40 '__timer_t' sugar
|   `-TypedefType 0x5555d4b3cb10 '__timer_t' sugar
|     |-Typedef 0x5555d4b3a9c0 '__timer_t'
|     `-PointerType 0x5555d4abe5e0 'void *'
|       `-BuiltinType 0x5555d4abdec0 'void'
|-RecordDecl 0x5555d4b3cbd8 </usr/include/x86_64-linux-gnu/bits/types/struct_itimerspec.h:8:1, line:12:3> line:8:8 struct itimerspec definition
| |-FieldDecl 0x5555d4b3ccd0 <line:10:5, col:21> col:21 it_interval 'struct timespec':'struct timespec'
| `-FieldDecl 0x5555d4b3cd40 <line:11:5, col:21> col:21 it_value 'struct timespec':'struct timespec'
|-RecordDecl 0x5555d4b3cdf0 </usr/include/time.h:49:1, col:8> col:8 struct sigevent
|-TypedefDecl 0x5555d4b3cf00 <line:54:1, col:17> col:17 referenced pid_t '__pid_t':'int'
| `-ElaboratedType 0x5555d4b3cec0 '__pid_t' sugar
|   `-TypedefType 0x5555d4b3ce90 '__pid_t' sugar
|     |-Typedef 0x5555d4b3a220 '__pid_t'
|     `-BuiltinType 0x5555d4abdf60 'int'
|-RecordDecl 0x5555d4b3cf58 </usr/include/x86_64-linux-gnu/bits/types/__locale_t.h:27:1, line:39:1> line:27:8 struct __locale_struct definition
| |-RecordDecl 0x5555d4b3d000 parent 0x5555d4abde58 <line:30:3, col:10> col:10 struct __locale_data
| |-FieldDecl 0x5555d4b414d0 <col:3, col:37> col:25 __locales 'struct __locale_data *[13]'
| |-FieldDecl 0x5555d4b41560 <line:33:3, col:29> col:29 __ctype_b 'const unsigned short *'
| |-FieldDecl 0x5555d4b415c8 <line:34:3, col:14> col:14 __ctype_tolower 'const int *'
| |-FieldDecl 0x5555d4b41630 <line:35:3, col:14> col:14 __ctype_toupper 'const int *'
| `-FieldDecl 0x5555d4b41720 <line:38:3, col:25> col:15 __names 'const char *[13]'
|-TypedefDecl 0x5555d4b41820 <line:41:1, col:33> col:33 referenced __locale_t 'struct __locale_struct *'
| `-PointerType 0x5555d4b417d0 'struct __locale_struct *'
|   `-ElaboratedType 0x5555d4b41770 'struct __locale_struct' sugar
|     `-RecordType 0x5555d4b3cfe0 'struct __locale_struct'
|       `-Record 0x5555d4b3cf58 '__locale_struct'
|-TypedefDecl 0x5555d4b418f0 </usr/include/x86_64-linux-gnu/bits/types/locale_t.h:24:1, col:20> col:20 referenced locale_t '__locale_t':'struct __locale_struct *'
| `-ElaboratedType 0x5555d4b418b0 '__locale_t' sugar
|   `-TypedefType 0x5555d4b41880 '__locale_t' sugar
|     |-Typedef 0x5555d4b41820 '__locale_t'
|     `-PointerType 0x5555d4b417d0 'struct __locale_struct *'
|       `-ElaboratedType 0x5555d4b41770 'struct __locale_struct' sugar
|         `-RecordType 0x5555d4b3cfe0 'struct __locale_struct'
|           `-Record 0x5555d4b3cf58 '__locale_struct'
|-FunctionDecl 0x5555d4b41aa8 </usr/include/time.h:72:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:79:54> /usr/include/time.h:72:16 clock 'clock_t (void)' extern
| `-NoThrowAttr 0x5555d4b41b50 </usr/include/x86_64-linux-gnu/sys/cdefs.h:79:35>
|-FunctionDecl 0x5555d4b41db8 </usr/include/time.h:76:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:79:54> /usr/include/time.h:76:15 time 'time_t (time_t *)' extern
| |-ParmVarDecl 0x5555d4b41cc0 <col:21, col:29> col:29 __timer 'time_t *'
| `-NoThrowAttr 0x5555d4b41e68 </usr/include/x86_64-linux-gnu/sys/cdefs.h:79:35>
|-FunctionDecl 0x5555d4b42060 </usr/include/time.h:79:1, line:80:40> line:79:15 difftime 'double (time_t, time_t)' extern
| |-ParmVarDecl 0x5555d4b41ed0 <col:25, col:32> col:32 __time1 'time_t':'long'
| |-ParmVarDecl 0x5555d4b41f48 <col:41, col:48> col:48 __time0 'time_t':'long'
| |-NoThrowAttr 0x5555d4b42118 </usr/include/x86_64-linux-gnu/sys/cdefs.h:79:35>
| `-ConstAttr 0x5555d4b42170 </usr/include/time.h:80:30>
|-FunctionDecl 0x5555d4b473d8 <line:83:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:79:54> /usr/include/time.h:83:15 mktime 'time_t (struct tm *)' extern
| |-ParmVarDecl 0x5555d4b42250 <col:23, col:34> col:34 __tp 'struct tm *'
| `-NoThrowAttr 0x5555d4b47488 </usr/include/x86_64-linux-gnu/sys/cdefs.h:79:35>
|-FunctionDecl 0x5555d4b47888 </usr/include/time.h:100:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:79:54> /usr/include/time.h:100:15 strftime 'size_t (char *restrict, size_t, const char *restrict, const struct tm *restrict)' extern
| |-ParmVarDecl 0x5555d4b47558 <col:25, col:42> col:42 __s 'char *restrict'
| |-ParmVarDecl 0x5555d4b475d0 <col:47, col:54> col:54 __maxsize 'size_t':'unsigned long'
| |-ParmVarDecl 0x5555d4b47650 <line:101:4, col:27> col:27 __format 'const char *restrict'
| |-ParmVarDecl 0x5555d4b47740 <line:102:4, col:32> col:32 __tp 'const struct tm *restrict'
| `-NoThrowAttr 0x5555d4b47950 </usr/include/x86_64-linux-gnu/sys/cdefs.h:79:35>
|-FunctionDecl 0x5555d4b47d78 </usr/include/time.h:116:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:79:54> /usr/include/time.h:116:15 strftime_l 'size_t (char *restrict, size_t, const char *restrict, const struct tm *restrict, locale_t)' extern
| |-ParmVarDecl 0x5555d4b479c0 <col:27, col:44> col:44 __s 'char *restrict'
| |-ParmVarDecl 0x5555d4b47a38 <col:49, col:56> col:56 __maxsize 'size_t':'unsigned long'
| |-ParmVarDecl 0x5555d4b47ab8 <line:117:6, col:29> col:29 __format 'const char *restrict'
| |-ParmVarDecl 0x5555d4b47b48 <line:118:6, col:34> col:34 __tp 'const struct tm *restrict'
| |-ParmVarDecl 0x5555d4b47c20 <line:119:6, col:15> col:15 __loc 'locale_t':'struct __locale_struct *'
| `-NoThrowAttr 0x5555d4b47e48 </usr/include/x86_64-linux-gnu/sys/cdefs.h:79:35>
|-FunctionDecl 0x5555d4b48020 </usr/include/time.h:132:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:79:54> /usr/include/time.h:132:19 gmtime 'struct tm *(const time_t *)' extern
| |-ParmVarDecl 0x5555d4b47f10 <col:27, col:41> col:41 __timer 'const time_t *'
| `-NoThrowAttr 0x5555d4b480d0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:79:35>
|-FunctionDecl 0x5555d4b481e8 </usr/include/time.h:136:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:79:54> /usr/include/time.h:136:19 localtime 'struct tm *(const time_t *)' extern
| |-ParmVarDecl 0x5555d4b48140 <col:30, col:44> col:44 __timer 'const time_t *'
| `-NoThrowAttr 0x5555d4b48298 </usr/include/x86_64-linux-gnu/sys/cdefs.h:79:35>
|-FunctionDecl 0x5555d4b484e0 </usr/include/time.h:154:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:79:54> /usr/include/time.h:154:19 gmtime_r 'struct tm *(const time_t *restrict, struct tm *restrict)' extern
| |-ParmVarDecl 0x5555d4b48308 <col:29, col:54> col:54 __timer 'const time_t *restrict'
| |-ParmVarDecl 0x5555d4b483b8 <line:155:8, col:30> col:30 __tp 'struct tm *restrict'
| `-NoThrowAttr 0x5555d4b48598 </usr/include/x86_64-linux-gnu/sys/cdefs.h:79:35>
|-FunctionDecl 0x5555d4b48748 </usr/include/time.h:159:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:79:54> /usr/include/time.h:159:19 localtime_r 'struct tm *(const time_t *restrict, struct tm *restrict)' extern
| |-ParmVarDecl 0x5555d4b48608 <col:32, col:57> col:57 __timer 'const time_t *restrict'
| |-ParmVarDecl 0x5555d4b48698 <line:160:11, col:33> col:33 __tp 'struct tm *restrict'
| `-NoThrowAttr 0x5555d4b48800 </usr/include/x86_64-linux-gnu/sys/cdefs.h:79:35>
|-FunctionDecl 0x5555d4b48980 </usr/include/time.h:179:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:79:54> /usr/include/time.h:179:14 asctime 'char *(const struct tm *)' extern
| |-ParmVarDecl 0x5555d4b48880 <col:23, col:40> col:40 __tp 'const struct tm *'
| `-NoThrowAttr 0x5555d4b48a30 </usr/include/x86_64-linux-gnu/sys/cdefs.h:79:35>
|-FunctionDecl 0x5555d4b48ba0 </usr/include/time.h:183:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:79:54> /usr/include/time.h:183:14 ctime 'char *(const time_t *)' extern
| |-ParmVarDecl 0x5555d4b48aa0 <col:21, col:35> col:35 __timer 'const time_t *'
| `-NoThrowAttr 0x5555d4b48c50 </usr/include/x86_64-linux-gnu/sys/cdefs.h:79:35>
|-FunctionDecl 0x5555d4b48e70 </usr/include/time.h:197:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:79:54> /usr/include/time.h:197:14 asctime_r 'char *(const struct tm *restrict, char *restrict)' extern
| |-ParmVarDecl 0x5555d4b48cd0 <col:25, col:53> col:53 __tp 'const struct tm *restrict'
| |-ParmVarDecl 0x5555d4b48d50 <line:198:4, col:21> col:21 __buf 'char *restrict'
| `-NoThrowAttr 0x5555d4b48f28 </usr/include/x86_64-linux-gnu/sys/cdefs.h:79:35>
|-FunctionDecl 0x5555d4b49130 </usr/include/time.h:202:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:79:54> /usr/include/time.h:202:14 ctime_r 'char *(const time_t *restrict, char *restrict)' extern
| |-ParmVarDecl 0x5555d4b48f98 <col:23, col:48> col:48 __timer 'const time_t *restrict'
| |-ParmVarDecl 0x5555d4b49018 <line:203:9, col:26> col:26 __buf 'char *restrict'
| `-NoThrowAttr 0x5555d4b491e8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:79:35>
|-VarDecl 0x5555d4b492e0 </usr/include/time.h:217:1, col:24> col:14 __tzname 'char *[2]' extern
|-VarDecl 0x5555d4b493a0 <line:218:1, col:12> col:12 __daylight 'int' extern
|-VarDecl 0x5555d4b49420 <line:219:1, col:17> col:17 __timezone 'long' extern
|-VarDecl 0x5555d4b494f0 <line:224:1, col:22> col:14 tzname 'char *[2]' extern
|-FunctionDecl 0x5555d4b49618 <line:228:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:79:54> /usr/include/time.h:228:13 tzset 'void (void)' extern
| `-NoThrowAttr 0x5555d4b496c0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:79:35>
|-VarDecl 0x5555d4b49730 </usr/include/time.h:232:1, col:12> col:12 daylight 'int' extern
|-VarDecl 0x5555d4b497b0 <line:233:1, col:17> col:17 timezone 'long' extern
|-FunctionDecl 0x5555d4b498d0 <line:246:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:79:54> /usr/include/time.h:246:15 timegm 'time_t (struct tm *)' extern
| |-ParmVarDecl 0x5555d4b49840 <col:23, col:34> col:34 __tp 'struct tm *'
| `-NoThrowAttr 0x5555d4b49980 </usr/include/x86_64-linux-gnu/sys/cdefs.h:79:35>
|-FunctionDecl 0x5555d4b49a90 </usr/include/time.h:263:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:79:54> /usr/include/time.h:263:15 timelocal 'time_t (struct tm *)' extern
| |-ParmVarDecl 0x5555d4b49a00 <col:26, col:37> col:37 __tp 'struct tm *'
| `-NoThrowAttr 0x5555d4b49b40 </usr/include/x86_64-linux-gnu/sys/cdefs.h:79:35>
|-FunctionDecl 0x5555d4b49c80 </usr/include/time.h:271:1, col:67> col:12 dysize 'int (int)' extern
| |-ParmVarDecl 0x5555d4b49bb0 <col:20, col:24> col:24 __year 'int'
| |-NoThrowAttr 0x5555d4b49d30 </usr/include/x86_64-linux-gnu/sys/cdefs.h:79:35>
| `-ConstAttr 0x5555d4b49d88 </usr/include/time.h:271:57>
|-FunctionDecl 0x5555d4b4a040 <line:281:1, line:282:37> line:281:12 nanosleep 'int (const struct timespec *, struct timespec *)' extern
| |-ParmVarDecl 0x5555d4b49e30 <col:23, col:46> col:46 __requested_time 'const struct timespec *'
| `-ParmVarDecl 0x5555d4b49f20 <line:282:9, col:26> col:26 __remaining 'struct timespec *'
|-FunctionDecl 0x5555d4b4a3b0 <line:285:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:79:54> /usr/include/time.h:285:12 clock_getres 'int (clockid_t, struct timespec *)' extern
| |-ParmVarDecl 0x5555d4b4a170 <col:26, col:36> col:36 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x5555d4b4a200 <col:48, col:65> col:65 __res 'struct timespec *'
| `-NoThrowAttr 0x5555d4b4a468 </usr/include/x86_64-linux-gnu/sys/cdefs.h:79:35>
|-FunctionDecl 0x5555d4b4a620 </usr/include/time.h:288:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:386:76> /usr/include/time.h:288:12 clock_gettime 'int (clockid_t, struct timespec *)' extern
| |-ParmVarDecl 0x5555d4b4a4d0 <col:27, col:37> col:37 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x5555d4b4a560 <col:49, col:66> col:66 __tp 'struct timespec *'
| |-NoThrowAttr 0x5555d4b4a6d8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5555d4b4a730 <line:386:57, /usr/include/time.h:289:26> 2
|-FunctionDecl 0x5555d4b4a940 <line:292:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:386:76> /usr/include/time.h:292:12 clock_settime 'int (clockid_t, const struct timespec *)' extern
| |-ParmVarDecl 0x5555d4b4a778 <col:27, col:37> col:37 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x5555d4b4a808 <col:49, col:72> col:72 __tp 'const struct timespec *'
| |-NoThrowAttr 0x5555d4b4a9f8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5555d4b4aa50 <line:386:57, /usr/include/time.h:293:26> 2
|-FunctionDecl 0x5555d4b4ad80 <line:323:1, line:325:30> line:323:12 clock_nanosleep 'int (clockid_t, int, const struct timespec *, struct timespec *)' extern
| |-ParmVarDecl 0x5555d4b4aa98 <col:29, col:39> col:39 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x5555d4b4ab18 <col:51, col:55> col:55 __flags 'int'
| |-ParmVarDecl 0x5555d4b4aba8 <line:324:8, col:31> col:31 __req 'const struct timespec *'
| `-ParmVarDecl 0x5555d4b4ac38 <line:325:8, col:25> col:25 __rem 'struct timespec *'
|-FunctionDecl 0x5555d4b4b0c0 <line:338:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:79:54> /usr/include/time.h:338:12 clock_getcpuclockid 'int (pid_t, clockid_t *)' extern
| |-ParmVarDecl 0x5555d4b4aec0 <col:33, col:39> col:39 __pid 'pid_t':'int'
| |-ParmVarDecl 0x5555d4b4afa0 <col:46, col:57> col:57 __clock_id 'clockid_t *'
| `-NoThrowAttr 0x5555d4b4b178 </usr/include/x86_64-linux-gnu/sys/cdefs.h:79:35>
|-FunctionDecl 0x5555d4b4b590 </usr/include/time.h:343:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:79:54> /usr/include/time.h:343:12 timer_create 'int (clockid_t, struct sigevent *restrict, timer_t *restrict)' extern
| |-ParmVarDecl 0x5555d4b4b1e0 <col:26, col:36> col:36 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x5555d4b4b300 <line:344:5, col:33> col:33 __evp 'struct sigevent *restrict'
| |-ParmVarDecl 0x5555d4b4b460 <line:345:5, col:25> col:25 __timerid 'timer_t *restrict'
| `-NoThrowAttr 0x5555d4b4b650 </usr/include/x86_64-linux-gnu/sys/cdefs.h:79:35>
|-FunctionDecl 0x5555d4b4b7b0 </usr/include/time.h:348:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:79:54> /usr/include/time.h:348:12 timer_delete 'int (timer_t)' extern
| |-ParmVarDecl 0x5555d4b4b6b8 <col:26, col:34> col:34 __timerid 'timer_t':'void *'
| `-NoThrowAttr 0x5555d4b4b860 </usr/include/x86_64-linux-gnu/sys/cdefs.h:79:35>
|-FunctionDecl 0x5555d4b4bca0 </usr/include/time.h:352:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:79:54> /usr/include/time.h:352:12 timer_settime 'int (timer_t, int, const struct itimerspec *restrict, struct itimerspec *restrict)' extern
| |-ParmVarDecl 0x5555d4b4b8c8 <col:27, col:35> col:35 __timerid 'timer_t':'void *'
| |-ParmVarDecl 0x5555d4b4b948 <col:46, col:50> col:50 __flags 'int'
| |-ParmVarDecl 0x5555d4b4ba60 <line:353:6, col:42> col:42 __value 'const struct itimerspec *restrict'
| |-ParmVarDecl 0x5555d4b4bb50 <line:354:6, col:36> col:36 __ovalue 'struct itimerspec *restrict'
| `-NoThrowAttr 0x5555d4b4bd68 </usr/include/x86_64-linux-gnu/sys/cdefs.h:79:35>
|-FunctionDecl 0x5555d4b4bf80 </usr/include/time.h:357:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:79:54> /usr/include/time.h:357:12 timer_gettime 'int (timer_t, struct itimerspec *)' extern
| |-ParmVarDecl 0x5555d4b4bdd0 <col:27, col:35> col:35 __timerid 'timer_t':'void *'
| |-ParmVarDecl 0x5555d4b4be60 <col:46, col:65> col:65 __value 'struct itimerspec *'
| `-NoThrowAttr 0x5555d4b4c038 </usr/include/x86_64-linux-gnu/sys/cdefs.h:79:35>
|-FunctionDecl 0x5555d4b4c138 </usr/include/time.h:376:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:79:54> /usr/include/time.h:376:12 timer_getoverrun 'int (timer_t)' extern
| |-ParmVarDecl 0x5555d4b4c0a0 <col:30, col:38> col:38 __timerid 'timer_t':'void *'
| `-NoThrowAttr 0x5555d4b4c1e8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:79:35>
|-FunctionDecl 0x5555d4b4c440 </usr/include/time.h:383:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:386:76> /usr/include/time.h:383:12 timespec_get 'int (struct timespec *, int)' extern
| |-ParmVarDecl 0x5555d4b4c268 <col:26, col:43> col:43 __ts 'struct timespec *'
| |-ParmVarDecl 0x5555d4b4c2e8 <col:49, col:53> col:53 __base 'int'
| |-NoThrowAttr 0x5555d4b4c4f8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5555d4b4c550 <line:386:57, /usr/include/time.h:384:27> 1
|-EnumDecl 0x5555d4b4c5b8 </workspace/clang-c/CXErrorCode.h:28:1, line:57:1> line:28:6 CXErrorCode
| |-FullComment 0x5555d4bf0430 <line:23:3, line:26:76>
| | |-ParagraphComment 0x5555d4bf0310 <line:23:3, col:45>
| | | `-TextComment 0x5555d4bf02e0 <col:3, col:45> Text=" Error codes returned by libclang routines."
| | `-ParagraphComment 0x5555d4bf0400 <line:25:3, line:26:76>
| |   |-TextComment 0x5555d4bf0330 <line:25:3, col:9> Text=" Zero ("
| |   |-InlineCommandComment 0x5555d4bf0380 <col:10, col:11> Name="c" RenderMonospaced Arg[0]="CXError_Success)"
| |   |-TextComment 0x5555d4bf03a0 <col:29, col:78> Text=" is the only error code indicating success.  Other"
| |   `-TextComment 0x5555d4bf03c0 <line:26:3, col:76> Text=" error codes, including not yet assigned non-zero values, indicate errors."
| |-EnumConstantDecl 0x5555d4b4c6e8 <line:32:3, col:21> col:3 CXError_Success 'int'
| | |-ConstantExpr 0x5555d4b4c6c8 <col:21> 'int'
| | | |-value: Int 0
| | | `-IntegerLiteral 0x5555d4b4c6a8 <col:21> 'int' 0
| | `-FullComment 0x5555d4bf0500 <line:30:5, col:14>
| |   `-ParagraphComment 0x5555d4bf04d0 <col:5, col:14>
| |     `-TextComment 0x5555d4bf04a0 <col:5, col:14> Text=" No error."
| |-EnumConstantDecl 0x5555d4b4c7a8 <line:40:3, col:21> col:3 CXError_Failure 'int'
| | |-ConstantExpr 0x5555d4b4c788 <col:21> 'int'
| | | |-value: Int 1
| | | `-IntegerLiteral 0x5555d4b4c768 <col:21> 'int' 1
| | `-FullComment 0x5555d4bf0640 <line:35:5, line:38:23>
| |   |-ParagraphComment 0x5555d4bf05a0 <line:35:5, col:60>
| |   | `-TextComment 0x5555d4bf0570 <col:5, col:60> Text=" A generic error code, no further details are available."
| |   `-ParagraphComment 0x5555d4bf0610 <line:37:5, line:38:23>
| |     |-TextComment 0x5555d4bf05c0 <line:37:5, col:73> Text=" Errors of this kind can get their own specific error codes in future"
| |     `-TextComment 0x5555d4bf05e0 <line:38:5, col:23> Text=" libclang versions."
| |-EnumConstantDecl 0x5555d4b4c868 <line:45:3, col:21> col:3 CXError_Crashed 'int'
| | |-ConstantExpr 0x5555d4b4c848 <col:21> 'int'
| | | |-value: Int 2
| | | `-IntegerLiteral 0x5555d4b4c828 <col:21> 'int' 2
| | `-FullComment 0x5555d4bf0710 <line:43:5, col:63>
| |   `-ParagraphComment 0x5555d4bf06e0 <col:5, col:63>
| |     `-TextComment 0x5555d4bf06b0 <col:5, col:63> Text=" libclang crashed while performing the requested operation."
| |-EnumConstantDecl 0x5555d4b4c928 <line:51:3, col:30> col:3 CXError_InvalidArguments 'int'
| | |-ConstantExpr 0x5555d4b4c908 <col:30> 'int'
| | | |-value: Int 3
| | | `-IntegerLiteral 0x5555d4b4c8e8 <col:30> 'int' 3
| | `-FullComment 0x5555d4bf0800 <line:48:5, line:49:14>
| |   `-ParagraphComment 0x5555d4bf07d0 <line:48:5, line:49:14>
| |     |-TextComment 0x5555d4bf0780 <line:48:5, col:66> Text=" The function detected that the arguments violate the function"
| |     `-TextComment 0x5555d4bf07a0 <line:49:5, col:14> Text=" contract."
| `-EnumConstantDecl 0x5555d4b4c9e8 <line:56:3, col:26> col:3 CXError_ASTReadError 'int'
|   |-ConstantExpr 0x5555d4b4c9c8 <col:26> 'int'
|   | |-value: Int 4
|   | `-IntegerLiteral 0x5555d4b4c9a8 <col:26> 'int' 4
|   `-FullComment 0x5555d4bf08d0 <line:54:5, col:47>
|     `-ParagraphComment 0x5555d4bf08a0 <col:5, col:47>
|       `-TextComment 0x5555d4bf0870 <col:5, col:47> Text=" An AST deserialization error has occurred."
|-RecordDecl 0x5555d4b4ca98 </workspace/clang-c/CXString.h:37:9, line:40:1> line:37:9 struct definition
| |-FullComment 0x5555d4bf0be0 <line:30:3, line:35:74>
| | |-ParagraphComment 0x5555d4bf0970 <line:30:3, col:22>
| | | `-TextComment 0x5555d4bf0940 <col:3, col:22> Text=" A character string."
| | `-ParagraphComment 0x5555d4bf0bb0 <line:32:3, line:35:74>
| |   |-TextComment 0x5555d4bf0990 <line:32:3, col:7> Text=" The "
| |   |-InlineCommandComment 0x5555d4bf09e0 <col:8, col:9> Name="c" RenderMonospaced Arg[0]="CXString"
| |   |-TextComment 0x5555d4bf0a00 <col:19, col:73> Text=" type is used to return strings from the interface when"
| |   |-TextComment 0x5555d4bf0a20 <line:33:3, col:71> Text=" the ownership of that string might differ from one call to the next."
| |   |-TextComment 0x5555d4bf0a40 <line:34:3, col:7> Text=" Use "
| |   |-InlineCommandComment 0x5555d4bf0a90 <col:8, col:9> Name="c" RenderMonospaced Arg[0]="clang_getCString()"
| |   |-TextComment 0x5555d4bf0ab0 <col:29, col:75> Text=" to retrieve the string data and, once finished"
| |   |-TextComment 0x5555d4bf0ad0 <line:35:3, col:30> Text=" with the string data, call "
| |   |-InlineCommandComment 0x5555d4bf0b20 <col:31, col:32> Name="c" RenderMonospaced Arg[0]="clang_disposeString()"
| |   `-TextComment 0x5555d4bf0b40 <col:55, col:74> Text=" to free the string."
| |-FieldDecl 0x5555d4b4cb80 <line:38:3, col:15> col:15 data 'const void *'
| `-FieldDecl 0x5555d4b4cbe8 <line:39:3, col:12> col:12 private_flags 'unsigned int'
|-TypedefDecl 0x5555d4b4cc98 <line:37:1, line:40:3> col:3 referenced CXString 'struct CXString':'CXString'
| |-ElaboratedType 0x5555d4b4cc40 'struct CXString' sugar
| | `-RecordType 0x5555d4b4cb20 'CXString'
| |   `-Record 0x5555d4b4ca98 ''
| `-FullComment 0x5555d4bf0ef0 <line:30:3, line:35:74>
|   |-ParagraphComment 0x5555d4bf0c80 <line:30:3, col:22>
|   | `-TextComment 0x5555d4bf0c50 <col:3, col:22> Text=" A character string."
|   `-ParagraphComment 0x5555d4bf0ec0 <line:32:3, line:35:74>
|     |-TextComment 0x5555d4bf0ca0 <line:32:3, col:7> Text=" The "
|     |-InlineCommandComment 0x5555d4bf0cf0 <col:8, col:9> Name="c" RenderMonospaced Arg[0]="CXString"
|     |-TextComment 0x5555d4bf0d10 <col:19, col:73> Text=" type is used to return strings from the interface when"
|     |-TextComment 0x5555d4bf0d30 <line:33:3, col:71> Text=" the ownership of that string might differ from one call to the next."
|     |-TextComment 0x5555d4bf0d50 <line:34:3, col:7> Text=" Use "
|     |-InlineCommandComment 0x5555d4bf0da0 <col:8, col:9> Name="c" RenderMonospaced Arg[0]="clang_getCString()"
|     |-TextComment 0x5555d4bf0dc0 <col:29, col:75> Text=" to retrieve the string data and, once finished"
|     |-TextComment 0x5555d4bf0de0 <line:35:3, col:30> Text=" with the string data, call "
|     |-InlineCommandComment 0x5555d4bf0e30 <col:31, col:32> Name="c" RenderMonospaced Arg[0]="clang_disposeString()"
|     `-TextComment 0x5555d4bf0e50 <col:55, col:74> Text=" to free the string."
|-RecordDecl 0x5555d4b4cd08 <line:42:9, line:45:1> line:42:9 struct definition
| |-FieldDecl 0x5555d4b4ce80 <line:43:3, col:13> col:13 Strings 'CXString *'
| `-FieldDecl 0x5555d4b4cee8 <line:44:3, col:12> col:12 Count 'unsigned int'
|-TypedefDecl 0x5555d4b4cf98 <line:42:1, line:45:3> col:3 referenced CXStringSet 'struct CXStringSet':'CXStringSet'
| `-ElaboratedType 0x5555d4b4cf40 'struct CXStringSet' sugar
|   `-RecordType 0x5555d4b4cd90 'CXStringSet'
|     `-Record 0x5555d4b4cd08 ''
|-FunctionDecl 0x5555d4b4d190 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/CXString.h:50:60> col:28 clang_getCString 'const char *(CXString)'
| |-ParmVarDecl 0x5555d4b4d098 <col:45, col:54> col:54 string 'CXString':'CXString'
| |-VisibilityAttr 0x5555d4b4d240 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4bf0fc0 </workspace/clang-c/CXString.h:48:3, col:64>
|   `-ParagraphComment 0x5555d4bf0f90 <col:3, col:64>
|     `-TextComment 0x5555d4bf0f60 <col:3, col:64> Text=" Retrieve the character data associated with the given string."
|-FunctionDecl 0x5555d4b58178 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/CXString.h:55:56> col:21 clang_disposeString 'void (CXString)'
| |-ParmVarDecl 0x5555d4b4d2f8 <col:41, col:50> col:50 string 'CXString':'CXString'
| |-VisibilityAttr 0x5555d4b58228 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4bf30c0 </workspace/clang-c/CXString.h:53:3, col:25>
|   `-ParagraphComment 0x5555d4bf3090 <col:3, col:25>
|     `-TextComment 0x5555d4bf1030 <col:3, col:25> Text=" Free the given string."
|-FunctionDecl 0x5555d4b58498 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/CXString.h:60:60> col:21 clang_disposeStringSet 'void (CXStringSet *)'
| |-ParmVarDecl 0x5555d4b583a0 <col:44, col:57> col:57 set 'CXStringSet *'
| |-VisibilityAttr 0x5555d4b58548 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4bf3190 </workspace/clang-c/CXString.h:58:3, col:29>
|   `-ParagraphComment 0x5555d4bf3160 <col:3, col:29>
|     `-TextComment 0x5555d4bf3130 <col:3, col:29> Text=" Free the given string set."
|-FunctionDecl 0x5555d4b58710 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/BuildSystem.h:33:70> col:35 clang_getBuildSessionTimestamp 'unsigned long long (void)'
| |-VisibilityAttr 0x5555d4b587b8 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4bf3310 </workspace/clang-c/BuildSystem.h:30:3, line:31:40>
|   `-ParagraphComment 0x5555d4bf32e0 <line:30:3, line:31:40>
|     |-TextComment 0x5555d4bf3200 <line:30:3, col:44> Text=" Return the timestamp for use with Clang's"
|     |-TextComment 0x5555d4bf3220 <line:31:3> Text=" "
|     |-InlineCommandComment 0x5555d4bf3280 <col:4, col:5> Name="c" RenderMonospaced Arg[0]="-fbuild-session-timestamp="
|     `-TextComment 0x5555d4bf32a0 <col:33, col:40> Text=" option."
|-RecordDecl 0x5555d4b58838 <line:39:9, col:16> col:16 struct CXVirtualFileOverlayImpl
|-TypedefDecl 0x5555d4b589a0 <col:1, col:42> col:42 referenced CXVirtualFileOverlay 'struct CXVirtualFileOverlayImpl *'
| |-PointerType 0x5555d4b58950 'struct CXVirtualFileOverlayImpl *'
| | `-ElaboratedType 0x5555d4b588e0 'struct CXVirtualFileOverlayImpl' sugar
| |   `-RecordType 0x5555d4b588c0 'struct CXVirtualFileOverlayImpl'
| |     `-Record 0x5555d4b58838 'CXVirtualFileOverlayImpl'
| `-FullComment 0x5555d4bf3400 <line:36:3, line:37:46>
|   `-ParagraphComment 0x5555d4bf33d0 <line:36:3, line:37:46>
|     |-TextComment 0x5555d4bf3380 <line:36:3, col:60> Text=" Object encapsulating information about overlaying virtual"
|     `-TextComment 0x5555d4bf33a0 <line:37:3, col:46> Text=" file/directories over the real file system."
|-FunctionDecl 0x5555d4b58bc8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/BuildSystem.h:48:49> col:1 clang_VirtualFileOverlay_create 'CXVirtualFileOverlay (unsigned int)'
| |-ParmVarDecl 0x5555d4b58ad8 <col:33, col:42> col:42 options 'unsigned int'
| |-VisibilityAttr 0x5555d4b58c78 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4bf36f0 </workspace/clang-c/BuildSystem.h:42:3, line:45:45>
|   |-ParagraphComment 0x5555d4bf35b0 <line:42:3, line:43:27>
|   | |-TextComment 0x5555d4bf3470 <line:42:3, col:12> Text=" Create a "
|   | |-InlineCommandComment 0x5555d4bf34c0 <col:13, col:14> Name="c" RenderMonospaced Arg[0]="CXVirtualFileOverlay"
|   | |-TextComment 0x5555d4bf34e0 <col:36, col:43> Text=" object."
|   | |-TextComment 0x5555d4bf3500 <line:43:3, col:25> Text=" Must be disposed with "
|   | `-InlineCommandComment 0x5555d4bf3560 <col:26, col:27> Name="c" RenderMonospaced Arg[0]="clang_VirtualFileOverlay_dispose()."
|   |-ParagraphComment 0x5555d4bf3600 <line:45:3>
|   | `-TextComment 0x5555d4bf35d0 <col:3> Text=" "
|   `-ParamCommandComment 0x5555d4bf3620 <col:4, col:45> [in] implicitly Param="options" ParamIndex=0
|     `-ParagraphComment 0x5555d4bf36b0 <col:18, col:45>
|       `-TextComment 0x5555d4bf3680 <col:18, col:45> Text=" is reserved, always pass 0."
|-FunctionDecl 0x5555d4b58f88 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/BuildSystem.h:58:61> line:56:1 clang_VirtualFileOverlay_addFileMapping 'enum CXErrorCode (CXVirtualFileOverlay, const char *, const char *)'
| |-ParmVarDecl 0x5555d4b58d28 <col:41> col:61 'CXVirtualFileOverlay':'struct CXVirtualFileOverlayImpl *'
| |-ParmVarDecl 0x5555d4b58da8 <line:57:41, col:53> col:53 virtualPath 'const char *'
| |-ParmVarDecl 0x5555d4b58e28 <line:58:41, col:53> col:53 realPath 'const char *'
| |-VisibilityAttr 0x5555d4b59048 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4bf3890 </workspace/clang-c/BuildSystem.h:51:3, line:53:57>
|   |-ParagraphComment 0x5555d4bf37e0 <line:51:3, line:53:3>
|   | |-TextComment 0x5555d4bf3760 <line:51:3, col:61> Text=" Map an absolute virtual file path to an absolute real one."
|   | |-TextComment 0x5555d4bf3780 <line:52:3, col:65> Text=" The virtual path must be canonicalized (not contain "."/"..")."
|   | `-TextComment 0x5555d4bf37a0 <line:53:3> Text=" "
|   `-BlockCommandComment 0x5555d4bf3800 <col:4, col:57> Name="returns"
|     `-ParagraphComment 0x5555d4bf3860 <col:12, col:57>
|       `-TextComment 0x5555d4bf3830 <col:12, col:57> Text=" 0 for success, non-zero to indicate an error."
|-FunctionDecl 0x5555d4b59308 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/BuildSystem.h:68:62> line:67:1 clang_VirtualFileOverlay_setCaseSensitivity 'enum CXErrorCode (CXVirtualFileOverlay, int)'
| |-ParmVarDecl 0x5555d4b59160 <col:45> col:65 'CXVirtualFileOverlay':'struct CXVirtualFileOverlayImpl *'
| |-ParmVarDecl 0x5555d4b591e0 <line:68:45, col:49> col:49 caseSensitive 'int'
| |-VisibilityAttr 0x5555d4b593c0 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4bf3b50 </workspace/clang-c/BuildSystem.h:61:3, line:64:57>
|   |-ParagraphComment 0x5555d4bf3aa0 <line:61:3, line:64:3>
|   | |-TextComment 0x5555d4bf3900 <line:61:3, col:36> Text=" Set the case sensitivity for the "
|   | |-InlineCommandComment 0x5555d4bf3950 <col:37, col:38> Name="c" RenderMonospaced Arg[0]="CXVirtualFileOverlay"
|   | |-TextComment 0x5555d4bf3970 <col:60, col:67> Text=" object."
|   | |-TextComment 0x5555d4bf3990 <line:62:3, col:7> Text=" The "
|   | |-InlineCommandComment 0x5555d4bf39e0 <col:8, col:9> Name="c" RenderMonospaced Arg[0]="CXVirtualFileOverlay"
|   | |-TextComment 0x5555d4bf3a00 <col:31, col:72> Text=" object is case-sensitive by default, this"
|   | |-TextComment 0x5555d4bf3a20 <line:63:3, col:46> Text=" option can be used to override the default."
|   | `-TextComment 0x5555d4bf3a40 <line:64:3> Text=" "
|   `-BlockCommandComment 0x5555d4bf3ac0 <col:4, col:57> Name="returns"
|     `-ParagraphComment 0x5555d4bf3b20 <col:12, col:57>
|       `-TextComment 0x5555d4bf3af0 <col:12, col:57> Text=" 0 for success, non-zero to indicate an error."
|-FunctionDecl 0x5555d4b597a8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/BuildSystem.h:82:65> line:80:1 clang_VirtualFileOverlay_writeToBuffer 'enum CXErrorCode (CXVirtualFileOverlay, unsigned int, char **, unsigned int *)'
| |-ParmVarDecl 0x5555d4b59478 <col:40> col:60 'CXVirtualFileOverlay':'struct CXVirtualFileOverlayImpl *'
| |-ParmVarDecl 0x5555d4b594f8 <col:62, col:71> col:71 options 'unsigned int'
| |-ParmVarDecl 0x5555d4b595a0 <line:81:40, col:47> col:47 out_buffer_ptr 'char **'
| |-ParmVarDecl 0x5555d4b59650 <line:82:40, col:50> col:50 out_buffer_size 'unsigned int *'
| |-VisibilityAttr 0x5555d4b59870 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4bf40a0 </workspace/clang-c/BuildSystem.h:71:3, line:77:57>
|   |-ParagraphComment 0x5555d4bf3c70 <line:71:3, col:65>
|   | |-TextComment 0x5555d4bf3bc0 <col:3, col:17> Text=" Write out the "
|   | |-InlineCommandComment 0x5555d4bf3c10 <col:18, col:19> Name="c" RenderMonospaced Arg[0]="CXVirtualFileOverlay"
|   | `-TextComment 0x5555d4bf3c30 <col:41, col:65> Text=" object to a char buffer."
|   |-ParagraphComment 0x5555d4bf3cc0 <line:73:3>
|   | `-TextComment 0x5555d4bf3c90 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4bf3ce0 <col:4, line:74:3> [in] implicitly Param="options" ParamIndex=1
|   | `-ParagraphComment 0x5555d4bf3d90 <line:73:18, line:74:3>
|   |   |-TextComment 0x5555d4bf3d40 <line:73:18, col:45> Text=" is reserved, always pass 0."
|   |   `-TextComment 0x5555d4bf3d60 <line:74:3> Text=" "
|   |-ParamCommandComment 0x5555d4bf3db0 <col:4, line:76:3> [in] implicitly Param="out_buffer_ptr" ParamIndex=2
|   | `-ParagraphComment 0x5555d4bf3ee0 <line:74:25, line:76:3>
|   |   |-TextComment 0x5555d4bf3e10 <line:74:25, col:79> Text=" pointer to receive the buffer pointer, which should be"
|   |   |-TextComment 0x5555d4bf3e30 <line:75:3, col:18> Text=" disposed using "
|   |   |-InlineCommandComment 0x5555d4bf3e80 <col:19, col:20> Name="c" RenderMonospaced Arg[0]="clang_free()."
|   |   `-TextComment 0x5555d4bf3ea0 <line:76:3> Text=" "
|   |-ParamCommandComment 0x5555d4bf3f00 <col:4, line:77:3> [in] implicitly Param="out_buffer_size" ParamIndex=3
|   | `-ParagraphComment 0x5555d4bf3fb0 <line:76:26, line:77:3>
|   |   |-TextComment 0x5555d4bf3f60 <line:76:26, col:61> Text=" pointer to receive the buffer size."
|   |   `-TextComment 0x5555d4bf3f80 <line:77:3> Text=" "
|   `-BlockCommandComment 0x5555d4bf3fd0 <col:4, col:57> Name="returns"
|     `-ParagraphComment 0x5555d4bf4030 <col:12, col:57>
|       `-TextComment 0x5555d4bf4000 <col:12, col:57> Text=" 0 for success, non-zero to indicate an error."
|-FunctionDecl 0x5555d4b599f8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/BuildSystem.h:90:44> col:21 clang_free 'void (void *)'
| |-ParmVarDecl 0x5555d4b59930 <col:32, col:38> col:38 buffer 'void *'
| |-VisibilityAttr 0x5555d4b59aa8 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4bf43a0 </workspace/clang-c/BuildSystem.h:85:3, line:88:40>
|   |-ParagraphComment 0x5555d4bf4260 <line:85:3, line:86:34>
|   | |-TextComment 0x5555d4bf4110 <line:85:3, col:68> Text=" free memory allocated by libclang, such as the buffer returned by"
|   | |-TextComment 0x5555d4bf4130 <line:86:3> Text=" "
|   | |-InlineCommandComment 0x5555d4bf4180 <col:4, col:5> Name="c" RenderMonospaced Arg[0]="CXVirtualFileOverlay()"
|   | |-TextComment 0x5555d4bf41a0 <col:29, col:32> Text=" or "
|   | `-InlineCommandComment 0x5555d4bf4210 <col:33, col:34> Name="c" RenderMonospaced Arg[0]="clang_ModuleMapDescriptor_writeToBuffer()."
|   |-ParagraphComment 0x5555d4bf42b0 <line:88:3>
|   | `-TextComment 0x5555d4bf4280 <col:3> Text=" "
|   `-ParamCommandComment 0x5555d4bf42d0 <col:4, col:40> [in] implicitly Param="buffer" ParamIndex=0
|     `-ParagraphComment 0x5555d4bf4360 <col:17, col:40>
|       `-TextComment 0x5555d4bf4330 <col:17, col:40> Text=" memory pointer to free."
|-FunctionDecl 0x5555d4b59c48 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/BuildSystem.h:95:74> col:21 clang_VirtualFileOverlay_dispose 'void (CXVirtualFileOverlay)'
| |-ParmVarDecl 0x5555d4b59b58 <col:54> col:74 'CXVirtualFileOverlay':'struct CXVirtualFileOverlayImpl *'
| |-VisibilityAttr 0x5555d4b59cf8 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4bf44f0 </workspace/clang-c/BuildSystem.h:93:3, col:44>
|   `-ParagraphComment 0x5555d4bf44c0 <col:3, col:44>
|     |-TextComment 0x5555d4bf4410 <col:3, col:13> Text=" Dispose a "
|     |-InlineCommandComment 0x5555d4bf4460 <col:14, col:15> Name="c" RenderMonospaced Arg[0]="CXVirtualFileOverlay"
|     `-TextComment 0x5555d4bf4480 <col:37, col:44> Text=" object."
|-RecordDecl 0x5555d4b59d78 <line:100:9, col:16> col:16 struct CXModuleMapDescriptorImpl
|-TypedefDecl 0x5555d4b59ee0 <col:1, col:43> col:43 referenced CXModuleMapDescriptor 'struct CXModuleMapDescriptorImpl *'
| |-PointerType 0x5555d4b59e90 'struct CXModuleMapDescriptorImpl *'
| | `-ElaboratedType 0x5555d4b59e20 'struct CXModuleMapDescriptorImpl' sugar
| |   `-RecordType 0x5555d4b59e00 'struct CXModuleMapDescriptorImpl'
| |     `-Record 0x5555d4b59d78 'CXModuleMapDescriptorImpl'
| `-FullComment 0x5555d4bf45c0 <line:98:3, col:60>
|   `-ParagraphComment 0x5555d4bf4590 <col:3, col:60>
|     `-TextComment 0x5555d4bf4560 <col:3, col:60> Text=" Object encapsulating information about a module.map file."
|-FunctionDecl 0x5555d4b5a1f0 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/BuildSystem.h:109:50> col:1 clang_ModuleMapDescriptor_create 'CXModuleMapDescriptor (unsigned int)'
| |-ParmVarDecl 0x5555d4b5a018 <col:34, col:43> col:43 options 'unsigned int'
| |-VisibilityAttr 0x5555d4b5a2a0 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4bf48b0 </workspace/clang-c/BuildSystem.h:103:3, line:106:45>
|   |-ParagraphComment 0x5555d4bf4770 <line:103:3, line:104:27>
|   | |-TextComment 0x5555d4bf4630 <line:103:3, col:12> Text=" Create a "
|   | |-InlineCommandComment 0x5555d4bf4680 <col:13, col:14> Name="c" RenderMonospaced Arg[0]="CXModuleMapDescriptor"
|   | |-TextComment 0x5555d4bf46a0 <col:37, col:44> Text=" object."
|   | |-TextComment 0x5555d4bf46c0 <line:104:3, col:25> Text=" Must be disposed with "
|   | `-InlineCommandComment 0x5555d4bf4720 <col:26, col:27> Name="c" RenderMonospaced Arg[0]="clang_ModuleMapDescriptor_dispose()."
|   |-ParagraphComment 0x5555d4bf47c0 <line:106:3>
|   | `-TextComment 0x5555d4bf4790 <col:3> Text=" "
|   `-ParamCommandComment 0x5555d4bf47e0 <col:4, col:45> [in] implicitly Param="options" ParamIndex=0
|     `-ParagraphComment 0x5555d4bf4870 <col:18, col:45>
|       `-TextComment 0x5555d4bf4840 <col:18, col:45> Text=" is reserved, always pass 0."
|-FunctionDecl 0x5555d4b5a4f8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/BuildSystem.h:117:66> line:116:1 clang_ModuleMapDescriptor_setFrameworkModuleName 'enum CXErrorCode (CXModuleMapDescriptor, const char *)'
| |-ParmVarDecl 0x5555d4b5a358 <col:50> col:71 'CXModuleMapDescriptor':'struct CXModuleMapDescriptorImpl *'
| |-ParmVarDecl 0x5555d4b5a3d8 <line:117:50, col:62> col:62 name 'const char *'
| |-VisibilityAttr 0x5555d4b5a5b0 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4bf4a20 </workspace/clang-c/BuildSystem.h:112:3, line:113:57>
|   |-ParagraphComment 0x5555d4bf4970 <line:112:3, line:113:3>
|   | |-TextComment 0x5555d4bf4920 <line:112:3, col:64> Text=" Sets the framework module name that the module.map describes."
|   | `-TextComment 0x5555d4bf4940 <line:113:3> Text=" "
|   `-BlockCommandComment 0x5555d4bf4990 <col:4, col:57> Name="returns"
|     `-ParagraphComment 0x5555d4bf49f0 <col:12, col:57>
|       `-TextComment 0x5555d4bf49c0 <col:12, col:57> Text=" 0 for success, non-zero to indicate an error."
|-FunctionDecl 0x5555d4b5a790 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/BuildSystem.h:125:61> line:124:1 clang_ModuleMapDescriptor_setUmbrellaHeader 'enum CXErrorCode (CXModuleMapDescriptor, const char *)'
| |-ParmVarDecl 0x5555d4b5a668 <col:45> col:66 'CXModuleMapDescriptor':'struct CXModuleMapDescriptorImpl *'
| |-ParmVarDecl 0x5555d4b5a6e8 <line:125:45, col:57> col:57 name 'const char *'
| |-VisibilityAttr 0x5555d4b5a848 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4bf4b90 </workspace/clang-c/BuildSystem.h:120:3, line:121:57>
|   |-ParagraphComment 0x5555d4bf4ae0 <line:120:3, line:121:3>
|   | |-TextComment 0x5555d4bf4a90 <line:120:3, col:63> Text=" Sets the umbrella header name that the module.map describes."
|   | `-TextComment 0x5555d4bf4ab0 <line:121:3> Text=" "
|   `-BlockCommandComment 0x5555d4bf4b00 <col:4, col:57> Name="returns"
|     `-ParagraphComment 0x5555d4bf4b60 <col:12, col:57>
|       `-TextComment 0x5555d4bf4b30 <col:12, col:57> Text=" 0 for success, non-zero to indicate an error."
|-FunctionDecl 0x5555d4b5abc8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/BuildSystem.h:139:65> line:137:1 clang_ModuleMapDescriptor_writeToBuffer 'enum CXErrorCode (CXModuleMapDescriptor, unsigned int, char **, unsigned int *)'
| |-ParmVarDecl 0x5555d4b5a8f8 <col:41> col:62 'CXModuleMapDescriptor':'struct CXModuleMapDescriptorImpl *'
| |-ParmVarDecl 0x5555d4b5a978 <col:64, col:73> col:73 options 'unsigned int'
| |-ParmVarDecl 0x5555d4b5a9f8 <line:138:40, col:47> col:47 out_buffer_ptr 'char **'
| |-ParmVarDecl 0x5555d4b5aa78 <line:139:40, col:50> col:50 out_buffer_size 'unsigned int *'
| |-VisibilityAttr 0x5555d4b5ac90 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4bf50e0 </workspace/clang-c/BuildSystem.h:128:3, line:134:57>
|   |-ParagraphComment 0x5555d4bf4cb0 <line:128:3, col:66>
|   | |-TextComment 0x5555d4bf4c00 <col:3, col:17> Text=" Write out the "
|   | |-InlineCommandComment 0x5555d4bf4c50 <col:18, col:19> Name="c" RenderMonospaced Arg[0]="CXModuleMapDescriptor"
|   | `-TextComment 0x5555d4bf4c70 <col:42, col:66> Text=" object to a char buffer."
|   |-ParagraphComment 0x5555d4bf4d00 <line:130:3>
|   | `-TextComment 0x5555d4bf4cd0 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4bf4d20 <col:4, line:131:3> [in] implicitly Param="options" ParamIndex=1
|   | `-ParagraphComment 0x5555d4bf4dd0 <line:130:18, line:131:3>
|   |   |-TextComment 0x5555d4bf4d80 <line:130:18, col:45> Text=" is reserved, always pass 0."
|   |   `-TextComment 0x5555d4bf4da0 <line:131:3> Text=" "
|   |-ParamCommandComment 0x5555d4bf4df0 <col:4, line:133:3> [in] implicitly Param="out_buffer_ptr" ParamIndex=2
|   | `-ParagraphComment 0x5555d4bf4f20 <line:131:25, line:133:3>
|   |   |-TextComment 0x5555d4bf4e50 <line:131:25, col:79> Text=" pointer to receive the buffer pointer, which should be"
|   |   |-TextComment 0x5555d4bf4e70 <line:132:3, col:18> Text=" disposed using "
|   |   |-InlineCommandComment 0x5555d4bf4ec0 <col:19, col:20> Name="c" RenderMonospaced Arg[0]="clang_free()."
|   |   `-TextComment 0x5555d4bf4ee0 <line:133:3> Text=" "
|   |-ParamCommandComment 0x5555d4bf4f40 <col:4, line:134:3> [in] implicitly Param="out_buffer_size" ParamIndex=3
|   | `-ParagraphComment 0x5555d4bf4ff0 <line:133:26, line:134:3>
|   |   |-TextComment 0x5555d4bf4fa0 <line:133:26, col:61> Text=" pointer to receive the buffer size."
|   |   `-TextComment 0x5555d4bf4fc0 <line:134:3> Text=" "
|   `-BlockCommandComment 0x5555d4bf5010 <col:4, col:57> Name="returns"
|     `-ParagraphComment 0x5555d4bf5070 <col:12, col:57>
|       `-TextComment 0x5555d4bf5040 <col:12, col:57> Text=" 0 for success, non-zero to indicate an error."
|-FunctionDecl 0x5555d4b5ae38 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/BuildSystem.h:144:76> col:21 clang_ModuleMapDescriptor_dispose 'void (CXModuleMapDescriptor)'
| |-ParmVarDecl 0x5555d4b5ad48 <col:55> col:76 'CXModuleMapDescriptor':'struct CXModuleMapDescriptorImpl *'
| |-VisibilityAttr 0x5555d4b5aee8 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4bf5230 </workspace/clang-c/BuildSystem.h:142:3, col:45>
|   `-ParagraphComment 0x5555d4bf5200 <col:3, col:45>
|     |-TextComment 0x5555d4bf5150 <col:3, col:13> Text=" Dispose a "
|     |-InlineCommandComment 0x5555d4bf51a0 <col:14, col:15> Name="c" RenderMonospaced Arg[0]="CXModuleMapDescriptor"
|     `-TextComment 0x5555d4bf51c0 <col:38, col:45> Text=" object."
|-TypedefDecl 0x5555d4b5b010 </workspace/clang-c/Index.h:75:1, col:15> col:15 referenced CXIndex 'void *'
| |-PointerType 0x5555d4abe5e0 'void *'
| | `-BuiltinType 0x5555d4abdec0 'void'
| `-FullComment 0x5555d4bf5320 <line:72:3, line:73:62>
|   `-ParagraphComment 0x5555d4bf52f0 <line:72:3, line:73:62>
|     |-TextComment 0x5555d4bf52a0 <line:72:3, col:68> Text=" An "index" that consists of a set of translation units that would"
|     `-TextComment 0x5555d4bf52c0 <line:73:3, col:62> Text=" typically be linked together into an executable or library."
|-RecordDecl 0x5555d4b5b098 <line:81:9, col:16> col:16 struct CXTargetInfoImpl
|-TypedefDecl 0x5555d4b5d2f8 <col:1, col:34> col:34 referenced CXTargetInfo 'struct CXTargetInfoImpl *'
| |-PointerType 0x5555d4b5b1b0 'struct CXTargetInfoImpl *'
| | `-ElaboratedType 0x5555d4b5b140 'struct CXTargetInfoImpl' sugar
| |   `-RecordType 0x5555d4b5b120 'struct CXTargetInfoImpl'
| |     `-Record 0x5555d4b5b098 'CXTargetInfoImpl'
| `-FullComment 0x5555d4bf5410 <line:78:3, line:79:8>
|   `-ParagraphComment 0x5555d4bf53e0 <line:78:3, line:79:8>
|     |-TextComment 0x5555d4bf5390 <line:78:3, col:73> Text=" An opaque type representing target information for a given translation"
|     `-TextComment 0x5555d4bf53b0 <line:79:3, col:8> Text=" unit."
|-RecordDecl 0x5555d4b5d390 <line:86:9, col:16> col:16 struct CXTranslationUnitImpl
|-TypedefDecl 0x5555d4b5d4f0 <col:1, col:39> col:39 referenced CXTranslationUnit 'struct CXTranslationUnitImpl *'
| |-PointerType 0x5555d4b5d4a0 'struct CXTranslationUnitImpl *'
| | `-ElaboratedType 0x5555d4b5d430 'struct CXTranslationUnitImpl' sugar
| |   `-RecordType 0x5555d4b5d410 'struct CXTranslationUnitImpl'
| |     `-Record 0x5555d4b5d390 'CXTranslationUnitImpl'
| `-FullComment 0x5555d4bf54e0 <line:84:3, col:56>
|   `-ParagraphComment 0x5555d4bf54b0 <col:3, col:56>
|     `-TextComment 0x5555d4bf5480 <col:3, col:56> Text=" A single translation unit, which resides in an index."
|-TypedefDecl 0x5555d4b5d5a8 <line:92:1, col:15> col:15 referenced CXClientData 'void *'
| |-PointerType 0x5555d4abe5e0 'void *'
| | `-BuiltinType 0x5555d4abdec0 'void'
| `-FullComment 0x5555d4bf55d0 <line:89:3, line:90:37>
|   `-ParagraphComment 0x5555d4bf55a0 <line:89:3, line:90:37>
|     |-TextComment 0x5555d4bf5550 <line:89:3, col:70> Text=" Opaque pointer representing client data that will be passed through"
|     `-TextComment 0x5555d4bf5570 <line:90:3, col:37> Text=" to various callbacks and visitors."
|-RecordDecl 0x5555d4b5d628 <line:101:1, line:118:1> line:101:8 struct CXUnsavedFile definition
| |-FullComment 0x5555d4bf5740 <line:95:3, line:99:26>
| | |-ParagraphComment 0x5555d4bf5670 <line:95:3, col:71>
| | | `-TextComment 0x5555d4bf5640 <col:3, col:71> Text=" Provides the contents of a file that has not yet been saved to disk."
| | `-ParagraphComment 0x5555d4bf5710 <line:97:3, line:99:26>
| |   |-TextComment 0x5555d4bf5690 <line:97:3, col:65> Text=" Each CXUnsavedFile instance provides the name of a file on the"
| |   |-TextComment 0x5555d4bf56b0 <line:98:3, col:68> Text=" system along with the current contents of that file that have not"
| |   `-TextComment 0x5555d4bf56d0 <line:99:3, col:26> Text=" yet been saved to disk."
| |-FieldDecl 0x5555d4b5d710 <line:107:3, col:15> col:15 Filename 'const char *'
| | `-FullComment 0x5555d4bf5860 <line:103:5, line:105:53>
| |   |-ParagraphComment 0x5555d4bf57e0 <line:103:5, col:53>
| |   | `-TextComment 0x5555d4bf57b0 <col:5, col:53> Text=" The file whose contents have not yet been saved."
| |   `-ParagraphComment 0x5555d4bf5830 <line:105:5, col:53>
| |     `-TextComment 0x5555d4bf5800 <col:5, col:53> Text=" This file must already exist in the file system."
| |-FieldDecl 0x5555d4b5d7a0 <line:112:3, col:15> col:15 Contents 'const char *'
| | `-FullComment 0x5555d4bf5930 <line:110:5, col:59>
| |   `-ParagraphComment 0x5555d4bf5900 <col:5, col:59>
| |     `-TextComment 0x5555d4bf58d0 <col:5, col:59> Text=" A buffer containing the unsaved contents of this file."
| `-FieldDecl 0x5555d4b5d830 <line:117:3, col:17> col:17 Length 'unsigned long'
|   `-FullComment 0x5555d4bf5a00 <line:115:5, col:55>
|     `-ParagraphComment 0x5555d4bf59d0 <col:5, col:55>
|       `-TextComment 0x5555d4bf59a0 <col:5, col:55> Text=" The length of the unsaved contents of this buffer."
|-EnumDecl 0x5555d4b5d8a8 <line:125:1, line:144:1> line:125:6 CXAvailabilityKind
| |-FullComment 0x5555d4bf5b20 <line:121:3, line:123:38>
| | `-ParagraphComment 0x5555d4bf5af0 <line:121:3, line:123:38>
| |   |-TextComment 0x5555d4bf5a70 <line:121:3, col:69> Text=" Describes the availability of a particular entity, which indicates"
| |   |-TextComment 0x5555d4bf5a90 <line:122:3, col:74> Text=" whether the use of this entity will result in a warning or error due to"
| |   `-TextComment 0x5555d4bf5ab0 <line:123:3, col:38> Text=" it being deprecated or unavailable."
| |-EnumConstantDecl 0x5555d4b5d998 <line:129:3> col:3 CXAvailability_Available 'int'
| | `-FullComment 0x5555d4bf5bf0 <line:127:5, col:29>
| |   `-ParagraphComment 0x5555d4bf5bc0 <col:5, col:29>
| |     `-TextComment 0x5555d4bf5b90 <col:5, col:29> Text=" The entity is available."
| |-EnumConstantDecl 0x5555d4b5da18 <line:134:3> col:3 CXAvailability_Deprecated 'int'
| | `-FullComment 0x5555d4bf5ce0 <line:131:5, line:132:22>
| |   `-ParagraphComment 0x5555d4bf5cb0 <line:131:5, line:132:22>
| |     |-TextComment 0x5555d4bf5c60 <line:131:5, col:69> Text=" The entity is available, but has been deprecated (and its use is"
| |     `-TextComment 0x5555d4bf5c80 <line:132:5, col:22> Text=" not recommended)."
| |-EnumConstantDecl 0x5555d4b5da98 <line:138:3> col:3 CXAvailability_NotAvailable 'int'
| | `-FullComment 0x5555d4bf5db0 <line:136:5, col:65>
| |   `-ParagraphComment 0x5555d4bf5d80 <col:5, col:65>
| |     `-TextComment 0x5555d4bf5d50 <col:5, col:65> Text=" The entity is not available; any use of it will be an error."
| `-EnumConstantDecl 0x5555d4b5db18 <line:143:3> col:3 CXAvailability_NotAccessible 'int'
|   `-FullComment 0x5555d4bf5ea0 <line:140:5, line:141:14>
|     `-ParagraphComment 0x5555d4bf5e70 <line:140:5, line:141:14>
|       |-TextComment 0x5555d4bf5e20 <line:140:5, col:71> Text=" The entity is available, but not accessible; any use of it will be"
|       `-TextComment 0x5555d4bf5e40 <line:141:5, col:14> Text=" an error."
|-RecordDecl 0x5555d4b5db98 <line:149:9, line:167:1> line:149:16 struct CXVersion definition
| |-FullComment 0x5555d4bf5f70 <line:147:3, col:63>
| | `-ParagraphComment 0x5555d4bf5f40 <col:3, col:63>
| |   `-TextComment 0x5555d4bf5f10 <col:3, col:63> Text=" Describes a version number of the form major.minor.subminor."
| |-FieldDecl 0x5555d4b5dc80 <line:154:3, col:7> col:7 Major 'int'
| | `-FullComment 0x5555d4bf6060 <line:151:5, line:152:60>
| |   `-ParagraphComment 0x5555d4bf6030 <line:151:5, line:152:60>
| |     |-TextComment 0x5555d4bf5fe0 <line:151:5, col:69> Text=" The major version number, e.g., the '10' in '10.7.3'. A negative"
| |     `-TextComment 0x5555d4bf6000 <line:152:5, col:60> Text=" value indicates that there is no version number at all."
| |-FieldDecl 0x5555d4b5dd10 <line:160:3, col:7> col:7 Minor 'int'
| | `-FullComment 0x5555d4bf61b0 <line:156:5, line:158:18>
| |   `-ParagraphComment 0x5555d4bf6180 <line:156:5, line:158:18>
| |     |-TextComment 0x5555d4bf6100 <line:156:5, col:68> Text=" The minor version number, e.g., the '7' in '10.7.3'. This value"
| |     |-TextComment 0x5555d4bf6120 <line:157:5, col:72> Text=" will be negative if no minor version number was provided, e.g., for"
| |     `-TextComment 0x5555d4bf6140 <line:158:5, col:18> Text=" version '10'."
| `-FieldDecl 0x5555d4b5dda0 <line:166:3, col:7> col:7 Subminor 'int'
|   `-FullComment 0x5555d4bf62d0 <line:162:5, line:164:37>
|     `-ParagraphComment 0x5555d4bf62a0 <line:162:5, line:164:37>
|       |-TextComment 0x5555d4bf6220 <line:162:5, col:71> Text=" The subminor version number, e.g., the '3' in '10.7.3'. This value"
|       |-TextComment 0x5555d4bf6240 <line:163:5, col:74> Text=" will be negative if no minor or subminor version number was provided,"
|       `-TextComment 0x5555d4bf6260 <line:164:5, col:37> Text=" e.g., in version '10' or '10.7'."
|-TypedefDecl 0x5555d4b5de48 <line:149:1, line:167:3> col:3 referenced CXVersion 'struct CXVersion':'struct CXVersion'
| |-ElaboratedType 0x5555d4b5ddf0 'struct CXVersion' sugar
| | `-RecordType 0x5555d4b5dc20 'struct CXVersion'
| |   `-Record 0x5555d4b5db98 'CXVersion'
| `-FullComment 0x5555d4bf63a0 <line:147:3, col:63>
|   `-ParagraphComment 0x5555d4bf6370 <col:3, col:63>
|     `-TextComment 0x5555d4bf6340 <col:3, col:63> Text=" Describes a version number of the form major.minor.subminor."
|-EnumDecl 0x5555d4b5dee0 <line:174:1, line:224:1> line:174:6 CXCursor_ExceptionSpecificationKind
| |-FullComment 0x5555d4bf64c0 <line:170:3, line:172:76>
| | |-ParagraphComment 0x5555d4bf6440 <line:170:3, col:53>
| | | `-TextComment 0x5555d4bf6410 <col:3, col:53> Text=" Describes the exception specification of a cursor."
| | `-ParagraphComment 0x5555d4bf6490 <line:172:3, col:76>
| |   `-TextComment 0x5555d4bf6460 <col:3, col:76> Text=" A negative value indicates that the cursor is not a function declaration."
| |-EnumConstantDecl 0x5555d4b5dfc8 <line:178:3> col:3 CXCursor_ExceptionSpecificationKind_None 'int'
| | `-FullComment 0x5555d4bf6590 <line:176:5, col:47>
| |   `-ParagraphComment 0x5555d4bf6560 <col:5, col:47>
| |     `-TextComment 0x5555d4bf6530 <col:5, col:47> Text=" The cursor has no exception specification."
| |-EnumConstantDecl 0x5555d4b5e048 <line:183:3> col:3 CXCursor_ExceptionSpecificationKind_DynamicNone 'int'
| | `-FullComment 0x5555d4bf6660 <line:181:5, col:51>
| |   `-ParagraphComment 0x5555d4bf6630 <col:5, col:51>
| |     `-TextComment 0x5555d4bf6600 <col:5, col:51> Text=" The cursor has exception specification throw()"
| |-EnumConstantDecl 0x5555d4b5e0c8 <line:188:3> col:3 CXCursor_ExceptionSpecificationKind_Dynamic 'int'
| | `-FullComment 0x5555d4bf6730 <line:186:5, col:57>
| |   `-ParagraphComment 0x5555d4bf6700 <col:5, col:57>
| |     `-TextComment 0x5555d4bf66d0 <col:5, col:57> Text=" The cursor has exception specification throw(T1, T2)"
| |-EnumConstantDecl 0x5555d4b5e148 <line:193:3> col:3 CXCursor_ExceptionSpecificationKind_MSAny 'int'
| | `-FullComment 0x5555d4bf6800 <line:191:5, col:55>
| |   `-ParagraphComment 0x5555d4bf67d0 <col:5, col:55>
| |     `-TextComment 0x5555d4bf67a0 <col:5, col:55> Text=" The cursor has exception specification throw(...)."
| |-EnumConstantDecl 0x5555d4b5e1c8 <line:198:3> col:3 CXCursor_ExceptionSpecificationKind_BasicNoexcept 'int'
| | `-FullComment 0x5555d4bf68d0 <line:196:5, col:59>
| |   `-ParagraphComment 0x5555d4bf68a0 <col:5, col:59>
| |     `-TextComment 0x5555d4bf6870 <col:5, col:59> Text=" The cursor has exception specification basic noexcept."
| |-EnumConstantDecl 0x5555d4b5e248 <line:203:3> col:3 CXCursor_ExceptionSpecificationKind_ComputedNoexcept 'int'
| | `-FullComment 0x5555d4bf69a0 <line:201:5, col:62>
| |   `-ParagraphComment 0x5555d4bf6970 <col:5, col:62>
| |     `-TextComment 0x5555d4bf6940 <col:5, col:62> Text=" The cursor has exception specification computed noexcept."
| |-EnumConstantDecl 0x5555d4b628b0 <line:208:3> col:3 CXCursor_ExceptionSpecificationKind_Unevaluated 'int'
| | `-FullComment 0x5555d4bf6a70 <line:206:5, col:60>
| |   `-ParagraphComment 0x5555d4bf6a40 <col:5, col:60>
| |     `-TextComment 0x5555d4bf6a10 <col:5, col:60> Text=" The exception specification has not yet been evaluated."
| |-EnumConstantDecl 0x5555d4b62928 <line:213:3> col:3 CXCursor_ExceptionSpecificationKind_Uninstantiated 'int'
| | `-FullComment 0x5555d4bf6b40 <line:211:5, col:63>
| |   `-ParagraphComment 0x5555d4bf6b10 <col:5, col:63>
| |     `-TextComment 0x5555d4bf6ae0 <col:5, col:63> Text=" The exception specification has not yet been instantiated."
| |-EnumConstantDecl 0x5555d4b629a8 <line:218:3> col:3 CXCursor_ExceptionSpecificationKind_Unparsed 'int'
| | `-FullComment 0x5555d4bf6c10 <line:216:5, col:57>
| |   `-ParagraphComment 0x5555d4bf6be0 <col:5, col:57>
| |     `-TextComment 0x5555d4bf6bb0 <col:5, col:57> Text=" The exception specification has not been parsed yet."
| `-EnumConstantDecl 0x5555d4b62a28 <line:223:3> col:3 CXCursor_ExceptionSpecificationKind_NoThrow 'int'
|   `-FullComment 0x5555d4bf6ce0 <line:221:5, col:66>
|     `-ParagraphComment 0x5555d4bf6cb0 <col:5, col:66>
|       `-TextComment 0x5555d4bf6c80 <col:5, col:66> Text=" The cursor has a __declspec(nothrow) exception specification."
|-FunctionDecl 0x5555d4b62cd8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:267:64> line:266:24 clang_createIndex 'CXIndex (int, int)'
| |-ParmVarDecl 0x5555d4b62b48 <col:42, col:46> col:46 excludeDeclarationsFromPCH 'int'
| |-ParmVarDecl 0x5555d4b62bc8 <line:267:42, col:46> col:46 displayDiagnostics 'int'
| |-VisibilityAttr 0x5555d4b62d90 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4bf7c00 </workspace/clang-c/Index.h:227:3, line:264:74>
|   |-ParagraphComment 0x5555d4bf6d80 <line:227:3, col:60>
|   | `-TextComment 0x5555d4bf6d50 <col:3, col:60> Text=" Provides a shared context for creating translation units."
|   |-ParagraphComment 0x5555d4bf6dd0 <line:229:3, col:27>
|   | `-TextComment 0x5555d4bf6da0 <col:3, col:27> Text=" It provides two options:"
|   |-ParagraphComment 0x5555d4bf6ec0 <line:231:3, line:235:22>
|   | |-TextComment 0x5555d4bf6df0 <line:231:3, col:77> Text=" - excludeDeclarationsFromPCH: When non-zero, allows enumeration of "local""
|   | |-TextComment 0x5555d4bf6e10 <line:232:3, col:79> Text=" declarations (when loading any new translation units). A "local" declaration"
|   | |-TextComment 0x5555d4bf6e30 <line:233:3, col:78> Text=" is one that belongs in the translation unit itself and not in a precompiled"
|   | |-TextComment 0x5555d4bf6e50 <line:234:3, col:74> Text=" header that was used by the translation unit. If zero, all declarations"
|   | `-TextComment 0x5555d4bf6e70 <line:235:3, col:22> Text=" will be enumerated."
|   |-ParagraphComment 0x5555d4bf6f10 <line:237:3, col:22>
|   | `-TextComment 0x5555d4bf6ee0 <col:3, col:22> Text=" Here is an example:"
|   |-ParagraphComment 0x5555d4bf6f60 <line:239:3>
|   | `-TextComment 0x5555d4bf6f30 <col:3> Text=" "
|   |-VerbatimBlockComment 0x5555d4bf6f80 <col:4, col:9> Name="code" CloseName="endcode"
|   | |-VerbatimBlockLineComment 0x5555d4bf6fd0 <line:240:3, col:54> Text="   // excludeDeclsFromPCH = 1, displayDiagnostics=1"
|   | |-VerbatimBlockLineComment 0x5555d4bf6ff0 <line:241:3, col:36> Text="   Idx = clang_createIndex(1, 1);"
|   | |-VerbatimBlockLineComment 0x5555d4bf7010 <line:242:3> Text=""
|   | |-VerbatimBlockLineComment 0x5555d4bf7030 <line:243:3, col:63> Text="   // IndexTest.pch was produced with the following command:"
|   | |-VerbatimBlockLineComment 0x5555d4bf7050 <line:244:3, col:60> Text="   // "clang -x c IndexTest.h -emit-ast -o IndexTest.pch""
|   | |-VerbatimBlockLineComment 0x5555d4bf7070 <line:245:3, col:61> Text="   TU = clang_createTranslationUnit(Idx, "IndexTest.pch");"
|   | |-VerbatimBlockLineComment 0x5555d4bf7090 <line:246:3> Text=""
|   | |-VerbatimBlockLineComment 0x5555d4bf78e0 <line:247:3, col:60> Text="   // This will load all the symbols from 'IndexTest.pch'"
|   | |-VerbatimBlockLineComment 0x5555d4bf7900 <line:248:3, col:61> Text="   clang_visitChildren(clang_getTranslationUnitCursor(TU),"
|   | |-VerbatimBlockLineComment 0x5555d4bf7920 <line:249:3, col:53> Text="                       TranslationUnitVisitor, 0);"
|   | |-VerbatimBlockLineComment 0x5555d4bf7940 <line:250:3, col:39> Text="   clang_disposeTranslationUnit(TU);"
|   | |-VerbatimBlockLineComment 0x5555d4bf7960 <line:251:3> Text=""
|   | |-VerbatimBlockLineComment 0x5555d4bf7980 <line:252:3, col:77> Text="   // This will load all the symbols from 'IndexTest.c', excluding symbols"
|   | |-VerbatimBlockLineComment 0x5555d4bf79a0 <line:253:3, col:30> Text="   // from 'IndexTest.pch'."
|   | |-VerbatimBlockLineComment 0x5555d4bf79c0 <line:254:3, col:65> Text="   char *args[] = { "-Xclang", "-include-pch=IndexTest.pch" };"
|   | |-VerbatimBlockLineComment 0x5555d4bf79e0 <line:255:3, col:81> Text="   TU = clang_createTranslationUnitFromSourceFile(Idx, "IndexTest.c", 2, args,"
|   | |-VerbatimBlockLineComment 0x5555d4bf7a00 <line:256:3, col:59> Text="                                                  0, 0);"
|   | |-VerbatimBlockLineComment 0x5555d4bf7a20 <line:257:3, col:61> Text="   clang_visitChildren(clang_getTranslationUnitCursor(TU),"
|   | |-VerbatimBlockLineComment 0x5555d4bf7a40 <line:258:3, col:53> Text="                       TranslationUnitVisitor, 0);"
|   | `-VerbatimBlockLineComment 0x5555d4bf7a60 <line:259:3, col:39> Text="   clang_disposeTranslationUnit(TU);"
|   `-ParagraphComment 0x5555d4bf7ba0 <line:262:3, line:264:74>
|     |-TextComment 0x5555d4bf7b20 <line:262:3, col:79> Text=" This process of creating the 'pch', loading it separately, and using it (via"
|     |-TextComment 0x5555d4bf7b40 <line:263:3, col:75> Text=" -include-pch) allows 'excludeDeclsFromPCH' to remove redundant callbacks"
|     `-TextComment 0x5555d4bf7b60 <line:264:3, col:74> Text=" (which gives the indexer the same performance benefit as the compiler)."
|-FunctionDecl 0x5555d4b62f08 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:275:53> col:21 clang_disposeIndex 'void (CXIndex)'
| |-ParmVarDecl 0x5555d4b62e48 <col:40, col:48> col:48 index 'CXIndex':'void *'
| |-VisibilityAttr 0x5555d4b62fb8 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4bf7d40 </workspace/clang-c/Index.h:270:3, line:273:41>
|   |-ParagraphComment 0x5555d4bf7ca0 <line:270:3, col:27>
|   | `-TextComment 0x5555d4bf7c70 <col:3, col:27> Text=" Destroy the given index."
|   `-ParagraphComment 0x5555d4bf7d10 <line:272:3, line:273:41>
|     |-TextComment 0x5555d4bf7cc0 <line:272:3, col:77> Text=" The index must not be destroyed until all of the translation units created"
|     `-TextComment 0x5555d4bf7ce0 <line:273:3, col:41> Text=" within that index have been destroyed."
|-EnumDecl 0x5555d4b63038 <line:277:9, line:309:1> line:277:9
| |-EnumConstantDecl 0x5555d4b63140 <line:281:3, col:22> col:3 CXGlobalOpt_None 'int'
| | |-ConstantExpr 0x5555d4b63120 <col:22> 'int'
| | | |-value: Int 0
| | | `-IntegerLiteral 0x5555d4b63100 <col:22> 'int' 0
| | `-FullComment 0x5555d4bf7e10 <line:279:5, col:65>
| |   `-ParagraphComment 0x5555d4bf7de0 <col:5, col:65>
| |     `-TextComment 0x5555d4bf7db0 <col:5, col:65> Text=" Used to indicate that no special CXIndex options are needed."
| |-EnumConstantDecl 0x5555d4b631f8 <line:290:3, col:53> col:3 referenced CXGlobalOpt_ThreadBackgroundPriorityForIndexing 'int'
| | |-ConstantExpr 0x5555d4b631d8 <col:53> 'int'
| | | |-value: Int 1
| | | `-IntegerLiteral 0x5555d4b631b8 <col:53> 'int' 1
| | `-FullComment 0x5555d4bf7f70 <line:284:5, line:288:61>
| |   |-ParagraphComment 0x5555d4bf7ed0 <line:284:5, line:285:45>
| |   | |-TextComment 0x5555d4bf7e80 <line:284:5, col:69> Text=" Used to indicate that threads that libclang creates for indexing"
| |   | `-TextComment 0x5555d4bf7ea0 <line:285:5, col:45> Text=" purposes should use background priority."
| |   `-ParagraphComment 0x5555d4bf7f40 <line:287:5, line:288:61>
| |     |-TextComment 0x5555d4bf7ef0 <line:287:5, col:65> Text=" Affects #clang_indexSourceFile, #clang_indexTranslationUnit,"
| |     `-TextComment 0x5555d4bf7f10 <line:288:5, col:61> Text=" #clang_parseTranslationUnit, #clang_saveTranslationUnit."
| |-EnumConstantDecl 0x5555d4b632b8 <line:299:3, col:52> col:3 referenced CXGlobalOpt_ThreadBackgroundPriorityForEditing 'int'
| | |-ConstantExpr 0x5555d4b63298 <col:52> 'int'
| | | |-value: Int 2
| | | `-IntegerLiteral 0x5555d4b63278 <col:52> 'int' 2
| | `-FullComment 0x5555d4bf80d0 <line:293:5, line:297:26>
| |   |-ParagraphComment 0x5555d4bf8030 <line:293:5, line:294:45>
| |   | |-TextComment 0x5555d4bf7fe0 <line:293:5, col:68> Text=" Used to indicate that threads that libclang creates for editing"
| |   | `-TextComment 0x5555d4bf8000 <line:294:5, col:45> Text=" purposes should use background priority."
| |   `-ParagraphComment 0x5555d4bf80a0 <line:296:5, line:297:26>
| |     |-TextComment 0x5555d4bf8050 <line:296:5, col:66> Text=" Affects #clang_reparseTranslationUnit, #clang_codeCompleteAt,"
| |     `-TextComment 0x5555d4bf8070 <line:297:5, col:26> Text=" #clang_annotateTokens"
| `-EnumConstantDecl 0x5555d4b633b8 <line:305:3, line:307:7> line:305:3 CXGlobalOpt_ThreadBackgroundPriorityForAll 'int'
|   |-ConstantExpr 0x5555d4b63398 <line:306:7, line:307:7> 'int'
|   | |-value: Int 3
|   | `-BinaryOperator 0x5555d4b63378 <line:306:7, line:307:7> 'int' '|'
|   |   |-DeclRefExpr 0x5555d4b63338 <line:306:7> 'int' EnumConstant 0x5555d4b631f8 'CXGlobalOpt_ThreadBackgroundPriorityForIndexing' 'int'
|   |   `-DeclRefExpr 0x5555d4b63358 <line:307:7> 'int' EnumConstant 0x5555d4b632b8 'CXGlobalOpt_ThreadBackgroundPriorityForEditing' 'int'
|   `-FullComment 0x5555d4bf81c0 <line:302:5, line:303:25>
|     `-ParagraphComment 0x5555d4bf8190 <line:302:5, line:303:25>
|       |-TextComment 0x5555d4bf8140 <line:302:5, col:71> Text=" Used to indicate that all threads that libclang creates should use"
|       `-TextComment 0x5555d4bf8160 <line:303:5, col:25> Text=" background priority."
|-TypedefDecl 0x5555d4b63468 <line:277:1, line:309:3> col:3 CXGlobalOptFlags 'enum CXGlobalOptFlags':'CXGlobalOptFlags'
| `-ElaboratedType 0x5555d4b63410 'enum CXGlobalOptFlags' sugar
|   `-EnumType 0x5555d4b630e0 'CXGlobalOptFlags'
|     `-Enum 0x5555d4b63038 ''
|-FunctionDecl 0x5555d4b636c8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:324:77> col:21 clang_CXIndex_setGlobalOptions 'void (CXIndex, unsigned int)'
| |-ParmVarDecl 0x5555d4b63530 <col:52> col:59 'CXIndex':'void *'
| |-ParmVarDecl 0x5555d4b635b0 <col:61, col:70> col:70 options 'unsigned int'
| |-VisibilityAttr 0x5555d4b63780 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4bf8510 </workspace/clang-c/Index.h:312:3, line:322:78>
|   |-ParagraphComment 0x5555d4bf8260 <line:312:3, col:50>
|   | `-TextComment 0x5555d4bf8230 <col:3, col:50> Text=" Sets general options associated with a CXIndex."
|   |-ParagraphComment 0x5555d4bf82d0 <line:314:3, line:315:3>
|   | |-TextComment 0x5555d4bf8280 <line:314:3, col:15> Text=" For example:"
|   | `-TextComment 0x5555d4bf82a0 <line:315:3> Text=" "
|   |-VerbatimBlockComment 0x5555d4bf82f0 <col:4, col:9> Name="code" CloseName="endcode"
|   | |-VerbatimBlockLineComment 0x5555d4bf8340 <line:316:3, col:22> Text=" CXIndex idx = ...;"
|   | |-VerbatimBlockLineComment 0x5555d4bf8360 <line:317:3, col:39> Text=" clang_CXIndex_setGlobalOptions(idx,"
|   | |-VerbatimBlockLineComment 0x5555d4bf8380 <line:318:3, col:45> Text="     clang_CXIndex_getGlobalOptions(idx) |"
|   | `-VerbatimBlockLineComment 0x5555d4bf83a0 <line:319:3, col:57> Text="     CXGlobalOpt_ThreadBackgroundPriorityForIndexing);"
|   |-ParagraphComment 0x5555d4bf8410 <line:322:3>
|   | `-TextComment 0x5555d4bf83e0 <col:3> Text=" "
|   `-ParamCommandComment 0x5555d4bf8430 <col:4, col:78> [in] implicitly Param="options" ParamIndex=1
|     `-ParagraphComment 0x5555d4bf84c0 <col:18, col:78>
|       `-TextComment 0x5555d4bf8490 <col:18, col:78> Text=" A bitmask of options, a bitwise OR of CXGlobalOpt_XXX flags."
|-FunctionDecl 0x5555d4b64420 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:332:63> col:25 clang_CXIndex_getGlobalOptions 'unsigned int (CXIndex)'
| |-ParmVarDecl 0x5555d4b63838 <col:56> col:63 'CXIndex':'void *'
| |-VisibilityAttr 0x5555d4b644d0 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4bf86e0 </workspace/clang-c/Index.h:327:3, line:330:48>
|   |-ParagraphComment 0x5555d4bf85b0 <line:327:3, col:54>
|   | `-TextComment 0x5555d4bf8580 <col:3, col:54> Text=" Gets the general options associated with a CXIndex."
|   |-ParagraphComment 0x5555d4bf8600 <line:329:3>
|   | `-TextComment 0x5555d4bf85d0 <col:3> Text=" "
|   `-BlockCommandComment 0x5555d4bf8620 <col:4, line:330:48> Name="returns"
|     `-ParagraphComment 0x5555d4bf86a0 <line:329:12, line:330:48>
|       |-TextComment 0x5555d4bf8650 <line:329:12, col:76> Text=" A bitmask of options, a bitwise OR of CXGlobalOpt_XXX flags that"
|       `-TextComment 0x5555d4bf8670 <line:330:3, col:48> Text=" are associated with the given CXIndex object."
|-FunctionDecl 0x5555d4b64718 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:342:72> col:1 clang_CXIndex_setInvocationEmissionPathOption 'void (CXIndex, const char *)'
| |-ParmVarDecl 0x5555d4b64588 <col:47> col:54 'CXIndex':'void *'
| |-ParmVarDecl 0x5555d4b64608 <col:56, col:68> col:68 Path 'const char *'
| |-VisibilityAttr 0x5555d4b647d0 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4bf8850 </workspace/clang-c/Index.h:335:3, line:339:40>
|   |-ParagraphComment 0x5555d4bf8780 <line:335:3, col:57>
|   | `-TextComment 0x5555d4bf8750 <col:3, col:57> Text=" Sets the invocation emission path option in a CXIndex."
|   `-ParagraphComment 0x5555d4bf8820 <line:337:3, line:339:40>
|     |-TextComment 0x5555d4bf87a0 <line:337:3, col:71> Text=" The invocation emission path specifies a path which will contain log"
|     |-TextComment 0x5555d4bf87c0 <line:338:3, col:78> Text=" files for certain libclang invocations. A null value (default) implies that"
|     `-TextComment 0x5555d4bf87e0 <line:339:3, col:40> Text=" libclang invocations are not logged.."
|-TypedefDecl 0x5555d4b648a0 <line:353:1, col:15> col:15 referenced CXFile 'void *'
| |-PointerType 0x5555d4abe5e0 'void *'
| | `-BuiltinType 0x5555d4abdec0 'void'
| `-FullComment 0x5555d4bf8930 <line:351:3, col:63>
|   `-ParagraphComment 0x5555d4bf8900 <col:3, col:63>
|     `-TextComment 0x5555d4bf88c0 <col:3, col:63> Text=" A particular source file that is part of a translation unit."
|-FunctionDecl 0x5555d4b64ab8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:358:55> col:25 clang_getFileName 'CXString (CXFile)'
| |-ParmVarDecl 0x5555d4b649c0 <col:43, col:50> col:50 SFile 'CXFile':'void *'
| |-VisibilityAttr 0x5555d4b64b68 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4bf8a00 </workspace/clang-c/Index.h:356:3, col:62>
|   `-ParagraphComment 0x5555d4bf89d0 <col:3, col:62>
|     `-TextComment 0x5555d4bf89a0 <col:3, col:62> Text=" Retrieve the complete file and path name of the given file."
|-FunctionDecl 0x5555d4b64d08 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:363:53> col:23 clang_getFileTime 'time_t (CXFile)'
| |-ParmVarDecl 0x5555d4b64c18 <col:41, col:48> col:48 SFile 'CXFile':'void *'
| |-VisibilityAttr 0x5555d4b64db8 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4bf8ad0 </workspace/clang-c/Index.h:361:3, col:57>
|   `-ParagraphComment 0x5555d4bf8aa0 <col:3, col:57>
|     `-TextComment 0x5555d4bf8a70 <col:3, col:57> Text=" Retrieve the last modification time of the given file."
|-RecordDecl 0x5555d4b64e38 <line:369:9, line:371:1> line:369:9 struct definition
| |-FullComment 0x5555d4bf8bc0 <line:366:3, line:367:30>
| | `-ParagraphComment 0x5555d4bf8b90 <line:366:3, line:367:30>
| |   |-TextComment 0x5555d4bf8b40 <line:366:3, col:73> Text=" Uniquely identifies a CXFile, that refers to the same underlying file,"
| |   `-TextComment 0x5555d4bf8b60 <line:367:3, col:30> Text=" across an indexing session."
| `-FieldDecl 0x5555d4b64f80 <line:370:3, col:28> col:22 data 'unsigned long long[3]'
|-TypedefDecl 0x5555d4b65028 <line:369:1, line:371:3> col:3 referenced CXFileUniqueID 'struct CXFileUniqueID':'CXFileUniqueID'
| |-ElaboratedType 0x5555d4b64fd0 'struct CXFileUniqueID' sugar
| | `-RecordType 0x5555d4b64ec0 'CXFileUniqueID'
| |   `-Record 0x5555d4b64e38 ''
| `-FullComment 0x5555d4bf8cb0 <line:366:3, line:367:30>
|   `-ParagraphComment 0x5555d4bf8c80 <line:366:3, line:367:30>
|     |-TextComment 0x5555d4bf8c30 <line:366:3, col:73> Text=" Uniquely identifies a CXFile, that refers to the same underlying file,"
|     `-TextComment 0x5555d4bf8c50 <line:367:3, col:30> Text=" across an indexing session."
|-FunctionDecl 0x5555d4b65560 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:381:76> col:20 clang_getFileUniqueID 'int (CXFile, CXFileUniqueID *)'
| |-ParmVarDecl 0x5555d4b650f0 <col:42, col:49> col:49 file 'CXFile':'void *'
| |-ParmVarDecl 0x5555d4b65230 <col:55, col:71> col:71 outID 'CXFileUniqueID *'
| |-VisibilityAttr 0x5555d4b65618 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4bf9070 </workspace/clang-c/Index.h:374:3, line:379:23>
|   |-ParagraphComment 0x5555d4bf8d90 <line:374:3, col:42>
|   | |-TextComment 0x5555d4bf8d20 <col:3, col:40> Text=" Retrieve the unique ID for the given "
|   | `-InlineCommandComment 0x5555d4bf8d60 <col:41, col:42> Name="c" RenderMonospaced Arg[0]="file."
|   |-ParagraphComment 0x5555d4bf8de0 <line:376:3>
|   | `-TextComment 0x5555d4bf8db0 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4bf8e00 <col:4, line:377:3> [in] implicitly Param="file" ParamIndex=0
|   | `-ParagraphComment 0x5555d4bf8eb0 <line:376:15, line:377:3>
|   |   |-TextComment 0x5555d4bf8e60 <line:376:15, col:42> Text=" the file to get the ID for."
|   |   `-TextComment 0x5555d4bf8e80 <line:377:3> Text=" "
|   |-ParamCommandComment 0x5555d4bf8ed0 <col:4, line:378:3> [in] implicitly Param="outID" ParamIndex=1
|   | `-ParagraphComment 0x5555d4bf8f80 <line:377:16, line:378:3>
|   |   |-TextComment 0x5555d4bf8f30 <line:377:16, col:51> Text=" stores the returned CXFileUniqueID."
|   |   `-TextComment 0x5555d4bf8f50 <line:378:3> Text=" "
|   `-BlockCommandComment 0x5555d4bf8fa0 <col:4, line:379:23> Name="returns"
|     `-ParagraphComment 0x5555d4bf9020 <line:378:12, line:379:23>
|       |-TextComment 0x5555d4bf8fd0 <line:378:12, col:75> Text=" If there was a failure getting the unique ID, returns non-zero,"
|       `-TextComment 0x5555d4bf8ff0 <line:379:3, col:23> Text=" otherwise returns 0."
|-FunctionDecl 0x5555d4b658c0 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:389:71> line:388:25 clang_isFileMultipleIncludeGuarded 'unsigned int (CXTranslationUnit, CXFile)'
| |-ParmVarDecl 0x5555d4b65730 <col:60, col:78> col:78 tu 'CXTranslationUnit':'struct CXTranslationUnitImpl *'
| |-ParmVarDecl 0x5555d4b657a8 <line:389:60, col:67> col:67 file 'CXFile':'void *'
| |-VisibilityAttr 0x5555d4b65978 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4bf92d0 </workspace/clang-c/Index.h:384:3, line:386:64>
|   `-ParagraphComment 0x5555d4bf92a0 <line:384:3, line:386:64>
|     |-TextComment 0x5555d4bf90e0 <line:384:3, col:56> Text=" Determine whether the given header is guarded against"
|     |-TextComment 0x5555d4bf9100 <line:385:3, col:52> Text=" multiple inclusions, either with the conventional"
|     |-TextComment 0x5555d4bf9120 <line:386:3> Text=" "
|     |-TextComment 0x5555d4bf9140 <col:4, col:5> Text="#"
|     |-TextComment 0x5555d4bf9160 <col:6, col:12> Text="ifndef/"
|     |-TextComment 0x5555d4bf9180 <col:13, col:14> Text="#"
|     |-TextComment 0x5555d4bf91a0 <col:15, col:21> Text="define/"
|     |-TextComment 0x5555d4bf91c0 <col:22, col:23> Text="#"
|     |-TextComment 0x5555d4bf91e0 <col:24, col:50> Text="endif macro guards or with "
|     |-TextComment 0x5555d4bf9200 <col:51, col:52> Text="#"
|     `-TextComment 0x5555d4bf9220 <col:53, col:64> Text="pragma once."
|-FunctionDecl 0x5555d4b65bb8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:402:58> line:401:23 clang_getFile 'CXFile (CXTranslationUnit, const char *)'
| |-ParmVarDecl 0x5555d4b65a28 <col:37, col:55> col:55 tu 'CXTranslationUnit':'struct CXTranslationUnitImpl *'
| |-ParmVarDecl 0x5555d4b65aa8 <line:402:37, col:49> col:49 file_name 'const char *'
| |-VisibilityAttr 0x5555d4b65c70 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4bf9710 </workspace/clang-c/Index.h:392:3, line:399:77>
|   |-ParagraphComment 0x5555d4bf9370 <line:392:3, col:60>
|   | `-TextComment 0x5555d4bf9340 <col:3, col:60> Text=" Retrieve a file handle within the given translation unit."
|   |-ParagraphComment 0x5555d4bf93c0 <line:394:3>
|   | `-TextComment 0x5555d4bf9390 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4bf93e0 <col:4, col:33> [in] implicitly Param="tu" ParamIndex=0
|   | `-ParagraphComment 0x5555d4bf9470 <col:13, col:33>
|   |   `-TextComment 0x5555d4bf9440 <col:13, col:33> Text=" the translation unit"
|   |-ParagraphComment 0x5555d4bf94c0 <line:396:3>
|   | `-TextComment 0x5555d4bf9490 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4bf94e0 <col:4, col:41> [in] implicitly Param="file_name" ParamIndex=1
|   | `-ParagraphComment 0x5555d4bf9570 <col:20, col:41>
|   |   `-TextComment 0x5555d4bf9540 <col:20, col:41> Text=" the name of the file."
|   |-ParagraphComment 0x5555d4bf95c0 <line:398:3>
|   | `-TextComment 0x5555d4bf9590 <col:3> Text=" "
|   `-BlockCommandComment 0x5555d4bf95e0 <col:4, line:399:77> Name="returns"
|     `-ParagraphComment 0x5555d4bf96b0 <line:398:12, line:399:77>
|       |-TextComment 0x5555d4bf9610 <line:398:12, col:71> Text=" the file handle for the named file in the translation unit "
|       |-InlineCommandComment 0x5555d4bf9650 <col:72, col:73> Name="p" RenderMonospaced Arg[0]="tu,"
|       `-TextComment 0x5555d4bf9670 <line:399:3, col:77> Text=" or a NULL file handle if the file was not a part of this translation unit."
|-FunctionDecl 0x5555d4b65fb0 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:417:75> line:416:28 clang_getFileContents 'const char *(CXTranslationUnit, CXFile, size_t *)'
| |-ParmVarDecl 0x5555d4b65d28 <col:50, col:68> col:68 tu 'CXTranslationUnit':'struct CXTranslationUnitImpl *'
| |-ParmVarDecl 0x5555d4b65da0 <line:417:50, col:57> col:57 file 'CXFile':'void *'
| |-ParmVarDecl 0x5555d4b65e80 <col:63, col:71> col:71 size 'size_t *'
| |-VisibilityAttr 0x5555d4b66070 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4bf9c90 </workspace/clang-c/Index.h:405:3, line:414:58>
|   |-ParagraphComment 0x5555d4bf97b0 <line:405:3, col:54>
|   | `-TextComment 0x5555d4bf9780 <col:3, col:54> Text=" Retrieve the buffer associated with the given file."
|   |-ParagraphComment 0x5555d4bf9800 <line:407:3>
|   | `-TextComment 0x5555d4bf97d0 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4bf9820 <col:4, col:33> [in] implicitly Param="tu" ParamIndex=0
|   | `-ParagraphComment 0x5555d4bf98b0 <col:13, col:33>
|   |   `-TextComment 0x5555d4bf9880 <col:13, col:33> Text=" the translation unit"
|   |-ParagraphComment 0x5555d4bf9910 <line:409:3>
|   | `-TextComment 0x5555d4bf98d0 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4bf9930 <col:4, col:57> [in] implicitly Param="file" ParamIndex=1
|   | `-ParagraphComment 0x5555d4bf99c0 <col:15, col:57>
|   |   `-TextComment 0x5555d4bf9990 <col:15, col:57> Text=" the file for which to retrieve the buffer."
|   |-ParagraphComment 0x5555d4bf9a10 <line:411:3>
|   | `-TextComment 0x5555d4bf99e0 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4bf9a30 <col:4, col:72> [in] implicitly Param="size" ParamIndex=2
|   | `-ParagraphComment 0x5555d4bf9ac0 <col:15, col:72>
|   |   `-TextComment 0x5555d4bf9a90 <col:15, col:72> Text=" [out] if non-NULL, will be set to the size of the buffer."
|   |-ParagraphComment 0x5555d4bf9b10 <line:413:3>
|   | `-TextComment 0x5555d4bf9ae0 <col:3> Text=" "
|   `-BlockCommandComment 0x5555d4bf9b30 <col:4, line:414:58> Name="returns"
|     `-ParagraphComment 0x5555d4bf9c20 <line:413:12, line:414:58>
|       |-TextComment 0x5555d4bf9b60 <line:413:12, col:72> Text=" a pointer to the buffer in memory that holds the contents of"
|       |-TextComment 0x5555d4bf9b80 <line:414:3> Text=" "
|       |-InlineCommandComment 0x5555d4bf9bc0 <col:4, col:5> Name="p" RenderMonospaced Arg[0]="file,"
|       `-TextComment 0x5555d4bf9be0 <col:12, col:58> Text=" or a NULL pointer when the file is not loaded."
|-FunctionDecl 0x5555d4b662c0 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:423:65> col:20 clang_File_isEqual 'int (CXFile, CXFile)'
| |-ParmVarDecl 0x5555d4b66128 <col:39, col:46> col:46 file1 'CXFile':'void *'
| |-ParmVarDecl 0x5555d4b661a0 <col:53, col:60> col:60 file2 'CXFile':'void *'
| |-VisibilityAttr 0x5555d4b66378 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4bf9e60 </workspace/clang-c/Index.h:420:3, line:421:25>
|   `-ParagraphComment 0x5555d4bf9e30 <line:420:3, line:421:25>
|     |-TextComment 0x5555d4bf9d00 <line:420:3, col:27> Text=" Returns non-zero if the "
|     |-InlineCommandComment 0x5555d4bf9d40 <col:28, col:29> Name="c" RenderMonospaced Arg[0]="file1"
|     |-TextComment 0x5555d4bf9d60 <col:36, col:40> Text=" and "
|     |-InlineCommandComment 0x5555d4bf9da0 <col:41, col:42> Name="c" RenderMonospaced Arg[0]="file2"
|     |-TextComment 0x5555d4bf9dc0 <col:49, col:72> Text=" point to the same file,"
|     `-TextComment 0x5555d4bf9de0 <line:421:3, col:25> Text=" or they are both NULL."
|-FunctionDecl 0x5555d4b664b8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:430:66> col:25 clang_File_tryGetRealPathName 'CXString (CXFile)'
| |-ParmVarDecl 0x5555d4b66428 <col:55, col:62> col:62 file 'CXFile':'void *'
| |-VisibilityAttr 0x5555d4b666b8 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4bfa040 </workspace/clang-c/Index.h:426:3, line:428:76>
|   |-ParagraphComment 0x5555d4bf9f40 <line:426:3, col:35>
|   | |-TextComment 0x5555d4bf9ed0 <col:3, col:33> Text=" Returns the real path name of "
|   | `-InlineCommandComment 0x5555d4bf9f10 <col:34, col:35> Name="c" RenderMonospaced Arg[0]="file."
|   `-ParagraphComment 0x5555d4bfa010 <line:428:3, col:76>
|     |-TextComment 0x5555d4bf9f60 <col:3, col:40> Text=" An empty string may be returned. Use "
|     |-InlineCommandComment 0x5555d4bf9fb0 <col:41, col:42> Name="c" RenderMonospaced Arg[0]="clang_getFileName()"
|     `-TextComment 0x5555d4bf9fd0 <col:63, col:76> Text=" in that case."
|-RecordDecl 0x5555d4b66798 <line:456:9, line:459:1> line:456:9 struct definition
| |-FullComment 0x5555d4bfa1a0 <line:450:3, line:454:67>
| | |-ParagraphComment 0x5555d4bfa100 <line:450:3, line:451:8>
| | | |-TextComment 0x5555d4bfa0b0 <line:450:3, col:61> Text=" Identifies a specific source location within a translation"
| | | `-TextComment 0x5555d4bfa0d0 <line:451:3, col:8> Text=" unit."
| | `-ParagraphComment 0x5555d4bfa170 <line:453:3, line:454:67>
| |   |-TextComment 0x5555d4bfa120 <line:453:3, col:66> Text=" Use clang_getExpansionLocation() or clang_getSpellingLocation()"
| |   `-TextComment 0x5555d4bfa140 <line:454:3, col:67> Text=" to map a source location to a particular file, line, and column."
| |-FieldDecl 0x5555d4b668e0 <line:457:3, col:25> col:15 ptr_data 'const void *[2]'
| `-FieldDecl 0x5555d4b66948 <line:458:3, col:12> col:12 int_data 'unsigned int'
|-TypedefDecl 0x5555d4b669f8 <line:456:1, line:459:3> col:3 referenced CXSourceLocation 'struct CXSourceLocation':'CXSourceLocation'
| |-ElaboratedType 0x5555d4b669a0 'struct CXSourceLocation' sugar
| | `-RecordType 0x5555d4b66820 'CXSourceLocation'
| |   `-Record 0x5555d4b66798 ''
| `-FullComment 0x5555d4bfa300 <line:450:3, line:454:67>
|   |-ParagraphComment 0x5555d4bfa260 <line:450:3, line:451:8>
|   | |-TextComment 0x5555d4bfa210 <line:450:3, col:61> Text=" Identifies a specific source location within a translation"
|   | `-TextComment 0x5555d4bfa230 <line:451:3, col:8> Text=" unit."
|   `-ParagraphComment 0x5555d4bfa2d0 <line:453:3, line:454:67>
|     |-TextComment 0x5555d4bfa280 <line:453:3, col:66> Text=" Use clang_getExpansionLocation() or clang_getSpellingLocation()"
|     `-TextComment 0x5555d4bfa2a0 <line:454:3, col:67> Text=" to map a source location to a particular file, line, and column."
|-RecordDecl 0x5555d4b66a90 <line:467:9, line:471:1> line:467:9 struct definition
| |-FullComment 0x5555d4bfa440 <line:462:3, line:465:64>
| | |-ParagraphComment 0x5555d4bfa3a0 <line:462:3, col:61>
| | | `-TextComment 0x5555d4bfa370 <col:3, col:61> Text=" Identifies a half-open character range in the source code."
| | `-ParagraphComment 0x5555d4bfa410 <line:464:3, line:465:64>
| |   |-TextComment 0x5555d4bfa3c0 <line:464:3, col:68> Text=" Use clang_getRangeStart() and clang_getRangeEnd() to retrieve the"
| |   `-TextComment 0x5555d4bfa3e0 <line:465:3, col:64> Text=" starting and end locations from a source range, respectively."
| |-FieldDecl 0x5555d4b66b98 <line:468:3, col:25> col:15 ptr_data 'const void *[2]'
| |-FieldDecl 0x5555d4b66c00 <line:469:3, col:12> col:12 begin_int_data 'unsigned int'
| `-FieldDecl 0x5555d4b66c68 <line:470:3, col:12> col:12 end_int_data 'unsigned int'
|-TypedefDecl 0x5555d4b66d18 <line:467:1, line:471:3> col:3 referenced CXSourceRange 'struct CXSourceRange':'CXSourceRange'
| |-ElaboratedType 0x5555d4b66cc0 'struct CXSourceRange' sugar
| | `-RecordType 0x5555d4b66b10 'CXSourceRange'
| |   `-Record 0x5555d4b66a90 ''
| `-FullComment 0x5555d4bfa580 <line:462:3, line:465:64>
|   |-ParagraphComment 0x5555d4bfa4e0 <line:462:3, col:61>
|   | `-TextComment 0x5555d4bfa4b0 <col:3, col:61> Text=" Identifies a half-open character range in the source code."
|   `-ParagraphComment 0x5555d4bfa550 <line:464:3, line:465:64>
|     |-TextComment 0x5555d4bfa500 <line:464:3, col:68> Text=" Use clang_getRangeStart() and clang_getRangeEnd() to retrieve the"
|     `-TextComment 0x5555d4bfa520 <line:465:3, col:64> Text=" starting and end locations from a source range, respectively."
|-FunctionDecl 0x5555d4b66f28 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:476:59> col:33 clang_getNullLocation 'CXSourceLocation (void)'
| |-VisibilityAttr 0x5555d4b66fd0 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4bfa650 </workspace/clang-c/Index.h:474:3, col:45>
|   `-ParagraphComment 0x5555d4bfa620 <col:3, col:45>
|     `-TextComment 0x5555d4bfa5f0 <col:3, col:45> Text=" Retrieve a NULL (invalid) source location."
|-FunctionDecl 0x5555d4b67220 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:487:67> line:486:25 clang_equalLocations 'unsigned int (CXSourceLocation, CXSourceLocation)'
| |-ParmVarDecl 0x5555d4b67088 <col:46, col:63> col:63 loc1 'CXSourceLocation':'CXSourceLocation'
| |-ParmVarDecl 0x5555d4b67100 <line:487:46, col:63> col:63 loc2 'CXSourceLocation':'CXSourceLocation'
| |-VisibilityAttr 0x5555d4b672d8 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4bfa870 </workspace/clang-c/Index.h:479:3, line:484:40>
|   |-ParagraphComment 0x5555d4bfa740 <line:479:3, line:481:8>
|   | |-TextComment 0x5555d4bfa6c0 <line:479:3, col:64> Text=" Determine whether two source locations, which must refer into"
|   | |-TextComment 0x5555d4bfa6e0 <line:480:3, col:75> Text=" the same translation unit, refer to exactly the same point in the source"
|   | `-TextComment 0x5555d4bfa700 <line:481:3, col:8> Text=" code."
|   |-ParagraphComment 0x5555d4bfa790 <line:483:3>
|   | `-TextComment 0x5555d4bfa760 <col:3> Text=" "
|   `-BlockCommandComment 0x5555d4bfa7b0 <col:4, line:484:40> Name="returns"
|     `-ParagraphComment 0x5555d4bfa830 <line:483:12, line:484:40>
|       |-TextComment 0x5555d4bfa7e0 <line:483:12, col:77> Text=" non-zero if the source locations refer to the same location, zero"
|       `-TextComment 0x5555d4bfa800 <line:484:3, col:40> Text=" if they refer to different locations."
|-FunctionDecl 0x5555d4b69820 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:495:66> line:493:33 clang_getLocation 'CXSourceLocation (CXTranslationUnit, CXFile, unsigned int, unsigned int)'
| |-ParmVarDecl 0x5555d4b67388 <col:51, col:69> col:69 tu 'CXTranslationUnit':'struct CXTranslationUnitImpl *'
| |-ParmVarDecl 0x5555d4b67400 <line:494:51, col:58> col:58 file 'CXFile':'void *'
| |-ParmVarDecl 0x5555d4b67480 <col:64, col:73> col:73 line 'unsigned int'
| |-ParmVarDecl 0x5555d4b67500 <line:495:51, col:60> col:60 column 'unsigned int'
| |-VisibilityAttr 0x5555d4b698e8 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4bfa970 </workspace/clang-c/Index.h:490:3, line:491:36>
|   `-ParagraphComment 0x5555d4bfa940 <line:490:3, line:491:36>
|     |-TextComment 0x5555d4bfa8e0 <line:490:3, col:73> Text=" Retrieves the source location associated with a given file/line/column"
|     `-TextComment 0x5555d4bfa910 <line:491:3, col:36> Text=" in a particular translation unit."
|-FunctionDecl 0x5555d4b69bb8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:502:75> line:500:33 clang_getLocationForOffset 'CXSourceLocation (CXTranslationUnit, CXFile, unsigned int)'
| |-ParmVarDecl 0x5555d4b69998 <col:60, col:78> col:78 tu 'CXTranslationUnit':'struct CXTranslationUnitImpl *'
| |-ParmVarDecl 0x5555d4b69a10 <line:501:60, col:67> col:67 file 'CXFile':'void *'
| |-ParmVarDecl 0x5555d4b69a90 <line:502:60, col:69> col:69 offset 'unsigned int'
| |-VisibilityAttr 0x5555d4b69c78 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4bfaa60 </workspace/clang-c/Index.h:497:3, line:498:36>
|   `-ParagraphComment 0x5555d4bfaa30 <line:497:3, line:498:36>
|     |-TextComment 0x5555d4bfa9e0 <line:497:3, col:73> Text=" Retrieves the source location associated with a given character offset"
|     `-TextComment 0x5555d4bfaa00 <line:498:3, col:36> Text=" in a particular translation unit."
|-FunctionDecl 0x5555d4b69e20 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:507:77> col:20 clang_Location_isInSystemHeader 'int (CXSourceLocation)'
| |-ParmVarDecl 0x5555d4b69d28 <col:52, col:69> col:69 location 'CXSourceLocation':'CXSourceLocation'
| |-VisibilityAttr 0x5555d4b69ed0 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4bfab30 </workspace/clang-c/Index.h:505:3, col:71>
|   `-ParagraphComment 0x5555d4bfab00 <col:3, col:71>
|     `-TextComment 0x5555d4bfaad0 <col:3, col:71> Text=" Returns non-zero if the given source location is in a system header."
|-FunctionDecl 0x5555d4b6a020 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:513:75> col:20 clang_Location_isFromMainFile 'int (CXSourceLocation)'
| |-ParmVarDecl 0x5555d4b69f88 <col:50, col:67> col:67 location 'CXSourceLocation':'CXSourceLocation'
| |-VisibilityAttr 0x5555d4b6a0d0 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4bfac20 </workspace/clang-c/Index.h:510:3, line:511:38>
|   `-ParagraphComment 0x5555d4bfabf0 <line:510:3, line:511:38>
|     |-TextComment 0x5555d4bfaba0 <line:510:3, col:71> Text=" Returns non-zero if the given source location is in the main file of"
|     `-TextComment 0x5555d4bfabc0 <line:511:3, col:38> Text=" the corresponding translation unit."
|-FunctionDecl 0x5555d4b6a2d8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:518:53> col:30 clang_getNullRange 'CXSourceRange (void)'
| |-VisibilityAttr 0x5555d4b6a380 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4bfacf0 </workspace/clang-c/Index.h:516:3, col:42>
|   `-ParagraphComment 0x5555d4bfacc0 <col:3, col:42>
|     `-TextComment 0x5555d4bfac90 <col:3, col:42> Text=" Retrieve a NULL (invalid) source range."
|-FunctionDecl 0x5555d4b6a5c8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:525:65> line:524:30 clang_getRange 'CXSourceRange (CXSourceLocation, CXSourceLocation)'
| |-ParmVarDecl 0x5555d4b6a438 <col:45, col:62> col:62 begin 'CXSourceLocation':'CXSourceLocation'
| |-ParmVarDecl 0x5555d4b6a4b0 <line:525:45, col:62> col:62 end 'CXSourceLocation':'CXSourceLocation'
| |-VisibilityAttr 0x5555d4b6a680 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4bfade0 </workspace/clang-c/Index.h:521:3, line:522:13>
|   `-ParagraphComment 0x5555d4bfadb0 <line:521:3, line:522:13>
|     |-TextComment 0x5555d4bfad60 <line:521:3, col:64> Text=" Retrieve a source range given the beginning and ending source"
|     `-TextComment 0x5555d4bfad80 <line:522:3, col:13> Text=" locations."
|-FunctionDecl 0x5555d4b6a8e0 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:533:63> line:532:25 clang_equalRanges 'unsigned int (CXSourceRange, CXSourceRange)'
| |-ParmVarDecl 0x5555d4b6a738 <col:43, col:57> col:57 range1 'CXSourceRange':'CXSourceRange'
| |-ParmVarDecl 0x5555d4b6a7b0 <line:533:43, col:57> col:57 range2 'CXSourceRange':'CXSourceRange'
| |-VisibilityAttr 0x5555d4b6a998 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4bfaf90 </workspace/clang-c/Index.h:528:3, line:530:69>
|   |-ParagraphComment 0x5555d4bfae80 <line:528:3, col:47>
|   | `-TextComment 0x5555d4bfae50 <col:3, col:47> Text=" Determine whether two ranges are equivalent."
|   |-ParagraphComment 0x5555d4bfaed0 <line:530:3>
|   | `-TextComment 0x5555d4bfaea0 <col:3> Text=" "
|   `-BlockCommandComment 0x5555d4bfaef0 <col:4, col:69> Name="returns"
|     `-ParagraphComment 0x5555d4bfaf50 <col:12, col:69>
|       `-TextComment 0x5555d4bfaf20 <col:12, col:69> Text=" non-zero if the ranges are the same, zero if they differ."
|-FunctionDecl 0x5555d4b6ab40 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:538:58> col:20 clang_Range_isNull 'int (CXSourceRange)'
| |-ParmVarDecl 0x5555d4b6aa48 <col:39, col:53> col:53 range 'CXSourceRange':'CXSourceRange'
| |-VisibilityAttr 0x5555d4b6abf0 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4bfb0d0 </workspace/clang-c/Index.h:536:3, col:40>
|   `-ParagraphComment 0x5555d4bfb0a0 <col:3, col:40>
|     |-TextComment 0x5555d4bfb000 <col:3, col:23> Text=" Returns non-zero if "
|     |-InlineCommandComment 0x5555d4bfb040 <col:24, col:25> Name="p" RenderMonospaced Arg[0]="range"
|     `-TextComment 0x5555d4bfb060 <col:32, col:40> Text=" is null."
|-FunctionDecl 0x5555d4b6b028 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:565:64> line:562:21 clang_getExpansionLocation 'void (CXSourceLocation, CXFile *, unsigned int *, unsigned int *, unsigned int *)'
| |-ParmVarDecl 0x5555d4b6aca8 <col:48, col:65> col:65 location 'CXSourceLocation':'CXSourceLocation'
| |-ParmVarDecl 0x5555d4b6ad50 <line:563:48, col:56> col:56 file 'CXFile *'
| |-ParmVarDecl 0x5555d4b6add0 <col:62, col:72> col:72 line 'unsigned int *'
| |-ParmVarDecl 0x5555d4b6ae50 <line:564:48, col:58> col:58 column 'unsigned int *'
| |-ParmVarDecl 0x5555d4b6aed0 <line:565:48, col:58> col:58 offset 'unsigned int *'
| |-VisibilityAttr 0x5555d4b6b0f8 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4bfb820 </workspace/clang-c/Index.h:541:3, line:560:52>
|   |-ParagraphComment 0x5555d4bfb190 <line:541:3, line:542:29>
|   | |-TextComment 0x5555d4bfb140 <line:541:3, col:61> Text=" Retrieve the file, line, column, and offset represented by"
|   | `-TextComment 0x5555d4bfb160 <line:542:3, col:29> Text=" the given source location."
|   |-ParagraphComment 0x5555d4bfb200 <line:544:3, line:545:35>
|   | |-TextComment 0x5555d4bfb1b0 <line:544:3, col:63> Text=" If the location refers into a macro expansion, retrieves the"
|   | `-TextComment 0x5555d4bfb1d0 <line:545:3, col:35> Text=" location of the macro expansion."
|   |-ParagraphComment 0x5555d4bfb250 <line:547:3>
|   | `-TextComment 0x5555d4bfb220 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4bfb270 <col:4, line:548:18> [in] implicitly Param="location" ParamIndex=0
|   | `-ParagraphComment 0x5555d4bfb320 <line:547:19, line:548:18>
|   |   |-TextComment 0x5555d4bfb2d0 <line:547:19, col:76> Text=" the location within a source file that will be decomposed"
|   |   `-TextComment 0x5555d4bfb2f0 <line:548:3, col:18> Text=" into its parts."
|   |-ParagraphComment 0x5555d4bfb370 <line:550:3>
|   | `-TextComment 0x5555d4bfb340 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4bfb390 <col:4, line:551:26> [in] implicitly Param="file" ParamIndex=1
|   | `-ParagraphComment 0x5555d4bfb440 <line:550:15, line:551:26>
|   |   |-TextComment 0x5555d4bfb3f0 <line:550:15, col:76> Text=" [out] if non-NULL, will be set to the file to which the given"
|   |   `-TextComment 0x5555d4bfb410 <line:551:3, col:26> Text=" source location points."
|   |-ParagraphComment 0x5555d4bfb490 <line:553:3>
|   | `-TextComment 0x5555d4bfb460 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4bfb4b0 <col:4, line:554:26> [in] implicitly Param="line" ParamIndex=2
|   | `-ParagraphComment 0x5555d4bfb560 <line:553:15, line:554:26>
|   |   |-TextComment 0x5555d4bfb510 <line:553:15, col:76> Text=" [out] if non-NULL, will be set to the line to which the given"
|   |   `-TextComment 0x5555d4bfb530 <line:554:3, col:26> Text=" source location points."
|   |-ParagraphComment 0x5555d4bfb5b0 <line:556:3>
|   | `-TextComment 0x5555d4bfb580 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4bfb5d0 <col:4, line:557:26> [in] implicitly Param="column" ParamIndex=3
|   | `-ParagraphComment 0x5555d4bfb680 <line:556:17, line:557:26>
|   |   |-TextComment 0x5555d4bfb630 <line:556:17, col:80> Text=" [out] if non-NULL, will be set to the column to which the given"
|   |   `-TextComment 0x5555d4bfb650 <line:557:3, col:26> Text=" source location points."
|   |-ParagraphComment 0x5555d4bfb6d0 <line:559:3>
|   | `-TextComment 0x5555d4bfb6a0 <col:3> Text=" "
|   `-ParamCommandComment 0x5555d4bfb6f0 <col:4, line:560:52> [in] implicitly Param="offset" ParamIndex=4
|     `-ParagraphComment 0x5555d4bfb7a0 <line:559:17, line:560:52>
|       |-TextComment 0x5555d4bfb750 <line:559:17, col:70> Text=" [out] if non-NULL, will be set to the offset into the"
|       `-TextComment 0x5555d4bfb770 <line:560:3, col:52> Text=" buffer to which the given source location points."
|-FunctionDecl 0x5555d4b6b468 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:609:79> line:607:21 clang_getPresumedLocation 'void (CXSourceLocation, CXString *, unsigned int *, unsigned int *)'
| |-ParmVarDecl 0x5555d4b6b1a8 <col:47, col:64> col:64 location 'CXSourceLocation':'CXSourceLocation'
| |-ParmVarDecl 0x5555d4b6b228 <line:608:47, col:57> col:57 filename 'CXString *'
| |-ParmVarDecl 0x5555d4b6b2a8 <line:609:47, col:57> col:57 line 'unsigned int *'
| |-ParmVarDecl 0x5555d4b6b328 <col:63, col:73> col:73 column 'unsigned int *'
| |-VisibilityAttr 0x5555d4b6b530 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4bfc290 </workspace/clang-c/Index.h:568:3, line:605:69>
|   |-ParagraphComment 0x5555d4bfb8e0 <line:568:3, line:569:48>
|   | |-TextComment 0x5555d4bfb890 <line:568:3, col:69> Text=" Retrieve the file, line and column represented by the given source"
|   | `-TextComment 0x5555d4bfb8b0 <line:569:3, col:48> Text=" location, as specified in a # line directive."
|   |-ParagraphComment 0x5555d4bfb950 <line:571:3, col:64>
|   | `-TextComment 0x5555d4bfb920 <col:3, col:64> Text=" Example: given the following source code in a file somefile.c"
|   |-ParagraphComment 0x5555d4bfb9a0 <line:573:3>
|   | `-TextComment 0x5555d4bfb970 <col:3> Text=" "
|   |-VerbatimBlockComment 0x5555d4bfb9c0 <col:4, col:9> Name="code" CloseName="endcode"
|   | |-VerbatimBlockLineComment 0x5555d4bfba10 <line:574:3, col:20> Text=" #123 "dummy.c" 1"
|   | |-VerbatimBlockLineComment 0x5555d4bfba30 <line:575:3> Text=""
|   | |-VerbatimBlockLineComment 0x5555d4bfba50 <line:576:3, col:25> Text=" static int func(void)"
|   | |-VerbatimBlockLineComment 0x5555d4bfba70 <line:577:3, col:5> Text=" {"
|   | |-VerbatimBlockLineComment 0x5555d4bfba90 <line:578:3, col:17> Text="     return 0;"
|   | `-VerbatimBlockLineComment 0x5555d4bfbab0 <line:579:3, col:5> Text=" }"
|   |-ParagraphComment 0x5555d4bfbb30 <line:582:3, col:62>
|   | `-TextComment 0x5555d4bfbb00 <col:3, col:62> Text=" the location information returned by this function would be"
|   |-ParagraphComment 0x5555d4bfbb80 <line:584:3, col:37>
|   | `-TextComment 0x5555d4bfbb50 <col:3, col:37> Text=" File: dummy.c Line: 124 Column: 12"
|   |-ParagraphComment 0x5555d4bfbbd0 <line:586:3, col:57>
|   | `-TextComment 0x5555d4bfbba0 <col:3, col:57> Text=" whereas clang_getExpansionLocation would have returned"
|   |-ParagraphComment 0x5555d4bfbc20 <line:588:3, col:38>
|   | `-TextComment 0x5555d4bfbbf0 <col:3, col:38> Text=" File: somefile.c Line: 3 Column: 12"
|   |-ParagraphComment 0x5555d4bfbc70 <line:590:3>
|   | `-TextComment 0x5555d4bfbc40 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4bfbc90 <col:4, line:591:18> [in] implicitly Param="location" ParamIndex=0
|   | `-ParagraphComment 0x5555d4bfbd40 <line:590:19, line:591:18>
|   |   |-TextComment 0x5555d4bfbcf0 <line:590:19, col:76> Text=" the location within a source file that will be decomposed"
|   |   `-TextComment 0x5555d4bfbd10 <line:591:3, col:18> Text=" into its parts."
|   |-ParagraphComment 0x5555d4bfbd90 <line:593:3>
|   | `-TextComment 0x5555d4bfbd60 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4bfbdb0 <col:4, line:599:48> [in] implicitly Param="filename" ParamIndex=1
|   | `-ParagraphComment 0x5555d4bfbfb0 <line:593:19, line:599:48>
|   |   |-TextComment 0x5555d4bfbe10 <line:593:19, col:72> Text=" [out] if non-NULL, will be set to the filename of the"
|   |   |-TextComment 0x5555d4bfbe30 <line:594:3, col:77> Text=" source location. Note that filenames returned will be for "virtual" files,"
|   |   |-TextComment 0x5555d4bfbe50 <line:595:3, col:73> Text=" which don't necessarily exist on the machine running clang - e.g. when"
|   |   |-TextComment 0x5555d4bfbe70 <line:596:3, col:72> Text=" parsing preprocessed output obtained from a different environment. If"
|   |   |-TextComment 0x5555d4bfbe90 <line:597:3, col:75> Text=" a non-NULL value is passed in, remember to dispose of the returned value"
|   |   |-TextComment 0x5555d4bfbeb0 <line:598:3, col:9> Text=" using "
|   |   |-InlineCommandComment 0x5555d4bfbf00 <col:10, col:11> Name="c" RenderMonospaced Arg[0]="clang_disposeString()"
|   |   |-TextComment 0x5555d4bfbf20 <col:34, col:78> Text=" once you've finished with it. For an invalid"
|   |   `-TextComment 0x5555d4bfbf40 <line:599:3, col:48> Text=" source location, an empty string is returned."
|   |-ParagraphComment 0x5555d4bfc000 <line:601:3>
|   | `-TextComment 0x5555d4bfbfd0 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4bfc020 <col:4, line:602:69> [in] implicitly Param="line" ParamIndex=2
|   | `-ParagraphComment 0x5555d4bfc0d0 <line:601:15, line:602:69>
|   |   |-TextComment 0x5555d4bfc080 <line:601:15, col:71> Text=" [out] if non-NULL, will be set to the line number of the"
|   |   `-TextComment 0x5555d4bfc0a0 <line:602:3, col:69> Text=" source location. For an invalid source location, zero is returned."
|   |-ParagraphComment 0x5555d4bfc120 <line:604:3>
|   | `-TextComment 0x5555d4bfc0f0 <col:3> Text=" "
|   `-ParamCommandComment 0x5555d4bfc140 <col:4, line:605:69> [in] implicitly Param="column" ParamIndex=3
|     `-ParagraphComment 0x5555d4bfc1f0 <line:604:17, line:605:69>
|       |-TextComment 0x5555d4bfc1a0 <line:604:17, col:75> Text=" [out] if non-NULL, will be set to the column number of the"
|       `-TextComment 0x5555d4bfc1c0 <line:605:3, col:69> Text=" source location. For an invalid source location, zero is returned."
|-FunctionDecl 0x5555d4b6b8f0 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:622:68> line:619:21 clang_getInstantiationLocation 'void (CXSourceLocation, CXFile *, unsigned int *, unsigned int *, unsigned int *)'
| |-ParmVarDecl 0x5555d4b6b5e8 <col:52, col:69> col:69 location 'CXSourceLocation':'CXSourceLocation'
| |-ParmVarDecl 0x5555d4b6b668 <line:620:52, col:60> col:60 file 'CXFile *'
| |-ParmVarDecl 0x5555d4b6b6e8 <col:66, col:76> col:76 line 'unsigned int *'
| |-ParmVarDecl 0x5555d4b6b768 <line:621:52, col:62> col:62 column 'unsigned int *'
| |-ParmVarDecl 0x5555d4b6b840 <line:622:52, col:62> col:62 offset 'unsigned int *'
| |-VisibilityAttr 0x5555d4b6b9c0 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4bfc420 </workspace/clang-c/Index.h:612:3, line:617:11>
|   |-ParagraphComment 0x5555d4bfc350 <line:612:3, line:613:32>
|   | |-TextComment 0x5555d4bfc300 <line:612:3, col:72> Text=" Legacy API to retrieve the file, line, column, and offset represented"
|   | `-TextComment 0x5555d4bfc320 <line:613:3, col:32> Text=" by the given source location."
|   `-ParagraphComment 0x5555d4bfc3f0 <line:615:3, line:617:11>
|     |-TextComment 0x5555d4bfc370 <line:615:3, col:58> Text=" This interface has been replaced by the newer interface"
|     |-TextComment 0x5555d4bfc390 <line:616:3, col:72> Text=" #clang_getExpansionLocation(). See that interface's documentation for"
|     `-TextComment 0x5555d4bfc3b0 <line:617:3, col:11> Text=" details."
|-FunctionDecl 0x5555d4b6bd28 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:649:63> line:646:21 clang_getSpellingLocation 'void (CXSourceLocation, CXFile *, unsigned int *, unsigned int *, unsigned int *)'
| |-ParmVarDecl 0x5555d4b6ba78 <col:47, col:64> col:64 location 'CXSourceLocation':'CXSourceLocation'
| |-ParmVarDecl 0x5555d4b6baf8 <line:647:47, col:55> col:55 file 'CXFile *'
| |-ParmVarDecl 0x5555d4b6bb78 <col:61, col:71> col:71 line 'unsigned int *'
| |-ParmVarDecl 0x5555d4b6bbf8 <line:648:47, col:57> col:57 column 'unsigned int *'
| |-ParmVarDecl 0x5555d4b6bc78 <line:649:47, col:57> col:57 offset 'unsigned int *'
| |-VisibilityAttr 0x5555d4b6bdf8 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4bfcb80 </workspace/clang-c/Index.h:625:3, line:644:52>
|   |-ParagraphComment 0x5555d4bfc4e0 <line:625:3, line:626:29>
|   | |-TextComment 0x5555d4bfc490 <line:625:3, col:61> Text=" Retrieve the file, line, column, and offset represented by"
|   | `-TextComment 0x5555d4bfc4b0 <line:626:3, col:29> Text=" the given source location."
|   |-ParagraphComment 0x5555d4bfc550 <line:628:3, line:629:54>
|   | |-TextComment 0x5555d4bfc500 <line:628:3, col:70> Text=" If the location refers into a macro instantiation, return where the"
|   | `-TextComment 0x5555d4bfc520 <line:629:3, col:54> Text=" location was originally spelled in the source file."
|   |-ParagraphComment 0x5555d4bfc5a0 <line:631:3>
|   | `-TextComment 0x5555d4bfc570 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4bfc5c0 <col:4, line:632:18> [in] implicitly Param="location" ParamIndex=0
|   | `-ParagraphComment 0x5555d4bfc670 <line:631:19, line:632:18>
|   |   |-TextComment 0x5555d4bfc620 <line:631:19, col:76> Text=" the location within a source file that will be decomposed"
|   |   `-TextComment 0x5555d4bfc640 <line:632:3, col:18> Text=" into its parts."
|   |-ParagraphComment 0x5555d4bfc6c0 <line:634:3>
|   | `-TextComment 0x5555d4bfc690 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4bfc6e0 <col:4, line:635:26> [in] implicitly Param="file" ParamIndex=1
|   | `-ParagraphComment 0x5555d4bfc790 <line:634:15, line:635:26>
|   |   |-TextComment 0x5555d4bfc740 <line:634:15, col:76> Text=" [out] if non-NULL, will be set to the file to which the given"
|   |   `-TextComment 0x5555d4bfc760 <line:635:3, col:26> Text=" source location points."
|   |-ParagraphComment 0x5555d4bfc7e0 <line:637:3>
|   | `-TextComment 0x5555d4bfc7b0 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4bfc800 <col:4, line:638:26> [in] implicitly Param="line" ParamIndex=2
|   | `-ParagraphComment 0x5555d4bfc8b0 <line:637:15, line:638:26>
|   |   |-TextComment 0x5555d4bfc860 <line:637:15, col:76> Text=" [out] if non-NULL, will be set to the line to which the given"
|   |   `-TextComment 0x5555d4bfc880 <line:638:3, col:26> Text=" source location points."
|   |-ParagraphComment 0x5555d4bfc900 <line:640:3>
|   | `-TextComment 0x5555d4bfc8d0 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4bfc930 <col:4, line:641:26> [in] implicitly Param="column" ParamIndex=3
|   | `-ParagraphComment 0x5555d4bfc9e0 <line:640:17, line:641:26>
|   |   |-TextComment 0x5555d4bfc990 <line:640:17, col:80> Text=" [out] if non-NULL, will be set to the column to which the given"
|   |   `-TextComment 0x5555d4bfc9b0 <line:641:3, col:26> Text=" source location points."
|   |-ParagraphComment 0x5555d4bfca30 <line:643:3>
|   | `-TextComment 0x5555d4bfca00 <col:3> Text=" "
|   `-ParamCommandComment 0x5555d4bfca50 <col:4, line:644:52> [in] implicitly Param="offset" ParamIndex=4
|     `-ParagraphComment 0x5555d4bfcb00 <line:643:17, line:644:52>
|       |-TextComment 0x5555d4bfcab0 <line:643:17, col:70> Text=" [out] if non-NULL, will be set to the offset into the"
|       `-TextComment 0x5555d4bfcad0 <line:644:3, col:52> Text=" buffer to which the given source location points."
|-FunctionDecl 0x5555d4b6c158 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:676:77> line:674:21 clang_getFileLocation 'void (CXSourceLocation, CXFile *, unsigned int *, unsigned int *, unsigned int *)'
| |-ParmVarDecl 0x5555d4b6bea8 <col:43, col:60> col:60 location 'CXSourceLocation':'CXSourceLocation'
| |-ParmVarDecl 0x5555d4b6bf28 <line:675:43, col:51> col:51 file 'CXFile *'
| |-ParmVarDecl 0x5555d4b6bfa8 <col:57, col:67> col:67 line 'unsigned int *'
| |-ParmVarDecl 0x5555d4b6c028 <line:676:43, col:53> col:53 column 'unsigned int *'
| |-ParmVarDecl 0x5555d4b6c0a8 <col:61, col:71> col:71 offset 'unsigned int *'
| |-VisibilityAttr 0x5555d4b6c228 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4bfd300 </workspace/clang-c/Index.h:652:3, line:672:52>
|   |-ParagraphComment 0x5555d4bfcc40 <line:652:3, line:653:29>
|   | |-TextComment 0x5555d4bfcbf0 <line:652:3, col:61> Text=" Retrieve the file, line, column, and offset represented by"
|   | `-TextComment 0x5555d4bfcc10 <line:653:3, col:29> Text=" the given source location."
|   |-ParagraphComment 0x5555d4bfcce0 <line:655:3, line:657:20>
|   | |-TextComment 0x5555d4bfcc60 <line:655:3, col:76> Text=" If the location refers into a macro expansion, return where the macro was"
|   | |-TextComment 0x5555d4bfcc80 <line:656:3, col:78> Text=" expanded or where the macro argument was written, if the location points at"
|   | `-TextComment 0x5555d4bfcca0 <line:657:3, col:20> Text=" a macro argument."
|   |-ParagraphComment 0x5555d4bfcd30 <line:659:3>
|   | `-TextComment 0x5555d4bfcd00 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4bfcd50 <col:4, line:660:18> [in] implicitly Param="location" ParamIndex=0
|   | `-ParagraphComment 0x5555d4bfce00 <line:659:19, line:660:18>
|   |   |-TextComment 0x5555d4bfcdb0 <line:659:19, col:76> Text=" the location within a source file that will be decomposed"
|   |   `-TextComment 0x5555d4bfcdd0 <line:660:3, col:18> Text=" into its parts."
|   |-ParagraphComment 0x5555d4bfce50 <line:662:3>
|   | `-TextComment 0x5555d4bfce20 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4bfce70 <col:4, line:663:26> [in] implicitly Param="file" ParamIndex=1
|   | `-ParagraphComment 0x5555d4bfcf20 <line:662:15, line:663:26>
|   |   |-TextComment 0x5555d4bfced0 <line:662:15, col:76> Text=" [out] if non-NULL, will be set to the file to which the given"
|   |   `-TextComment 0x5555d4bfcef0 <line:663:3, col:26> Text=" source location points."
|   |-ParagraphComment 0x5555d4bfcf70 <line:665:3>
|   | `-TextComment 0x5555d4bfcf40 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4bfcf90 <col:4, line:666:26> [in] implicitly Param="line" ParamIndex=2
|   | `-ParagraphComment 0x5555d4bfd040 <line:665:15, line:666:26>
|   |   |-TextComment 0x5555d4bfcff0 <line:665:15, col:76> Text=" [out] if non-NULL, will be set to the line to which the given"
|   |   `-TextComment 0x5555d4bfd010 <line:666:3, col:26> Text=" source location points."
|   |-ParagraphComment 0x5555d4bfd090 <line:668:3>
|   | `-TextComment 0x5555d4bfd060 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4bfd0b0 <col:4, line:669:26> [in] implicitly Param="column" ParamIndex=3
|   | `-ParagraphComment 0x5555d4bfd160 <line:668:17, line:669:26>
|   |   |-TextComment 0x5555d4bfd110 <line:668:17, col:80> Text=" [out] if non-NULL, will be set to the column to which the given"
|   |   `-TextComment 0x5555d4bfd130 <line:669:3, col:26> Text=" source location points."
|   |-ParagraphComment 0x5555d4bfd1b0 <line:671:3>
|   | `-TextComment 0x5555d4bfd180 <col:3> Text=" "
|   `-ParamCommandComment 0x5555d4bfd1d0 <col:4, line:672:52> [in] implicitly Param="offset" ParamIndex=4
|     `-ParagraphComment 0x5555d4bfd280 <line:671:17, line:672:52>
|       |-TextComment 0x5555d4bfd230 <line:671:17, col:70> Text=" [out] if non-NULL, will be set to the offset into the"
|       `-TextComment 0x5555d4bfd250 <line:672:3, col:52> Text=" buffer to which the given source location points."
|-FunctionDecl 0x5555d4b6c3c8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:682:72> col:33 clang_getRangeStart 'CXSourceLocation (CXSourceRange)'
| |-ParmVarDecl 0x5555d4b6c2d8 <col:53, col:67> col:67 range 'CXSourceRange':'CXSourceRange'
| |-VisibilityAttr 0x5555d4b6c478 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4bfd3f0 </workspace/clang-c/Index.h:679:3, line:680:16>
|   `-ParagraphComment 0x5555d4bfd3c0 <line:679:3, line:680:16>
|     |-TextComment 0x5555d4bfd370 <line:679:3, col:71> Text=" Retrieve a source location representing the first character within a"
|     `-TextComment 0x5555d4bfd390 <line:680:3, col:16> Text=" source range."
|-FunctionDecl 0x5555d4b6c5b8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:688:70> col:33 clang_getRangeEnd 'CXSourceLocation (CXSourceRange)'
| |-ParmVarDecl 0x5555d4b6c528 <col:51, col:65> col:65 range 'CXSourceRange':'CXSourceRange'
| |-VisibilityAttr 0x5555d4b6c668 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4bfd4e0 </workspace/clang-c/Index.h:685:3, line:686:16>
|   `-ParagraphComment 0x5555d4bfd4b0 <line:685:3, line:686:16>
|     |-TextComment 0x5555d4bfd460 <line:685:3, col:70> Text=" Retrieve a source location representing the last character within a"
|     `-TextComment 0x5555d4bfd480 <line:686:3, col:16> Text=" source range."
|-RecordDecl 0x5555d4b6c6e8 <line:693:9, line:700:1> line:693:9 struct definition
| |-FullComment 0x5555d4bfd5b0 <line:691:3, col:33>
| | `-ParagraphComment 0x5555d4bfd580 <col:3, col:33>
| |   `-TextComment 0x5555d4bfd550 <col:3, col:33> Text=" Identifies an array of ranges."
| |-FieldDecl 0x5555d4b6c7d0 <line:695:3, col:12> col:12 count 'unsigned int'
| | `-FullComment 0x5555d4bfd6f0 <line:694:6, col:51>
| |   `-ParagraphComment 0x5555d4bfd6c0 <col:6, col:51>
| |     |-TextComment 0x5555d4bfd620 <col:6, col:34> Text=" The number of ranges in the "
| |     |-InlineCommandComment 0x5555d4bfd660 <col:35, col:36> Name="c" RenderMonospaced Arg[0]="ranges"
| |     `-TextComment 0x5555d4bfd680 <col:44, col:51> Text=" array. "
| `-FieldDecl 0x5555d4b6c8f0 <line:699:3, col:18> col:18 ranges 'CXSourceRange *'
|   `-FullComment 0x5555d4bfd840 <line:697:5, line:698:3>
|     `-ParagraphComment 0x5555d4bfd810 <line:697:5, line:698:3>
|       |-TextComment 0x5555d4bfd760 <line:697:5, col:17> Text=" An array of "
|       |-InlineCommandComment 0x5555d4bfd7b0 <col:18, col:19> Name="c" RenderMonospaced Arg[0]="CXSourceRanges."
|       `-TextComment 0x5555d4bfd7d0 <line:698:1, col:3> Text="   "
|-TypedefDecl 0x5555d4b6c998 <line:693:1, line:700:3> col:3 referenced CXSourceRangeList 'struct CXSourceRangeList':'CXSourceRangeList'
| |-ElaboratedType 0x5555d4b6c940 'struct CXSourceRangeList' sugar
| | `-RecordType 0x5555d4b6c770 'CXSourceRangeList'
| |   `-Record 0x5555d4b6c6e8 ''
| `-FullComment 0x5555d4c04bf0 <line:691:3, col:33>
|   `-ParagraphComment 0x5555d4bfd8e0 <col:3, col:33>
|     `-TextComment 0x5555d4bfd8b0 <col:3, col:33> Text=" Identifies an array of ranges."
|-FunctionDecl 0x5555d4b6ccb0 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:709:69> line:708:35 clang_getSkippedRanges 'CXSourceRangeList *(CXTranslationUnit, CXFile)'
| |-ParmVarDecl 0x5555d4b6cac0 <col:58, col:76> col:76 tu 'CXTranslationUnit':'struct CXTranslationUnitImpl *'
| |-ParmVarDecl 0x5555d4b6cb38 <line:709:58, col:65> col:65 file 'CXFile':'void *'
| |-VisibilityAttr 0x5555d4b6cd68 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c04d30 </workspace/clang-c/Index.h:703:3, line:706:71>
|   |-ParagraphComment 0x5555d4c04c90 <line:703:3, col:61>
|   | `-TextComment 0x5555d4c04c60 <col:3, col:61> Text=" Retrieve all ranges that were skipped by the preprocessor."
|   `-ParagraphComment 0x5555d4c04d00 <line:705:3, line:706:71>
|     |-TextComment 0x5555d4c04cb0 <line:705:3, col:66> Text=" The preprocessor will skip lines when they are surrounded by an"
|     `-TextComment 0x5555d4c04cd0 <line:706:3, col:71> Text=" if/ifdef/ifndef directive whose condition does not evaluate to true."
|-FunctionDecl 0x5555d4b6cf10 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:719:47> col:1 clang_getAllSkippedRanges 'CXSourceRangeList *(CXTranslationUnit)'
| |-ParmVarDecl 0x5555d4b6ce18 <col:27, col:45> col:45 tu 'CXTranslationUnit':'struct CXTranslationUnitImpl *'
| |-VisibilityAttr 0x5555d4b6cfc0 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c04e90 </workspace/clang-c/Index.h:712:3, line:716:71>
|   |-ParagraphComment 0x5555d4c04df0 <line:712:3, line:713:16>
|   | |-TextComment 0x5555d4c04da0 <line:712:3, col:62> Text=" Retrieve all ranges from all files that were skipped by the"
|   | `-TextComment 0x5555d4c04dc0 <line:713:3, col:16> Text=" preprocessor."
|   `-ParagraphComment 0x5555d4c04e60 <line:715:3, line:716:71>
|     |-TextComment 0x5555d4c04e10 <line:715:3, col:66> Text=" The preprocessor will skip lines when they are surrounded by an"
|     `-TextComment 0x5555d4c04e30 <line:716:3, col:71> Text=" if/ifdef/ifndef directive whose condition does not evaluate to true."
|-FunctionDecl 0x5555d4b6d178 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:724:75> col:21 clang_disposeSourceRangeList 'void (CXSourceRangeList *)'
| |-ParmVarDecl 0x5555d4b6d080 <col:50, col:69> col:69 ranges 'CXSourceRangeList *'
| |-VisibilityAttr 0x5555d4b6d228 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c04fe0 </workspace/clang-c/Index.h:722:3, line:723:1>
|   `-ParagraphComment 0x5555d4c04fb0 <line:722:3, line:723:1>
|     |-TextComment 0x5555d4c04f00 <line:722:3, col:21> Text=" Destroy the given "
|     |-InlineCommandComment 0x5555d4c04f50 <col:22, col:23> Name="c" RenderMonospaced Arg[0]="CXSourceRangeList."
|     `-TextComment 0x5555d4c04f70 <line:723:1> Text=" "
|-EnumDecl 0x5555d4b6d308 <line:739:1, line:769:1> line:739:6 CXDiagnosticSeverity
| |-FullComment 0x5555d4c050b0 <line:737:3, col:53>
| | `-ParagraphComment 0x5555d4c05080 <col:3, col:53>
| |   `-TextComment 0x5555d4c05050 <col:3, col:53> Text=" Describes the severity of a particular diagnostic."
| |-EnumConstantDecl 0x5555d4b6d438 <line:744:3, col:26> col:3 CXDiagnostic_Ignored 'int'
| | |-ConstantExpr 0x5555d4b6d418 <col:26> 'int'
| | | |-value: Int 0
| | | `-IntegerLiteral 0x5555d4b6d3f8 <col:26> 'int' 0
| | `-FullComment 0x5555d4c051a0 <line:741:5, line:742:12>
| |   `-ParagraphComment 0x5555d4c05170 <line:741:5, line:742:12>
| |     |-TextComment 0x5555d4c05120 <line:741:5, col:67> Text=" A diagnostic that has been suppressed, e.g., by a command-line"
| |     `-TextComment 0x5555d4c05140 <line:742:5, col:12> Text=" option."
| |-EnumConstantDecl 0x5555d4b6d4f8 <line:750:3, col:23> col:3 CXDiagnostic_Note 'int'
| | |-ConstantExpr 0x5555d4b6d4d8 <col:23> 'int'
| | | |-value: Int 1
| | | `-IntegerLiteral 0x5555d4b6d4b8 <col:23> 'int' 1
| | `-FullComment 0x5555d4c05290 <line:747:5, line:748:36>
| |   `-ParagraphComment 0x5555d4c05260 <line:747:5, line:748:36>
| |     |-TextComment 0x5555d4c05210 <line:747:5, col:61> Text=" This diagnostic is a note that should be attached to the"
| |     `-TextComment 0x5555d4c05230 <line:748:5, col:36> Text=" previous (non-note) diagnostic."
| |-EnumConstantDecl 0x5555d4b6d5b8 <line:756:3, col:26> col:3 CXDiagnostic_Warning 'int'
| | |-ConstantExpr 0x5555d4b6d598 <col:26> 'int'
| | | |-value: Int 2
| | | `-IntegerLiteral 0x5555d4b6d578 <col:26> 'int' 2
| | `-FullComment 0x5555d4c05380 <line:753:5, line:754:11>
| |   `-ParagraphComment 0x5555d4c05350 <line:753:5, line:754:11>
| |     |-TextComment 0x5555d4c05300 <line:753:5, col:62> Text=" This diagnostic indicates suspicious code that may not be"
| |     `-TextComment 0x5555d4c05320 <line:754:5, col:11> Text=" wrong."
| |-EnumConstantDecl 0x5555d4b6d678 <line:761:3, col:24> col:3 CXDiagnostic_Error 'int'
| | |-ConstantExpr 0x5555d4b6d658 <col:24> 'int'
| | | |-value: Int 3
| | | `-IntegerLiteral 0x5555d4b6d638 <col:24> 'int' 3
| | `-FullComment 0x5555d4c05450 <line:759:5, col:59>
| |   `-ParagraphComment 0x5555d4c05420 <col:5, col:59>
| |     `-TextComment 0x5555d4c053f0 <col:5, col:59> Text=" This diagnostic indicates that the code is ill-formed."
| `-EnumConstantDecl 0x5555d4b6d738 <line:768:3, col:24> col:3 CXDiagnostic_Fatal 'int'
|   |-ConstantExpr 0x5555d4b6d718 <col:24> 'int'
|   | |-value: Int 4
|   | `-IntegerLiteral 0x5555d4b6d6f8 <col:24> 'int' 4
|   `-FullComment 0x5555d4c05570 <line:764:5, line:766:13>
|     `-ParagraphComment 0x5555d4c05540 <line:764:5, line:766:13>
|       |-TextComment 0x5555d4c054c0 <line:764:5, col:63> Text=" This diagnostic indicates that the code is ill-formed such"
|       |-TextComment 0x5555d4c054e0 <line:765:5, col:62> Text=" that future parser recovery is unlikely to produce useful"
|       `-TextComment 0x5555d4c05500 <line:766:5, col:13> Text=" results."
|-TypedefDecl 0x5555d4b6d7d0 <line:775:1, col:15> col:15 referenced CXDiagnostic 'void *'
| |-PointerType 0x5555d4abe5e0 'void *'
| | `-BuiltinType 0x5555d4abdec0 'void'
| `-FullComment 0x5555d4c05660 <line:772:3, line:773:51>
|   `-ParagraphComment 0x5555d4c05630 <line:772:3, line:773:51>
|     |-TextComment 0x5555d4c055e0 <line:772:3, col:61> Text=" A single diagnostic, containing the diagnostic's severity,"
|     `-TextComment 0x5555d4c05600 <line:773:3, col:51> Text=" location, text, source ranges, and fix-it hints."
|-TypedefDecl 0x5555d4b6d960 <line:780:1, col:15> col:15 referenced CXDiagnosticSet 'void *'
| |-PointerType 0x5555d4abe5e0 'void *'
| | `-BuiltinType 0x5555d4abdec0 'void'
| `-FullComment 0x5555d4c05730 <line:778:3, col:28>
|   `-ParagraphComment 0x5555d4c05700 <col:3, col:28>
|     `-TextComment 0x5555d4c056d0 <col:3, col:28> Text=" A group of CXDiagnostics."
|-FunctionDecl 0x5555d4b6db50 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:785:75> col:25 clang_getNumDiagnosticsInSet 'unsigned int (CXDiagnosticSet)'
| |-ParmVarDecl 0x5555d4b6da80 <col:54, col:70> col:70 Diags 'CXDiagnosticSet':'void *'
| |-VisibilityAttr 0x5555d4b6dc00 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c05800 </workspace/clang-c/Index.h:783:3, col:60>
|   `-ParagraphComment 0x5555d4c057d0 <col:3, col:60>
|     `-TextComment 0x5555d4c057a0 <col:3, col:60> Text=" Determine the number of diagnostics in a CXDiagnosticSet."
|-FunctionDecl 0x5555d4b6deb8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:797:68> line:796:29 clang_getDiagnosticInSet 'CXDiagnostic (CXDiagnosticSet, unsigned int)'
| |-ParmVarDecl 0x5555d4b6dd20 <col:54, col:70> col:70 Diags 'CXDiagnosticSet':'void *'
| |-ParmVarDecl 0x5555d4b6dda0 <line:797:54, col:63> col:63 Index 'unsigned int'
| |-VisibilityAttr 0x5555d4b6df70 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c06c60 </workspace/clang-c/Index.h:788:3, line:795:1>
|   |-ParagraphComment 0x5555d4c058a0 <line:788:3, col:67>
|   | `-TextComment 0x5555d4c05870 <col:3, col:67> Text=" Retrieve a diagnostic associated with the given CXDiagnosticSet."
|   |-ParagraphComment 0x5555d4c058f0 <line:790:3>
|   | `-TextComment 0x5555d4c058c0 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c05910 <col:4, line:791:3> [in] implicitly Param="Diags" ParamIndex=0
|   | `-ParagraphComment 0x5555d4c059c0 <line:790:16, line:791:3>
|   |   |-TextComment 0x5555d4c05970 <line:790:16, col:45> Text=" the CXDiagnosticSet to query."
|   |   `-TextComment 0x5555d4c05990 <line:791:3> Text=" "
|   |-ParamCommandComment 0x5555d4c059e0 <col:4, col:61> [in] implicitly Param="Index" ParamIndex=1
|   | `-ParagraphComment 0x5555d4c05a70 <col:16, col:61>
|   |   `-TextComment 0x5555d4c05a40 <col:16, col:61> Text=" the zero-based diagnostic number to retrieve."
|   |-ParagraphComment 0x5555d4c05ac0 <line:793:3>
|   | `-TextComment 0x5555d4c05a90 <col:3> Text=" "
|   `-BlockCommandComment 0x5555d4c05ae0 <col:4, line:795:1> Name="returns"
|     `-ParagraphComment 0x5555d4c06c10 <line:793:12, line:795:1>
|       |-TextComment 0x5555d4c05b10 <line:793:12, col:67> Text=" the requested diagnostic. This diagnostic must be freed"
|       |-TextComment 0x5555d4c05b30 <line:794:3, col:17> Text=" via a call to "
|       |-InlineCommandComment 0x5555d4c05b90 <col:18, col:19> Name="c" RenderMonospaced Arg[0]="clang_disposeDiagnostic()."
|       `-TextComment 0x5555d4c05bb0 <line:795:1> Text=" "
|-EnumDecl 0x5555d4b6dff8 <line:803:1, line:826:1> line:803:6 CXLoadDiag_Error
| |-FullComment 0x5555d4c06dd0 <line:800:3, line:802:1>
| | `-ParagraphComment 0x5555d4c06da0 <line:800:3, line:802:1>
| |   |-TextComment 0x5555d4c06cd0 <line:800:3, col:66> Text=" Describes the kind of error that occurred (if any) in a call to"
| |   |-TextComment 0x5555d4c06cf0 <line:801:3> Text=" "
| |   |-InlineCommandComment 0x5555d4c06d40 <col:4, col:5> Name="c" RenderMonospaced Arg[0]="clang_loadDiagnostics."
| |   `-TextComment 0x5555d4c06d60 <line:802:1> Text=" "
| |-EnumConstantDecl 0x5555d4b6e128 <line:807:3, col:21> col:3 CXLoadDiag_None 'int'
| | |-ConstantExpr 0x5555d4b6e108 <col:21> 'int'
| | | |-value: Int 0
| | | `-IntegerLiteral 0x5555d4b6e0e8 <col:21> 'int' 0
| | `-FullComment 0x5555d4c06ea0 <line:805:5, col:38>
| |   `-ParagraphComment 0x5555d4c06e70 <col:5, col:38>
| |     `-TextComment 0x5555d4c06e40 <col:5, col:38> Text=" Indicates that no error occurred."
| |-EnumConstantDecl 0x5555d4b6e1e8 <line:813:3, col:24> col:3 CXLoadDiag_Unknown 'int'
| | |-ConstantExpr 0x5555d4b6e1c8 <col:24> 'int'
| | | |-value: Int 1
| | | `-IntegerLiteral 0x5555d4b6e1a8 <col:24> 'int' 1
| | `-FullComment 0x5555d4c06f90 <line:810:5, line:811:29>
| |   `-ParagraphComment 0x5555d4c06f60 <line:810:5, line:811:29>
| |     |-TextComment 0x5555d4c06f10 <line:810:5, col:65> Text=" Indicates that an unknown error occurred while attempting to"
| |     `-TextComment 0x5555d4c06f30 <line:811:5, col:29> Text=" deserialize diagnostics."
| |-EnumConstantDecl 0x5555d4b6e2a8 <line:819:3, col:27> col:3 CXLoadDiag_CannotLoad 'int'
| | |-ConstantExpr 0x5555d4b6e288 <col:27> 'int'
| | | |-value: Int 2
| | | `-IntegerLiteral 0x5555d4b6e268 <col:27> 'int' 2
| | `-FullComment 0x5555d4c07080 <line:816:5, line:817:25>
| |   `-ParagraphComment 0x5555d4c07050 <line:816:5, line:817:25>
| |     |-TextComment 0x5555d4c07000 <line:816:5, col:66> Text=" Indicates that the file containing the serialized diagnostics"
| |     `-TextComment 0x5555d4c07020 <line:817:5, col:25> Text=" could not be opened."
| `-EnumConstantDecl 0x5555d4b6e368 <line:825:3, col:28> col:3 CXLoadDiag_InvalidFile 'int'
|   |-ConstantExpr 0x5555d4b6e348 <col:28> 'int'
|   | |-value: Int 3
|   | `-IntegerLiteral 0x5555d4b6e328 <col:28> 'int' 3
|   `-FullComment 0x5555d4c07170 <line:822:5, line:823:13>
|     `-ParagraphComment 0x5555d4c07140 <line:822:5, line:823:13>
|       |-TextComment 0x5555d4c070f0 <line:822:5, col:65> Text=" Indicates that the serialized diagnostics file is invalid or"
|       `-TextComment 0x5555d4c07110 <line:823:5, col:13> Text=" corrupt."
|-FunctionDecl 0x5555d4b6e6e8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:842:74> line:841:32 clang_loadDiagnostics 'CXDiagnosticSet (const char *, enum CXLoadDiag_Error *, CXString *)'
| |-ParmVarDecl 0x5555d4b6e420 <line:842:5, col:17> col:17 file 'const char *'
| |-ParmVarDecl 0x5555d4b6e540 <col:23, col:46> col:46 error 'enum CXLoadDiag_Error *'
| |-ParmVarDecl 0x5555d4b6e5c0 <col:53, col:63> col:63 errorString 'CXString *'
| |-VisibilityAttr 0x5555d4b6e7a8 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c07670 </workspace/clang-c/Index.h:829:3, line:839:69>
|   |-ParagraphComment 0x5555d4c07230 <line:829:3, line:830:8>
|   | |-TextComment 0x5555d4c071e0 <line:829:3, col:68> Text=" Deserialize a set of diagnostics from a Clang diagnostics bitcode"
|   | `-TextComment 0x5555d4c07200 <line:830:3, col:8> Text=" file."
|   |-ParagraphComment 0x5555d4c07280 <line:832:3>
|   | `-TextComment 0x5555d4c07250 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c072a0 <col:4, line:833:3> [in] implicitly Param="file" ParamIndex=0
|   | `-ParagraphComment 0x5555d4c07350 <line:832:15, line:833:3>
|   |   |-TextComment 0x5555d4c07300 <line:832:15, col:51> Text=" The name of the file to deserialize."
|   |   `-TextComment 0x5555d4c07320 <line:833:3> Text=" "
|   |-ParamCommandComment 0x5555d4c07370 <col:4, line:835:3> [in] implicitly Param="error" ParamIndex=1
|   | `-ParagraphComment 0x5555d4c07450 <line:833:16, line:835:3>
|   |   |-TextComment 0x5555d4c073d0 <line:833:16, col:74> Text=" A pointer to a enum value recording if there was a problem"
|   |   |-TextComment 0x5555d4c073f0 <line:834:3, col:40> Text="        deserializing the diagnostics."
|   |   `-TextComment 0x5555d4c07410 <line:835:3> Text=" "
|   |-ParamCommandComment 0x5555d4c07470 <col:4, line:836:50> [in] implicitly Param="errorString" ParamIndex=2
|   | `-ParagraphComment 0x5555d4c07520 <line:835:22, line:836:50>
|   |   |-TextComment 0x5555d4c074d0 <line:835:22, col:76> Text=" A pointer to a CXString for recording the error string"
|   |   `-TextComment 0x5555d4c074f0 <line:836:3, col:50> Text="        if the file was not successfully loaded."
|   |-ParagraphComment 0x5555d4c07570 <line:838:3>
|   | `-TextComment 0x5555d4c07540 <col:3> Text=" "
|   `-BlockCommandComment 0x5555d4c07590 <col:4, line:839:69> Name="returns"
|     `-ParagraphComment 0x5555d4c07610 <line:838:12, line:839:69>
|       |-TextComment 0x5555d4c075c0 <line:838:12, col:78> Text=" A loaded CXDiagnosticSet if successful, and NULL otherwise.  These"
|       `-TextComment 0x5555d4c075e0 <line:839:3, col:69> Text=" diagnostics should be released using clang_disposeDiagnosticSet()."
|-FunctionDecl 0x5555d4b6ebb0 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:847:69> col:21 clang_disposeDiagnosticSet 'void (CXDiagnosticSet)'
| |-ParmVarDecl 0x5555d4b6e858 <col:48, col:64> col:64 Diags 'CXDiagnosticSet':'void *'
| |-VisibilityAttr 0x5555d4b6ec60 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c07740 </workspace/clang-c/Index.h:845:3, col:66>
|   `-ParagraphComment 0x5555d4c07710 <col:3, col:66>
|     `-TextComment 0x5555d4c076e0 <col:3, col:66> Text=" Release a CXDiagnosticSet and all of its contained diagnostics."
|-FunctionDecl 0x5555d4b6ee08 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:855:72> col:32 clang_getChildDiagnostics 'CXDiagnosticSet (CXDiagnostic)'
| |-ParmVarDecl 0x5555d4b6ed18 <col:58, col:71> col:71 D 'CXDiagnostic':'void *'
| |-VisibilityAttr 0x5555d4b6eeb8 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c07880 </workspace/clang-c/Index.h:850:3, line:853:30>
|   |-ParagraphComment 0x5555d4c077e0 <line:850:3, col:52>
|   | `-TextComment 0x5555d4c077b0 <col:3, col:52> Text=" Retrieve the child diagnostics of a CXDiagnostic."
|   `-ParagraphComment 0x5555d4c07850 <line:852:3, line:853:30>
|     |-TextComment 0x5555d4c07800 <line:852:3, col:55> Text=" This CXDiagnosticSet does not need to be released by"
|     `-TextComment 0x5555d4c07820 <line:853:3, col:30> Text=" clang_disposeDiagnosticSet."
|-FunctionDecl 0x5555d4b6f060 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:861:71> col:25 clang_getNumDiagnostics 'unsigned int (CXTranslationUnit)'
| |-ParmVarDecl 0x5555d4b6ef68 <col:49, col:67> col:67 Unit 'CXTranslationUnit':'struct CXTranslationUnitImpl *'
| |-VisibilityAttr 0x5555d4b6f110 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c07970 </workspace/clang-c/Index.h:858:3, line:859:20>
|   `-ParagraphComment 0x5555d4c07940 <line:858:3, line:859:20>
|     |-TextComment 0x5555d4c078f0 <line:858:3, col:61> Text=" Determine the number of diagnostics produced for the given"
|     `-TextComment 0x5555d4c07910 <line:859:3, col:20> Text=" translation unit."
|-FunctionDecl 0x5555d4b6f358 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:873:63> line:872:29 clang_getDiagnostic 'CXDiagnostic (CXTranslationUnit, unsigned int)'
| |-ParmVarDecl 0x5555d4b6f1c8 <col:49, col:67> col:67 Unit 'CXTranslationUnit':'struct CXTranslationUnitImpl *'
| |-ParmVarDecl 0x5555d4b6f248 <line:873:49, col:58> col:58 Index 'unsigned int'
| |-VisibilityAttr 0x5555d4b6f410 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c07dd0 </workspace/clang-c/Index.h:864:3, line:871:1>
|   |-ParagraphComment 0x5555d4c07a10 <line:864:3, col:68>
|   | `-TextComment 0x5555d4c079e0 <col:3, col:68> Text=" Retrieve a diagnostic associated with the given translation unit."
|   |-ParagraphComment 0x5555d4c07a60 <line:866:3>
|   | `-TextComment 0x5555d4c07a30 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c07a80 <col:4, line:867:3> [in] implicitly Param="Unit" ParamIndex=0
|   | `-ParagraphComment 0x5555d4c07b30 <line:866:15, line:867:3>
|   |   |-TextComment 0x5555d4c07ae0 <line:866:15, col:45> Text=" the translation unit to query."
|   |   `-TextComment 0x5555d4c07b00 <line:867:3> Text=" "
|   |-ParamCommandComment 0x5555d4c07b50 <col:4, col:61> [in] implicitly Param="Index" ParamIndex=1
|   | `-ParagraphComment 0x5555d4c07be0 <col:16, col:61>
|   |   `-TextComment 0x5555d4c07bb0 <col:16, col:61> Text=" the zero-based diagnostic number to retrieve."
|   |-ParagraphComment 0x5555d4c07c50 <line:869:3>
|   | `-TextComment 0x5555d4c07c20 <col:3> Text=" "
|   `-BlockCommandComment 0x5555d4c07c70 <col:4, line:871:1> Name="returns"
|     `-ParagraphComment 0x5555d4c07d80 <line:869:12, line:871:1>
|       |-TextComment 0x5555d4c07ca0 <line:869:12, col:67> Text=" the requested diagnostic. This diagnostic must be freed"
|       |-TextComment 0x5555d4c07cc0 <line:870:3, col:17> Text=" via a call to "
|       |-InlineCommandComment 0x5555d4c07d20 <col:18, col:19> Name="c" RenderMonospaced Arg[0]="clang_disposeDiagnostic()."
|       `-TextComment 0x5555d4c07d40 <line:871:1> Text=" "
|-FunctionDecl 0x5555d4b6f5b8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:882:52> col:1 clang_getDiagnosticSetFromTU 'CXDiagnosticSet (CXTranslationUnit)'
| |-ParmVarDecl 0x5555d4b6f4c8 <col:30, col:48> col:48 Unit 'CXTranslationUnit':'struct CXTranslationUnitImpl *'
| |-VisibilityAttr 0x5555d4b6f668 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c07fd0 </workspace/clang-c/Index.h:876:3, line:879:45>
|   |-ParagraphComment 0x5555d4c07e90 <line:876:3, line:877:27>
|   | |-TextComment 0x5555d4c07e40 <line:876:3, col:61> Text=" Retrieve the complete set of diagnostics associated with a"
|   | `-TextComment 0x5555d4c07e60 <line:877:3, col:27> Text="        translation unit."
|   |-ParagraphComment 0x5555d4c07ee0 <line:879:3>
|   | `-TextComment 0x5555d4c07eb0 <col:3> Text=" "
|   `-ParamCommandComment 0x5555d4c07f00 <col:4, col:45> [in] implicitly Param="Unit" ParamIndex=0
|     `-ParagraphComment 0x5555d4c07f90 <col:15, col:45>
|       `-TextComment 0x5555d4c07f60 <col:15, col:45> Text=" the translation unit to query."
|-FunctionDecl 0x5555d4b6f7d8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:887:68> col:21 clang_disposeDiagnostic 'void (CXDiagnostic)'
| |-ParmVarDecl 0x5555d4b6f718 <col:45, col:58> col:58 Diagnostic 'CXDiagnostic':'void *'
| |-VisibilityAttr 0x5555d4b6f888 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c080a0 </workspace/clang-c/Index.h:885:3, col:24>
|   `-ParagraphComment 0x5555d4c08070 <col:3, col:24>
|     `-TextComment 0x5555d4c08040 <col:3, col:24> Text=" Destroy a diagnostic."
|-EnumDecl 0x5555d4b6f908 <line:895:1, line:955:1> line:895:6 CXDiagnosticDisplayOptions
| |-FullComment 0x5555d4c08270 <line:890:3, line:894:1>
| | |-ParagraphComment 0x5555d4c08140 <line:890:3, col:49>
| | | `-TextComment 0x5555d4c08110 <col:3, col:49> Text=" Options to control the display of diagnostics."
| | `-ParagraphComment 0x5555d4c08240 <line:892:3, line:894:1>
| |   |-TextComment 0x5555d4c08160 <line:892:3, col:68> Text=" The values in this enum are meant to be combined to customize the"
| |   |-TextComment 0x5555d4c08180 <line:893:3, col:15> Text=" behavior of "
| |   |-InlineCommandComment 0x5555d4c081e0 <col:16, col:17> Name="c" RenderMonospaced Arg[0]="clang_formatDiagnostic()."
| |   `-TextComment 0x5555d4c08200 <line:894:1> Text=" "
| |-EnumConstantDecl 0x5555d4b6fa38 <line:909:3, col:40> col:3 CXDiagnostic_DisplaySourceLocation 'int'
| | |-ConstantExpr 0x5555d4b6fa18 <col:40> 'int'
| | | |-value: Int 1
| | | `-IntegerLiteral 0x5555d4b6f9f8 <col:40> 'int' 1
| | `-FullComment 0x5555d4c08590 <line:897:5, line:908:3>
| |   |-ParagraphComment 0x5555d4c08330 <line:897:5, line:898:28>
| |   | |-TextComment 0x5555d4c082e0 <line:897:5, col:54> Text=" Display the source-location information where the"
| |   | `-TextComment 0x5555d4c08300 <line:898:5, col:28> Text=" diagnostic was located."
| |   |-ParagraphComment 0x5555d4c083a0 <line:900:5, line:901:69>
| |   | |-TextComment 0x5555d4c08350 <line:900:5, col:66> Text=" When set, diagnostics will be prefixed by the file, line, and"
| |   | `-TextComment 0x5555d4c08370 <line:901:5, col:69> Text=" (optionally) column to which the diagnostic refers. For example,"
| |   |-ParagraphComment 0x5555d4c083f0 <line:903:5>
| |   | `-TextComment 0x5555d4c083c0 <col:5> Text=" "
| |   |-VerbatimBlockComment 0x5555d4c08410 <col:6, col:11> Name="code" CloseName="endcode"
| |   | `-VerbatimBlockLineComment 0x5555d4c08460 <line:904:5, col:65> Text=" test.c:28: warning: extra tokens at end of #endif directive"
| |   `-ParagraphComment 0x5555d4c08540 <line:907:5, line:908:3>
| |     |-TextComment 0x5555d4c08490 <line:907:5, col:47> Text=" This option corresponds to the clang flag "
| |     |-InlineCommandComment 0x5555d4c084e0 <col:48, col:49> Name="c" RenderMonospaced Arg[0]="-fshow-source-location."
| |     `-TextComment 0x5555d4c08500 <line:908:1, col:3> Text="   "
| |-EnumConstantDecl 0x5555d4b6faf8 <line:917:3, col:32> col:3 CXDiagnostic_DisplayColumn 'int'
| | |-ConstantExpr 0x5555d4b6fad8 <col:32> 'int'
| | | |-value: Int 2
| | | `-IntegerLiteral 0x5555d4b6fab8 <col:32> 'int' 2
| | `-FullComment 0x5555d4c08750 <line:912:5, line:916:3>
| |   |-ParagraphComment 0x5555d4c08650 <line:912:5, line:913:48>
| |   | |-TextComment 0x5555d4c08600 <line:912:5, col:57> Text=" If displaying the source-location information of the"
| |   | `-TextComment 0x5555d4c08620 <line:913:5, col:48> Text=" diagnostic, also include the column number."
| |   `-ParagraphComment 0x5555d4c08720 <line:915:5, line:916:3>
| |     |-TextComment 0x5555d4c08670 <line:915:5, col:47> Text=" This option corresponds to the clang flag "
| |     |-InlineCommandComment 0x5555d4c086c0 <col:48, col:49> Name="c" RenderMonospaced Arg[0]="-fshow-column."
| |     `-TextComment 0x5555d4c086e0 <line:916:1, col:3> Text="   "
| |-EnumConstantDecl 0x5555d4b70e30 <line:927:3, col:38> col:3 CXDiagnostic_DisplaySourceRanges 'int'
| | |-ConstantExpr 0x5555d4b70e10 <col:38> 'int'
| | | |-value: Int 4
| | | `-IntegerLiteral 0x5555d4b6fb78 <col:38> 'int' 4
| | `-FullComment 0x5555d4c08970 <line:920:5, line:926:3>
| |   |-ParagraphComment 0x5555d4c08840 <line:920:5, line:922:29>
| |   | |-TextComment 0x5555d4c087c0 <line:920:5, col:57> Text=" If displaying the source-location information of the"
| |   | |-TextComment 0x5555d4c087e0 <line:921:5, col:66> Text=" diagnostic, also include information about source ranges in a"
| |   | `-TextComment 0x5555d4c08800 <line:922:5, col:29> Text=" machine-parsable format."
| |   `-ParagraphComment 0x5555d4c08940 <line:924:5, line:926:3>
| |     |-TextComment 0x5555d4c08860 <line:924:5, col:46> Text=" This option corresponds to the clang flag"
| |     |-TextComment 0x5555d4c08880 <line:925:5> Text=" "
| |     |-InlineCommandComment 0x5555d4c088e0 <col:6, col:7> Name="c" RenderMonospaced Arg[0]="-fdiagnostics-print-source-range-info."
| |     `-TextComment 0x5555d4c08900 <line:926:1, col:3> Text="   "
| |-EnumConstantDecl 0x5555d4b70ee8 <line:936:3, col:32> col:3 CXDiagnostic_DisplayOption 'int'
| | |-ConstantExpr 0x5555d4b70ec8 <col:32> 'int'
| | | |-value: Int 8
| | | `-IntegerLiteral 0x5555d4b70ea8 <col:32> 'int' 8
| | `-FullComment 0x5555d4c08b70 <line:930:5, line:935:3>
| |   |-ParagraphComment 0x5555d4c08a10 <line:930:5, col:69>
| |   | `-TextComment 0x5555d4c089e0 <col:5, col:69> Text=" Display the option name associated with this diagnostic, if any."
| |   `-ParagraphComment 0x5555d4c08b40 <line:932:5, line:935:3>
| |     |-TextComment 0x5555d4c08a30 <line:932:5, col:78> Text=" The option name displayed (e.g., -Wconversion) will be placed in brackets"
| |     |-TextComment 0x5555d4c08a50 <line:933:5, col:73> Text=" after the diagnostic text. This option corresponds to the clang flag"
| |     |-TextComment 0x5555d4c08a70 <line:934:5> Text=" "
| |     |-InlineCommandComment 0x5555d4c08ad0 <col:6, col:7> Name="c" RenderMonospaced Arg[0]="-fdiagnostics-show-option."
| |     `-TextComment 0x5555d4c08af0 <line:935:1, col:3> Text="   "
| |-EnumConstantDecl 0x5555d4b70fa8 <line:945:3, col:36> col:3 CXDiagnostic_DisplayCategoryId 'int'
| | |-ConstantExpr 0x5555d4b70f88 <col:36> 'int'
| | | |-value: Int 16
| | | `-IntegerLiteral 0x5555d4b70f68 <col:36> 'int' 16
| | `-FullComment 0x5555d4c08d90 <line:939:5, line:944:3>
| |   |-ParagraphComment 0x5555d4c08c30 <line:939:5, col:73>
| |   | `-TextComment 0x5555d4c08be0 <col:5, col:73> Text=" Display the category number associated with this diagnostic, if any."
| |   `-ParagraphComment 0x5555d4c08d60 <line:941:5, line:944:3>
| |     |-TextComment 0x5555d4c08c50 <line:941:5, col:80> Text=" The category number is displayed within brackets after the diagnostic text."
| |     |-TextComment 0x5555d4c08c70 <line:942:5, col:46> Text=" This option corresponds to the clang flag"
| |     |-TextComment 0x5555d4c08c90 <line:943:5> Text=" "
| |     |-InlineCommandComment 0x5555d4c08cf0 <col:6, col:7> Name="c" RenderMonospaced Arg[0]="-fdiagnostics-show-category=id."
| |     `-TextComment 0x5555d4c08d10 <line:944:1, col:3> Text="   "
| `-EnumConstantDecl 0x5555d4b71068 <line:954:3, col:38> col:3 CXDiagnostic_DisplayCategoryName 'int'
|   |-ConstantExpr 0x5555d4b71048 <col:38> 'int'
|   | |-value: Int 32
|   | `-IntegerLiteral 0x5555d4b71028 <col:38> 'int' 32
|   `-FullComment 0x5555d4c08f90 <line:948:5, line:953:3>
|     |-ParagraphComment 0x5555d4c08e30 <line:948:5, col:71>
|     | `-TextComment 0x5555d4c08e00 <col:5, col:71> Text=" Display the category name associated with this diagnostic, if any."
|     `-ParagraphComment 0x5555d4c08f60 <line:950:5, line:953:3>
|       |-TextComment 0x5555d4c08e50 <line:950:5, col:78> Text=" The category name is displayed within brackets after the diagnostic text."
|       |-TextComment 0x5555d4c08e70 <line:951:5, col:46> Text=" This option corresponds to the clang flag"
|       |-TextComment 0x5555d4c08e90 <line:952:5> Text=" "
|       |-InlineCommandComment 0x5555d4c08ef0 <col:6, col:7> Name="c" RenderMonospaced Arg[0]="-fdiagnostics-show-category=name."
|       `-TextComment 0x5555d4c08f10 <line:953:1, col:3> Text="   "
|-FunctionDecl 0x5555d4b712a8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:973:64> line:972:25 clang_formatDiagnostic 'CXString (CXDiagnostic, unsigned int)'
| |-ParmVarDecl 0x5555d4b71118 <col:48, col:61> col:61 Diagnostic 'CXDiagnostic':'void *'
| |-ParmVarDecl 0x5555d4b71198 <line:973:48, col:57> col:57 Options 'unsigned int'
| |-VisibilityAttr 0x5555d4b71360 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c09560 </workspace/clang-c/Index.h:958:3, line:970:61>
|   |-ParagraphComment 0x5555d4c09030 <line:958:3, col:72>
|   | `-TextComment 0x5555d4c09000 <col:3, col:72> Text=" Format the given diagnostic in a manner that is suitable for display."
|   |-ParagraphComment 0x5555d4c09180 <line:960:3, line:963:71>
|   | |-TextComment 0x5555d4c09050 <line:960:3, col:71> Text=" This routine will format the given diagnostic to a string, rendering"
|   | |-TextComment 0x5555d4c09070 <line:961:3, col:61> Text=" the diagnostic according to the various options given. The"
|   | |-TextComment 0x5555d4c09090 <line:962:3> Text=" "
|   | |-InlineCommandComment 0x5555d4c090f0 <col:4, col:5> Name="c" RenderMonospaced Arg[0]="clang_defaultDiagnosticDisplayOptions()"
|   | |-TextComment 0x5555d4c09110 <col:46, col:73> Text=" function returns the set of"
|   | `-TextComment 0x5555d4c09130 <line:963:3, col:71> Text=" options that most closely mimics the behavior of the clang compiler."
|   |-ParagraphComment 0x5555d4c091d0 <line:965:3>
|   | `-TextComment 0x5555d4c091a0 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c091f0 <col:4, col:45> [in] implicitly Param="Diagnostic" ParamIndex=0
|   | `-ParagraphComment 0x5555d4c09280 <col:21, col:45>
|   |   `-TextComment 0x5555d4c09250 <col:21, col:45> Text=" The diagnostic to print."
|   |-ParagraphComment 0x5555d4c092d0 <line:967:3>
|   | `-TextComment 0x5555d4c092a0 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c092f0 <col:4, line:968:61> [in] implicitly Param="Options" ParamIndex=1
|   | `-ParagraphComment 0x5555d4c09430 <line:967:18, line:968:61>
|   |   |-TextComment 0x5555d4c09350 <line:967:18, col:71> Text=" A set of options that control the diagnostic display,"
|   |   |-TextComment 0x5555d4c09370 <line:968:3, col:24> Text=" created by combining "
|   |   |-InlineCommandComment 0x5555d4c093d0 <col:25, col:26> Name="c" RenderMonospaced Arg[0]="CXDiagnosticDisplayOptions"
|   |   `-TextComment 0x5555d4c093f0 <col:54, col:61> Text=" values."
|   |-ParagraphComment 0x5555d4c09480 <line:970:3>
|   | `-TextComment 0x5555d4c09450 <col:3> Text=" "
|   `-BlockCommandComment 0x5555d4c094a0 <col:4, col:61> Name="returns"
|     `-ParagraphComment 0x5555d4c09500 <col:12, col:61>
|       `-TextComment 0x5555d4c094d0 <col:12, col:61> Text=" A new string containing for formatted diagnostic."
|-FunctionDecl 0x5555d4b714d0 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:982:67> col:25 clang_defaultDiagnosticDisplayOptions 'unsigned int (void)'
| |-VisibilityAttr 0x5555d4b71578 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c097c0 </workspace/clang-c/Index.h:976:3, line:981:1>
|   |-ParagraphComment 0x5555d4c09620 <line:976:3, line:977:42>
|   | |-TextComment 0x5555d4c095d0 <line:976:3, col:58> Text=" Retrieve the set of display options most similar to the"
|   | `-TextComment 0x5555d4c095f0 <line:977:3, col:42> Text=" default behavior of the clang compiler."
|   |-ParagraphComment 0x5555d4c09670 <line:979:3>
|   | `-TextComment 0x5555d4c09640 <col:3> Text=" "
|   `-BlockCommandComment 0x5555d4c09690 <col:4, line:981:1> Name="returns"
|     `-ParagraphComment 0x5555d4c09780 <line:979:12, line:981:1>
|       |-TextComment 0x5555d4c096c0 <line:979:12, col:59> Text=" A set of display options suitable for use with "
|       |-InlineCommandComment 0x5555d4c09720 <col:60, col:61> Name="c" RenderMonospaced Arg[0]="clang_formatDiagnostic()."
|       `-TextComment 0x5555d4c09740 <line:981:1> Text=" "
|-FunctionDecl 0x5555d4b71758 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:988:45> col:5 clang_getDiagnosticSeverity 'enum CXDiagnosticSeverity (CXDiagnostic)'
| |-ParmVarDecl 0x5555d4b71628 <col:33> col:45 'CXDiagnostic':'void *'
| |-VisibilityAttr 0x5555d4b71808 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c09890 </workspace/clang-c/Index.h:985:3, col:50>
|   `-ParagraphComment 0x5555d4c09860 <col:3, col:50>
|     `-TextComment 0x5555d4c09830 <col:3, col:50> Text=" Determine the severity of the given diagnostic."
|-FunctionDecl 0x5555d4b719a8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:996:73> col:33 clang_getDiagnosticLocation 'CXSourceLocation (CXDiagnostic)'
| |-ParmVarDecl 0x5555d4b718b8 <col:61> col:73 'CXDiagnostic':'void *'
| |-VisibilityAttr 0x5555d4b71a58 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c099d0 </workspace/clang-c/Index.h:991:3, line:994:49>
|   |-ParagraphComment 0x5555d4c09930 <line:991:3, col:56>
|   | `-TextComment 0x5555d4c09900 <col:3, col:56> Text=" Retrieve the source location of the given diagnostic."
|   `-ParagraphComment 0x5555d4c099a0 <line:993:3, line:994:49>
|     |-TextComment 0x5555d4c09950 <line:993:3, col:64> Text=" This location is where Clang would print the caret ('^') when"
|     `-TextComment 0x5555d4c09970 <line:994:3, col:49> Text=" displaying the diagnostic on the command line."
|-FunctionDecl 0x5555d4b71bc8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:1001:65> col:25 clang_getDiagnosticSpelling 'CXString (CXDiagnostic)'
| |-ParmVarDecl 0x5555d4b71b08 <col:53> col:65 'CXDiagnostic':'void *'
| |-VisibilityAttr 0x5555d4b71c78 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c09aa0 </workspace/clang-c/Index.h:999:3, col:45>
|   `-ParagraphComment 0x5555d4c09a70 <col:3, col:45>
|     `-TextComment 0x5555d4c09a40 <col:3, col:45> Text=" Retrieve the text of the given diagnostic."
|-FunctionDecl 0x5555d4b72108 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:1016:68> line:1015:25 clang_getDiagnosticOption 'CXString (CXDiagnostic, CXString *)'
| |-ParmVarDecl 0x5555d4b71d28 <col:51, col:64> col:64 Diag 'CXDiagnostic':'void *'
| |-ParmVarDecl 0x5555d4b71da8 <line:1016:51, col:61> col:61 Disable 'CXString *'
| |-VisibilityAttr 0x5555d4b721c0 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c09ee0 </workspace/clang-c/Index.h:1004:3, line:1013:50>
|   |-ParagraphComment 0x5555d4c09b60 <line:1004:3, line:1005:14>
|   | |-TextComment 0x5555d4c09b10 <line:1004:3, col:65> Text=" Retrieve the name of the command-line option that enabled this"
|   | `-TextComment 0x5555d4c09b30 <line:1005:3, col:14> Text=" diagnostic."
|   |-ParagraphComment 0x5555d4c09bb0 <line:1007:3>
|   | `-TextComment 0x5555d4c09b80 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c09bd0 <col:4, col:44> [in] implicitly Param="Diag" ParamIndex=0
|   | `-ParagraphComment 0x5555d4c09c70 <col:15, col:44>
|   |   `-TextComment 0x5555d4c09c40 <col:15, col:44> Text=" The diagnostic to be queried."
|   |-ParagraphComment 0x5555d4c09cc0 <line:1009:3>
|   | `-TextComment 0x5555d4c09c90 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c09ce0 <col:4, line:1010:23> [in] implicitly Param="Disable" ParamIndex=1
|   | `-ParagraphComment 0x5555d4c09d90 <line:1009:18, line:1010:23>
|   |   |-TextComment 0x5555d4c09d40 <line:1009:18, col:75> Text=" If non-NULL, will be set to the option that disables this"
|   |   `-TextComment 0x5555d4c09d60 <line:1010:3, col:23> Text=" diagnostic (if any)."
|   |-ParagraphComment 0x5555d4c09de0 <line:1012:3>
|   | `-TextComment 0x5555d4c09db0 <col:3> Text=" "
|   `-BlockCommandComment 0x5555d4c09e00 <col:4, line:1013:50> Name="returns"
|     `-ParagraphComment 0x5555d4c09e80 <line:1012:12, line:1013:50>
|       |-TextComment 0x5555d4c09e30 <line:1012:12, col:78> Text=" A string that contains the command-line option used to enable this"
|       `-TextComment 0x5555d4c09e50 <line:1013:3, col:50> Text=" warning, such as "-Wconversion" or "-pedantic"."
|-FunctionDecl 0x5555d4b72340 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:1028:65> col:25 clang_getDiagnosticCategory 'unsigned int (CXDiagnostic)'
| |-ParmVarDecl 0x5555d4b72278 <col:53> col:65 'CXDiagnostic':'void *'
| |-VisibilityAttr 0x5555d4b723f0 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c0a150 </workspace/clang-c/Index.h:1019:3, line:1026:39>
|   |-ParagraphComment 0x5555d4c09f80 <line:1019:3, col:52>
|   | `-TextComment 0x5555d4c09f50 <col:3, col:52> Text=" Retrieve the category number for this diagnostic."
|   |-ParagraphComment 0x5555d4c0a020 <line:1021:3, line:1023:58>
|   | |-TextComment 0x5555d4c09fa0 <line:1021:3, col:71> Text=" Diagnostics can be categorized into groups along with other, related"
|   | |-TextComment 0x5555d4c09fc0 <line:1022:3, col:76> Text=" diagnostics (e.g., diagnostics under the same warning flag). This routine"
|   | `-TextComment 0x5555d4c09fe0 <line:1023:3, col:58> Text=" retrieves the category number for the given diagnostic."
|   |-ParagraphComment 0x5555d4c0a070 <line:1025:3>
|   | `-TextComment 0x5555d4c0a040 <col:3> Text=" "
|   `-BlockCommandComment 0x5555d4c0a090 <col:4, line:1026:39> Name="returns"
|     `-ParagraphComment 0x5555d4c0a110 <line:1025:12, line:1026:39>
|       |-TextComment 0x5555d4c0a0c0 <line:1025:12, col:77> Text=" The number of the category that contains this diagnostic, or zero"
|       `-TextComment 0x5555d4c0a0e0 <line:1026:3, col:39> Text=" if this diagnostic is uncategorized."
|-FunctionDecl 0x5555d4b725a8 </workspace/clang-c/Platform.h:42:29, /workspace/clang-c/Index.h:1041:50> col:1 clang_getDiagnosticCategoryName 'CXString (unsigned int)'
| |-ParmVarDecl 0x5555d4b724b0 <col:33, col:42> col:42 Category 'unsigned int'
| |-DeprecatedAttr 0x5555d4b72658 </workspace/clang-c/Platform.h:42:44> "" ""
| |-VisibilityAttr 0x5555d4b726c8 <line:34:41, col:61> Default
| `-FullComment 0x5555d4c0a4f0 </workspace/clang-c/Index.h:1031:3, line:1038:54>
|   |-ParagraphComment 0x5555d4c0a240 <line:1031:3, line:1033:12>
|   | |-TextComment 0x5555d4c0a1c0 <line:1031:3, col:63> Text=" Retrieve the name of a particular diagnostic category.  This"
|   | |-TextComment 0x5555d4c0a1e0 <line:1032:3, col:61> Text="  is now deprecated.  Use clang_getDiagnosticCategoryText()"
|   | `-TextComment 0x5555d4c0a200 <line:1033:3, col:12> Text="  instead."
|   |-ParagraphComment 0x5555d4c0a290 <line:1035:3>
|   | `-TextComment 0x5555d4c0a260 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c0a2b0 <col:4, line:1036:5> [in] implicitly Param="Category" ParamIndex=0
|   | `-ParagraphComment 0x5555d4c0a3d0 <line:1035:19, line:1036:5>
|   |   |-TextComment 0x5555d4c0a310 <line:1035:19, col:63> Text=" A diagnostic category number, as returned by"
|   |   |-TextComment 0x5555d4c0a330 <line:1036:3> Text=" "
|   |   `-InlineCommandComment 0x5555d4c0a390 <col:4, col:5> Name="c" RenderMonospaced Arg[0]="clang_getDiagnosticCategory()."
|   |-ParagraphComment 0x5555d4c0a420 <line:1038:3>
|   | `-TextComment 0x5555d4c0a3f0 <col:3> Text=" "
|   `-BlockCommandComment 0x5555d4c0a440 <col:4, col:54> Name="returns"
|     `-ParagraphComment 0x5555d4c0a4a0 <col:12, col:54>
|       `-TextComment 0x5555d4c0a470 <col:12, col:54> Text=" The name of the given diagnostic category."
|-FunctionDecl 0x5555d4b727d8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:1048:69> col:25 clang_getDiagnosticCategoryText 'CXString (CXDiagnostic)'
| |-ParmVarDecl 0x5555d4b72748 <col:57> col:69 'CXDiagnostic':'void *'
| |-VisibilityAttr 0x5555d4b72888 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c0a6a0 </workspace/clang-c/Index.h:1044:3, line:1046:54>
|   |-ParagraphComment 0x5555d4c0a590 <line:1044:3, col:64>
|   | `-TextComment 0x5555d4c0a560 <col:3, col:64> Text=" Retrieve the diagnostic category text for a given diagnostic."
|   |-ParagraphComment 0x5555d4c0a5e0 <line:1046:3>
|   | `-TextComment 0x5555d4c0a5b0 <col:3> Text=" "
|   `-BlockCommandComment 0x5555d4c0a600 <col:4, col:54> Name="returns"
|     `-ParagraphComment 0x5555d4c0a660 <col:12, col:54>
|       `-TextComment 0x5555d4c0a630 <col:12, col:54> Text=" The text of the given diagnostic category."
|-FunctionDecl 0x5555d4b729d0 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:1054:66> col:25 clang_getDiagnosticNumRanges 'unsigned int (CXDiagnostic)'
| |-ParmVarDecl 0x5555d4b72938 <col:54> col:66 'CXDiagnostic':'void *'
| |-VisibilityAttr 0x5555d4b72a80 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c0a790 </workspace/clang-c/Index.h:1051:3, line:1052:14>
|   `-ParagraphComment 0x5555d4c0a760 <line:1051:3, line:1052:14>
|     |-TextComment 0x5555d4c0a710 <line:1051:3, col:66> Text=" Determine the number of source ranges associated with the given"
|     `-TextComment 0x5555d4c0a730 <line:1052:3, col:14> Text=" diagnostic."
|-FunctionDecl 0x5555d4b72cc8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:1070:69> line:1069:30 clang_getDiagnosticRange 'CXSourceRange (CXDiagnostic, unsigned int)'
| |-ParmVarDecl 0x5555d4b72b38 <col:55, col:68> col:68 Diagnostic 'CXDiagnostic':'void *'
| |-ParmVarDecl 0x5555d4b72bb8 <line:1070:55, col:64> col:64 Range 'unsigned int'
| |-VisibilityAttr 0x5555d4b72d80 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c0ac00 </workspace/clang-c/Index.h:1057:3, line:1067:39>
|   |-ParagraphComment 0x5555d4c0a830 <line:1057:3, col:58>
|   | `-TextComment 0x5555d4c0a800 <col:3, col:58> Text=" Retrieve a source range associated with the diagnostic."
|   |-ParagraphComment 0x5555d4c0a8d0 <line:1059:3, line:1061:40>
|   | |-TextComment 0x5555d4c0a850 <line:1059:3, col:74> Text=" A diagnostic's source ranges highlight important elements in the source"
|   | |-TextComment 0x5555d4c0a870 <line:1060:3, col:61> Text=" code. On the command line, Clang displays source ranges by"
|   | `-TextComment 0x5555d4c0a890 <line:1061:3, col:40> Text=" underlining them with '~' characters."
|   |-ParagraphComment 0x5555d4c0a920 <line:1063:3>
|   | `-TextComment 0x5555d4c0a8f0 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c0a940 <col:4, col:67> [in] implicitly Param="Diagnostic" ParamIndex=0
|   | `-ParagraphComment 0x5555d4c0a9d0 <col:21, col:67>
|   |   `-TextComment 0x5555d4c0a9a0 <col:21, col:67> Text=" the diagnostic whose range is being extracted."
|   |-ParagraphComment 0x5555d4c0aa20 <line:1065:3>
|   | `-TextComment 0x5555d4c0a9f0 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c0aa40 <col:4, col:62> [in] implicitly Param="Range" ParamIndex=1
|   | `-ParagraphComment 0x5555d4c0aad0 <col:16, col:62>
|   |   `-TextComment 0x5555d4c0aaa0 <col:16, col:62> Text=" the zero-based index specifying which range to"
|   |-ParagraphComment 0x5555d4c0ab20 <line:1067:3>
|   | `-TextComment 0x5555d4c0aaf0 <col:3> Text=" "
|   `-BlockCommandComment 0x5555d4c0ab40 <col:4, col:39> Name="returns"
|     `-ParagraphComment 0x5555d4c0aba0 <col:12, col:39>
|       `-TextComment 0x5555d4c0ab70 <col:12, col:39> Text=" the requested source range."
|-FunctionDecl 0x5555d4b72ed0 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:1076:77> col:25 clang_getDiagnosticNumFixIts 'unsigned int (CXDiagnostic)'
| |-ParmVarDecl 0x5555d4b72e38 <col:54, col:67> col:67 Diagnostic 'CXDiagnostic':'void *'
| |-VisibilityAttr 0x5555d4b72f80 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c0ad10 </workspace/clang-c/Index.h:1073:3, line:1074:20>
|   `-ParagraphComment 0x5555d4c0ace0 <line:1073:3, line:1074:20>
|     |-TextComment 0x5555d4c0ac90 <line:1073:3, col:59> Text=" Determine the number of fix-it hints associated with the"
|     `-TextComment 0x5555d4c0acb0 <line:1074:3, col:20> Text=" given diagnostic."
|-FunctionDecl 0x5555d4b74368 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:1104:77> line:1103:25 clang_getDiagnosticFixIt 'CXString (CXDiagnostic, unsigned int, CXSourceRange *)'
| |-ParmVarDecl 0x5555d4b74140 <line:1104:5, col:18> col:18 Diagnostic 'CXDiagnostic':'void *'
| |-ParmVarDecl 0x5555d4b741c0 <col:30, col:39> col:39 FixIt 'unsigned int'
| |-ParmVarDecl 0x5555d4b74240 <col:46, col:61> col:61 ReplacementRange 'CXSourceRange *'
| |-VisibilityAttr 0x5555d4b74428 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c0b4a0 </workspace/clang-c/Index.h:1079:3, line:1102:1>
|   |-ParagraphComment 0x5555d4c0adb0 <line:1079:3, col:59>
|   | `-TextComment 0x5555d4c0ad80 <col:3, col:59> Text=" Retrieve the replacement information for a given fix-it."
|   |-ParagraphComment 0x5555d4c0af40 <line:1081:3, line:1089:11>
|   | |-TextComment 0x5555d4c0add0 <line:1081:3, col:66> Text=" Fix-its are described in terms of a source range whose contents"
|   | |-TextComment 0x5555d4c0adf0 <line:1082:3, col:65> Text=" should be replaced by a string. This approach generalizes over"
|   | |-TextComment 0x5555d4c0ae10 <line:1083:3, col:70> Text=" three kinds of operations: removal of source code (the range covers"
|   | |-TextComment 0x5555d4c0ae30 <line:1084:3, col:63> Text=" the code to be removed and the replacement string is empty),"
|   | |-TextComment 0x5555d4c0ae50 <line:1085:3, col:62> Text=" replacement of source code (the range covers the code to be"
|   | |-TextComment 0x5555d4c0ae70 <line:1086:3, col:66> Text=" replaced and the replacement string provides the new code), and"
|   | |-TextComment 0x5555d4c0ae90 <line:1087:3, col:62> Text=" insertion (both the start and end of the range point at the"
|   | |-TextComment 0x5555d4c0aeb0 <line:1088:3, col:70> Text=" insertion location, and the replacement string provides the text to"
|   | `-TextComment 0x5555d4c0aed0 <line:1089:3, col:11> Text=" insert)."
|   |-ParagraphComment 0x5555d4c0af90 <line:1091:3>
|   | `-TextComment 0x5555d4c0af60 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c0afb0 <col:4, col:68> [in] implicitly Param="Diagnostic" ParamIndex=0
|   | `-ParagraphComment 0x5555d4c0b040 <col:21, col:68>
|   |   `-TextComment 0x5555d4c0b010 <col:21, col:68> Text=" The diagnostic whose fix-its are being queried."
|   |-ParagraphComment 0x5555d4c0b090 <line:1093:3>
|   | `-TextComment 0x5555d4c0b060 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c0b0b0 <col:4, col:51> [in] implicitly Param="FixIt" ParamIndex=1
|   | `-ParagraphComment 0x5555d4c0b140 <col:16, col:51>
|   |   `-TextComment 0x5555d4c0b110 <col:16, col:51> Text=" The zero-based index of the fix-it."
|   |-ParagraphComment 0x5555d4c0b190 <line:1095:3>
|   | `-TextComment 0x5555d4c0b160 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c0b1b0 <col:4, line:1098:51> [in] implicitly Param="ReplacementRange" ParamIndex=2
|   | `-ParagraphComment 0x5555d4c0b2c0 <line:1095:27, line:1098:51>
|   |   |-TextComment 0x5555d4c0b220 <line:1095:27, col:66> Text=" The source range whose contents will be"
|   |   |-TextComment 0x5555d4c0b240 <line:1096:3, col:66> Text=" replaced with the returned replacement string. Note that source"
|   |   |-TextComment 0x5555d4c0b260 <line:1097:3, col:67> Text=" ranges are half-open ranges [a, b), so the source code should be"
|   |   `-TextComment 0x5555d4c0b280 <line:1098:3, col:51> Text=" replaced from a and up to (but not including) b."
|   |-ParagraphComment 0x5555d4c0b310 <line:1100:3>
|   | `-TextComment 0x5555d4c0b2e0 <col:3> Text=" "
|   `-BlockCommandComment 0x5555d4c0b330 <col:4, line:1102:1> Name="returns"
|     `-ParagraphComment 0x5555d4c0b430 <line:1100:12, line:1102:1>
|       |-TextComment 0x5555d4c0b360 <line:1100:12, col:70> Text=" A string containing text that should be replace the source"
|       |-TextComment 0x5555d4c0b380 <line:1101:3, col:25> Text=" code indicated by the "
|       |-InlineCommandComment 0x5555d4c0b3d0 <col:26, col:27> Name="c" RenderMonospaced Arg[0]="ReplacementRange."
|       `-TextComment 0x5555d4c0b3f0 <line:1102:1> Text=" "
|-FunctionDecl 0x5555d4b74628 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:1124:58> col:1 clang_getTranslationUnitSpelling 'CXString (CXTranslationUnit)'
| |-ParmVarDecl 0x5555d4b74538 <col:34, col:52> col:52 CTUnit 'CXTranslationUnit':'struct CXTranslationUnitImpl *'
| |-VisibilityAttr 0x5555d4b746d8 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c0b570 </workspace/clang-c/Index.h:1121:3, col:54>
|   `-ParagraphComment 0x5555d4c0b540 <col:3, col:54>
|     `-TextComment 0x5555d4c0b510 <col:3, col:54> Text=" Get the original translation unit source file name."
|-FunctionDecl 0x5555d4b74c48 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:1169:40> line:1166:34 clang_createTranslationUnitFromSourceFile 'CXTranslationUnit (CXIndex, const char *, int, const char *const *, unsigned int, struct CXUnsavedFile *)'
| |-ParmVarDecl 0x5555d4b74788 <line:1167:5, col:13> col:13 CIdx 'CXIndex':'void *'
| |-ParmVarDecl 0x5555d4b74808 <col:19, col:31> col:31 source_filename 'const char *'
| |-ParmVarDecl 0x5555d4b74888 <col:48, col:52> col:52 num_clang_command_line_args 'int'
| |-ParmVarDecl 0x5555d4b74930 <line:1168:5, col:24> col:24 clang_command_line_args 'const char *const *'
| |-ParmVarDecl 0x5555d4b749b0 <col:49, col:58> col:58 num_unsaved_files 'unsigned int'
| |-ParmVarDecl 0x5555d4b74ad0 <line:1169:5, col:27> col:27 unsaved_files 'struct CXUnsavedFile *'
| |-VisibilityAttr 0x5555d4b74d20 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c0c310 </workspace/clang-c/Index.h:1127:3, line:1164:68>
|   |-ParagraphComment 0x5555d4c0b630 <line:1127:3, line:1128:57>
|   | |-TextComment 0x5555d4c0b5e0 <line:1127:3, col:72> Text=" Return the CXTranslationUnit for a given source file and the provided"
|   | `-TextComment 0x5555d4c0b600 <line:1128:3, col:57> Text=" command line arguments one would pass to the compiler."
|   |-ParagraphComment 0x5555d4c0b6d0 <line:1130:3, line:1132:36>
|   | |-TextComment 0x5555d4c0b650 <line:1130:3, col:78> Text=" Note: The 'source_filename' argument is optional.  If the caller provides a"
|   | |-TextComment 0x5555d4c0b670 <line:1131:3, col:73> Text=" NULL pointer, the name of the source file is expected to reside in the"
|   | `-TextComment 0x5555d4c0b690 <line:1132:3, col:36> Text=" specified command line arguments."
|   |-ParagraphComment 0x5555d4c0b740 <line:1134:3, line:1135:15>
|   | |-TextComment 0x5555d4c0b6f0 <line:1134:3, col:77> Text=" Note: When encountered in 'clang_command_line_args', the following options"
|   | `-TextComment 0x5555d4c0b710 <line:1135:3, col:15> Text=" are ignored:"
|   |-ParagraphComment 0x5555d4c0b8a0 <line:1137:3, line:1140:70>
|   | |-TextComment 0x5555d4c0b760 <line:1137:3, col:9> Text="   '-c'"
|   | |-TextComment 0x5555d4c0b780 <line:1138:3, col:16> Text="   '-emit-ast'"
|   | |-TextComment 0x5555d4c0b7a0 <line:1139:3, col:20> Text="   '-fsyntax-only'"
|   | |-TextComment 0x5555d4c0b7c0 <line:1140:3, col:9> Text="   '-o "
|   | |-TextComment 0x5555d4c0b7e0 <col:10, col:11> Text="<"
|   | |-TextComment 0x5555d4c0b800 <col:12, col:42> Text="output file>'  (both '-o' and '"
|   | |-TextComment 0x5555d4c0b820 <col:43, col:44> Text="<"
|   | `-TextComment 0x5555d4c0b840 <col:45, col:70> Text="output file>' are ignored)"
|   |-ParagraphComment 0x5555d4c0b8f0 <line:1142:3>
|   | `-TextComment 0x5555d4c0b8c0 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c0b910 <col:4, line:1143:14> [in] implicitly Param="CIdx" ParamIndex=0
|   | `-ParagraphComment 0x5555d4c0b9c0 <line:1142:15, line:1143:14>
|   |   |-TextComment 0x5555d4c0b970 <line:1142:15, col:71> Text=" The index object with which the translation unit will be"
|   |   `-TextComment 0x5555d4c0b990 <line:1143:3, col:14> Text=" associated."
|   |-ParagraphComment 0x5555d4c0ba10 <line:1145:3>
|   | `-TextComment 0x5555d4c0b9e0 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c0ba30 <col:4, line:1146:32> [in] implicitly Param="source_filename" ParamIndex=1
|   | `-ParagraphComment 0x5555d4c0bb50 <line:1145:26, line:1146:32>
|   |   |-TextComment 0x5555d4c0ba90 <line:1145:26, col:77> Text=" The name of the source file to load, or NULL if the"
|   |   |-TextComment 0x5555d4c0bab0 <line:1146:3, col:30> Text=" source file is included in "
|   |   `-InlineCommandComment 0x5555d4c0bb10 <col:31, col:32> Name="p" RenderMonospaced Arg[0]="clang_command_line_args."
|   |-ParagraphComment 0x5555d4c0bba0 <line:1148:3>
|   | `-TextComment 0x5555d4c0bb70 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c0bbc0 <col:4, line:1149:5> [in] implicitly Param="num_clang_command_line_args" ParamIndex=2
|   | `-ParagraphComment 0x5555d4c0bd00 <line:1148:38, line:1149:5>
|   |   |-TextComment 0x5555d4c0bc30 <line:1148:38, col:77> Text=" The number of command-line arguments in"
|   |   |-TextComment 0x5555d4c0bc60 <line:1149:3> Text=" "
|   |   `-InlineCommandComment 0x5555d4c0bcc0 <col:4, col:5> Name="p" RenderMonospaced Arg[0]="clang_command_line_args."
|   |-ParagraphComment 0x5555d4c0bd50 <line:1151:3>
|   | `-TextComment 0x5555d4c0bd20 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c0bd70 <col:4, line:1155:80> [in] implicitly Param="clang_command_line_args" ParamIndex=3
|   | `-ParagraphComment 0x5555d4c0bf70 <line:1151:34, line:1155:80>
|   |   |-TextComment 0x5555d4c0bde0 <line:1151:34, col:74> Text=" The command-line arguments that would be"
|   |   |-TextComment 0x5555d4c0be00 <line:1152:3, col:17> Text=" passed to the "
|   |   |-InlineCommandComment 0x5555d4c0be40 <col:18, col:19> Name="c" RenderMonospaced Arg[0]="clang"
|   |   |-TextComment 0x5555d4c0be60 <col:26, col:77> Text=" executable if it were being invoked out-of-process."
|   |   |-TextComment 0x5555d4c0be80 <line:1153:3, col:80> Text=" These command-line options will be parsed and will affect how the translation"
|   |   |-TextComment 0x5555d4c0bea0 <line:1154:3, col:69> Text=" unit is parsed. Note that the following options are ignored: '-c',"
|   |   |-TextComment 0x5555d4c0bec0 <line:1155:3, col:64> Text=" '-emit-ast', '-fsyntax-only' (which is the default), and '-o "
|   |   |-TextComment 0x5555d4c0bee0 <col:65, col:66> Text="<"
|   |   `-TextComment 0x5555d4c0bf00 <col:67, col:80> Text="output file>'."
|   |-ParagraphComment 0x5555d4c0bfc0 <line:1157:3>
|   | `-TextComment 0x5555d4c0bf90 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c0bfe0 <col:4, col:68> [in] implicitly Param="num_unsaved_files" ParamIndex=4
|   | `-ParagraphComment 0x5555d4c0c0d0 <col:28, col:68>
|   |   |-TextComment 0x5555d4c0c050 <col:28, col:66> Text=" the number of unsaved file entries in "
|   |   `-InlineCommandComment 0x5555d4c0c0a0 <col:67, col:68> Name="p" RenderMonospaced Arg[0]="unsaved_files."
|   |-ParagraphComment 0x5555d4c0c120 <line:1160:3>
|   | `-TextComment 0x5555d4c0c0f0 <col:3> Text=" "
|   `-ParamCommandComment 0x5555d4c0c140 <col:4, line:1164:68> [in] implicitly Param="unsaved_files" ParamIndex=5
|     `-ParagraphComment 0x5555d4c0c270 <line:1160:24, line:1164:68>
|       |-TextComment 0x5555d4c0c1a0 <line:1160:24, col:70> Text=" the files that have not yet been saved to disk"
|       |-TextComment 0x5555d4c0c1c0 <line:1161:3, col:69> Text=" but may be required for code completion, including the contents of"
|       |-TextComment 0x5555d4c0c1e0 <line:1162:3, col:70> Text=" those files.  The contents and name of these files (as specified by"
|       |-TextComment 0x5555d4c0c200 <line:1163:3, col:72> Text=" CXUnsavedFile) are copied when necessary, so the client only needs to"
|       `-TextComment 0x5555d4c0c220 <line:1164:3, col:68> Text=" guarantee their validity until the call to this function returns."
|-FunctionDecl 0x5555d4b74f68 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:1178:67> col:1 clang_createTranslationUnit 'CXTranslationUnit (CXIndex, const char *)'
| |-ParmVarDecl 0x5555d4b74dd8 <col:29, col:37> col:37 CIdx 'CXIndex':'void *'
| |-ParmVarDecl 0x5555d4b74e58 <col:43, col:55> col:55 ast_filename 'const char *'
| |-VisibilityAttr 0x5555d4b75020 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c0c650 </workspace/clang-c/Index.h:1172:3, line:1175:15>
|   `-ParagraphComment 0x5555d4c0c620 <line:1172:3, line:1175:15>
|     |-TextComment 0x5555d4c0c380 <line:1172:3, col:11> Text=" Same as "
|     |-InlineCommandComment 0x5555d4c0c3e0 <col:12, col:13> Name="c" RenderMonospaced Arg[0]="clang_createTranslationUnit2,"
|     |-TextComment 0x5555d4c0c400 <col:44, col:55> Text=" but returns"
|     |-TextComment 0x5555d4c0c420 <line:1173:3, col:7> Text=" the "
|     |-InlineCommandComment 0x5555d4c0c470 <col:8, col:9> Name="c" RenderMonospaced Arg[0]="CXTranslationUnit"
|     |-TextComment 0x5555d4c0c490 <col:28, col:79> Text=" instead of an error code.  In case of an error this"
|     |-TextComment 0x5555d4c0c4b0 <line:1174:3, col:21> Text=" routine returns a "
|     |-InlineCommandComment 0x5555d4c0c4f0 <col:22, col:23> Name="c" RenderMonospaced Arg[0]="NULL"
|     |-TextComment 0x5555d4c0c510 <col:29> Text=" "
|     |-InlineCommandComment 0x5555d4c0c560 <col:30, col:31> Name="c" RenderMonospaced Arg[0]="CXTranslationUnit,"
|     |-TextComment 0x5555d4c0c580 <col:51, col:75> Text=" without further detailed"
|     `-TextComment 0x5555d4c0c5a0 <line:1175:3, col:15> Text=" error codes."
|-FunctionDecl 0x5555d4b75378 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:1190:55> line:1189:1 clang_createTranslationUnit2 'enum CXErrorCode (CXIndex, const char *, CXTranslationUnit *)'
| |-ParmVarDecl 0x5555d4b750d8 <col:30, col:38> col:38 CIdx 'CXIndex':'void *'
| |-ParmVarDecl 0x5555d4b75168 <col:44, col:56> col:56 ast_filename 'const char *'
| |-ParmVarDecl 0x5555d4b75240 <line:1190:30, col:49> col:49 out_TU 'CXTranslationUnit *'
| |-VisibilityAttr 0x5555d4b75438 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c0c9e0 </workspace/clang-c/Index.h:1181:3, line:1186:61>
|   |-ParagraphComment 0x5555d4c0c740 <line:1181:3, col:49>
|   | |-TextComment 0x5555d4c0c6c0 <col:3, col:47> Text=" Create a translation unit from an AST file ("
|   | `-InlineCommandComment 0x5555d4c0c710 <col:48, col:49> Name="c" RenderMonospaced Arg[0]="-emit-ast)."
|   |-ParagraphComment 0x5555d4c0c790 <line:1183:3>
|   | `-TextComment 0x5555d4c0c760 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c0c7b0 <col:4, line:1184:5> [out] explicitly Param="out_TU" ParamIndex=2
|   | `-ParagraphComment 0x5555d4c0c8c0 <line:1183:22, line:1184:5>
|   |   |-TextComment 0x5555d4c0c810 <line:1183:22, col:61> Text=" A non-NULL pointer to store the created"
|   |   |-TextComment 0x5555d4c0c830 <line:1184:3> Text=" "
|   |   `-InlineCommandComment 0x5555d4c0c880 <col:4, col:5> Name="c" RenderMonospaced Arg[0]="CXTranslationUnit."
|   |-ParagraphComment 0x5555d4c0c910 <line:1186:3>
|   | `-TextComment 0x5555d4c0c8e0 <col:3> Text=" "
|   `-BlockCommandComment 0x5555d4c0c930 <col:4, col:61> Name="returns"
|     `-ParagraphComment 0x5555d4c0c990 <col:12, col:61>
|       `-TextComment 0x5555d4c0c960 <col:12, col:61> Text=" Zero on success, otherwise returns an error code."
|-EnumDecl 0x5555d4b754b8 <line:1199:1, line:1346:1> line:1199:6 CXTranslationUnit_Flags
| |-FullComment 0x5555d4c0cb50 <line:1193:3, line:1197:37>
| | |-ParagraphComment 0x5555d4c0ca80 <line:1193:3, col:56>
| | | `-TextComment 0x5555d4c0ca50 <col:3, col:56> Text=" Flags that control the creation of translation units."
| | `-ParagraphComment 0x5555d4c0cb20 <line:1195:3, line:1197:37>
| |   |-TextComment 0x5555d4c0caa0 <line:1195:3, col:67> Text=" The enumerators in this enumeration type are meant to be bitwise"
| |   |-TextComment 0x5555d4c0cac0 <line:1196:3, col:61> Text=" ORed together to specify which options should be used when"
| |   `-TextComment 0x5555d4c0cae0 <line:1197:3, col:37> Text=" constructing the translation unit."
| |-EnumConstantDecl 0x5555d4b755e8 <line:1204:3, col:28> col:3 CXTranslationUnit_None 'int'
| | |-ConstantExpr 0x5555d4b755c8 <col:28> 'int'
| | | |-value: Int 0
| | | `-IntegerLiteral 0x5555d4b755a8 <col:28> 'int' 0
| | `-FullComment 0x5555d4c0cc40 <line:1201:5, line:1202:12>
| |   `-ParagraphComment 0x5555d4c0cc10 <line:1201:5, line:1202:12>
| |     |-TextComment 0x5555d4c0cbc0 <line:1201:5, col:66> Text=" Used to indicate that no special translation-unit options are"
| |     `-TextComment 0x5555d4c0cbe0 <line:1202:5, col:12> Text=" needed."
| |-EnumConstantDecl 0x5555d4b756a8 <line:1216:3, col:51> col:3 CXTranslationUnit_DetailedPreprocessingRecord 'int'
| | |-ConstantExpr 0x5555d4b75688 <col:51> 'int'
| | | |-value: Int 1
| | | `-IntegerLiteral 0x5555d4b75668 <col:51> 'int' 1
| | `-FullComment 0x5555d4c0ce20 <line:1207:5, line:1214:34>
| |   |-ParagraphComment 0x5555d4c0cd00 <line:1207:5, line:1208:78>
| |   | |-TextComment 0x5555d4c0ccb0 <line:1207:5, col:67> Text=" Used to indicate that the parser should construct a "detailed""
| |   | `-TextComment 0x5555d4c0ccd0 <line:1208:5, col:78> Text=" preprocessing record, including all macro definitions and instantiations."
| |   `-ParagraphComment 0x5555d4c0cdf0 <line:1210:5, line:1214:34>
| |     |-TextComment 0x5555d4c0cd20 <line:1210:5, col:70> Text=" Constructing a detailed preprocessing record requires more memory"
| |     |-TextComment 0x5555d4c0cd40 <line:1211:5, col:69> Text=" and time to parse, since the information contained in the record"
| |     |-TextComment 0x5555d4c0cd60 <line:1212:5, col:59> Text=" is usually not retained. However, it can be useful for"
| |     |-TextComment 0x5555d4c0cd80 <line:1213:5, col:66> Text=" applications that require more detailed information about the"
| |     `-TextComment 0x5555d4c0cda0 <line:1214:5, col:34> Text=" behavior of the preprocessor."
| |-EnumConstantDecl 0x5555d4b75768 <line:1229:3, col:34> col:3 CXTranslationUnit_Incomplete 'int'
| | |-ConstantExpr 0x5555d4b75748 <col:34> 'int'
| | | |-value: Int 2
| | | `-IntegerLiteral 0x5555d4b75728 <col:34> 'int' 2
| | `-FullComment 0x5555d4c0d030 <line:1219:5, line:1227:46>
| |   |-ParagraphComment 0x5555d4c0cec0 <line:1219:5, col:62>
| |   | `-TextComment 0x5555d4c0ce90 <col:5, col:62> Text=" Used to indicate that the translation unit is incomplete."
| |   `-ParagraphComment 0x5555d4c0d000 <line:1221:5, line:1227:46>
| |     |-TextComment 0x5555d4c0cee0 <line:1221:5, col:65> Text=" When a translation unit is considered "incomplete", semantic"
| |     |-TextComment 0x5555d4c0cf00 <line:1222:5, col:59> Text=" analysis that is typically performed at the end of the"
| |     |-TextComment 0x5555d4c0cf20 <line:1223:5, col:70> Text=" translation unit will be suppressed. For example, this suppresses"
| |     |-TextComment 0x5555d4c0cf40 <line:1224:5, col:57> Text=" the completion of tentative declarations in C and of"
| |     |-TextComment 0x5555d4c0cf60 <line:1225:5, col:68> Text=" instantiation of implicitly-instantiation function templates in"
| |     |-TextComment 0x5555d4c0cf80 <line:1226:5, col:70> Text=" C++. This option is typically used when parsing a header with the"
| |     `-TextComment 0x5555d4c0cfa0 <line:1227:5, col:46> Text=" intent of producing a precompiled header."
| |-EnumConstantDecl 0x5555d4b75828 <line:1245:3, col:43> col:3 CXTranslationUnit_PrecompiledPreamble 'int'
| | |-ConstantExpr 0x5555d4b75808 <col:43> 'int'
| | | |-value: Int 4
| | | `-IntegerLiteral 0x5555d4b757e8 <col:43> 'int' 4
| | `-FullComment 0x5555d4c0d310 <line:1232:5, line:1243:55>
| |   |-ParagraphComment 0x5555d4c0d0f0 <line:1232:5, line:1233:50>
| |   | |-TextComment 0x5555d4c0d0a0 <line:1232:5, col:71> Text=" Used to indicate that the translation unit should be built with an"
| |   | `-TextComment 0x5555d4c0d0c0 <line:1233:5, col:50> Text=" implicit precompiled header for the preamble."
| |   `-ParagraphComment 0x5555d4c0d2e0 <line:1235:5, line:1243:55>
| |     |-TextComment 0x5555d4c0d110 <line:1235:5, col:69> Text=" An implicit precompiled header is used as an optimization when a"
| |     |-TextComment 0x5555d4c0d130 <line:1236:5, col:68> Text=" particular translation unit is likely to be reparsed many times"
| |     |-TextComment 0x5555d4c0d150 <line:1237:5, col:66> Text=" when the sources aren't changing that often. In this case, an"
| |     |-TextComment 0x5555d4c0d170 <line:1238:5, col:68> Text=" implicit precompiled header will be built containing all of the"
| |     |-TextComment 0x5555d4c0d190 <line:1239:5, col:70> Text=" initial includes at the top of the main file (what we refer to as"
| |     |-TextComment 0x5555d4c0d1b0 <line:1240:5, col:62> Text=" the "preamble" of the file). In subsequent parses, if the"
| |     |-TextComment 0x5555d4c0d1d0 <line:1241:5, col:51> Text=" preamble or the files in it have not changed, "
| |     |-InlineCommandComment 0x5555d4c0d230 <col:52, col:53> Name="c" RenderMonospaced Arg[0]="clang_reparseTranslationUnit()"
| |     |-TextComment 0x5555d4c0d250 <line:1242:36, col:60> Text=" will re-use the implicit"
| |     `-TextComment 0x5555d4c0d270 <line:1243:5, col:55> Text=" precompiled header to improve parsing performance."
| |-EnumConstantDecl 0x5555d4b758e8 <line:1255:3, col:46> col:3 CXTranslationUnit_CacheCompletionResults 'int'
| | |-ConstantExpr 0x5555d4b758c8 <col:46> 'int'
| | | |-value: Int 8
| | | `-IntegerLiteral 0x5555d4b758a8 <col:46> 'int' 8
| | `-FullComment 0x5555d4c0d4a0 <line:1248:5, line:1253:32>
| |   |-ParagraphComment 0x5555d4c0d3d0 <line:1248:5, line:1249:66>
| |   | |-TextComment 0x5555d4c0d380 <line:1248:5, col:65> Text=" Used to indicate that the translation unit should cache some"
| |   | `-TextComment 0x5555d4c0d3a0 <line:1249:5, col:66> Text=" code-completion results with each reparse of the source file."
| |   `-ParagraphComment 0x5555d4c0d470 <line:1251:5, line:1253:32>
| |     |-TextComment 0x5555d4c0d3f0 <line:1251:5, col:74> Text=" Caching of code-completion results is a performance optimization that"
| |     |-TextComment 0x5555d4c0d410 <line:1252:5, col:74> Text=" introduces some overhead to reparsing but improves the performance of"
| |     `-TextComment 0x5555d4c0d430 <line:1253:5, col:32> Text=" code-completion operations."
| |-EnumConstantDecl 0x5555d4b759a8 <line:1264:3, col:40> col:3 CXTranslationUnit_ForSerialization 'int'
| | |-ConstantExpr 0x5555d4b75988 <col:40> 'int'
| | | |-value: Int 16
| | | `-IntegerLiteral 0x5555d4b75968 <col:40> 'int' 16
| | `-FullComment 0x5555d4c0d670 <line:1258:5, line:1262:36>
| |   |-ParagraphComment 0x5555d4c0d5d0 <line:1258:5, line:1259:7>
| |   | |-TextComment 0x5555d4c0d510 <line:1258:5, col:71> Text=" Used to indicate that the translation unit will be serialized with"
| |   | |-TextComment 0x5555d4c0d530 <line:1259:5> Text=" "
| |   | `-InlineCommandComment 0x5555d4c0d590 <col:6, col:7> Name="c" RenderMonospaced Arg[0]="clang_saveTranslationUnit."
| |   `-ParagraphComment 0x5555d4c0d640 <line:1261:5, line:1262:36>
| |     |-TextComment 0x5555d4c0d5f0 <line:1261:5, col:75> Text=" This option is typically used when parsing a header with the intent of"
| |     `-TextComment 0x5555d4c0d610 <line:1262:5, col:36> Text=" producing a precompiled header."
| |-EnumConstantDecl 0x5555d4b75a68 <line:1272:3, col:37> col:3 CXTranslationUnit_CXXChainedPCH 'int'
| | |-ConstantExpr 0x5555d4b75a48 <col:37> 'int'
| | | |-value: Int 32
| | | `-IntegerLiteral 0x5555d4b75a28 <col:37> 'int' 32
| | `-FullComment 0x5555d4c0d7b0 <line:1267:5, line:1270:71>
| |   |-ParagraphComment 0x5555d4c0d710 <line:1267:5, col:62>
| |   | `-TextComment 0x5555d4c0d6e0 <col:5, col:62> Text=" DEPRECATED: Enabled chained precompiled preambles in C++."
| |   `-ParagraphComment 0x5555d4c0d780 <line:1269:5, line:1270:71>
| |     |-TextComment 0x5555d4c0d730 <line:1269:5, col:68> Text=" Note: this is a *temporary* option that is available only while"
| |     `-TextComment 0x5555d4c0d750 <line:1270:5, col:71> Text=" we are testing C++ precompiled preamble support. It is deprecated."
| |-EnumConstantDecl 0x5555d4b75b28 <line:1281:3, col:42> col:3 CXTranslationUnit_SkipFunctionBodies 'int'
| | |-ConstantExpr 0x5555d4b75b08 <col:42> 'int'
| | | |-value: Int 64
| | | `-IntegerLiteral 0x5555d4b75ae8 <col:42> 'int' 64
| | `-FullComment 0x5555d4c0d910 <line:1275:5, line:1279:25>
| |   |-ParagraphComment 0x5555d4c0d870 <line:1275:5, line:1276:13>
| |   | |-TextComment 0x5555d4c0d820 <line:1275:5, col:73> Text=" Used to indicate that function/method bodies should be skipped while"
| |   | `-TextComment 0x5555d4c0d840 <line:1276:5, col:13> Text=" parsing."
| |   `-ParagraphComment 0x5555d4c0d8e0 <line:1278:5, line:1279:25>
| |     |-TextComment 0x5555d4c0d890 <line:1278:5, col:73> Text=" This option can be used to search for declarations/definitions while"
| |     `-TextComment 0x5555d4c0d8b0 <line:1279:5, col:25> Text=" ignoring the usages."
| |-EnumConstantDecl 0x5555d4b75be8 <line:1288:3, col:60> col:3 CXTranslationUnit_IncludeBriefCommentsInCodeCompletion 'int'
| | |-ConstantExpr 0x5555d4b75bc8 <col:60> 'int'
| | | |-value: Int 128
| | | `-IntegerLiteral 0x5555d4b75ba8 <col:60> 'int' 128
| | `-FullComment 0x5555d4c0da30 <line:1284:5, line:1286:10>
| |   `-ParagraphComment 0x5555d4c0da00 <line:1284:5, line:1286:10>
| |     |-TextComment 0x5555d4c0d980 <line:1284:5, col:65> Text=" Used to indicate that brief documentation comments should be"
| |     |-TextComment 0x5555d4c0d9a0 <line:1285:5, col:77> Text=" included into the set of code completions returned from this translation"
| |     `-TextComment 0x5555d4c0d9c0 <line:1286:5, col:10> Text=" unit."
| |-EnumConstantDecl 0x5555d4b75ca8 <line:1296:3, col:50> col:3 CXTranslationUnit_CreatePreambleOnFirstParse 'int'
| | |-ConstantExpr 0x5555d4b75c88 <col:50> 'int'
| | | |-value: Int 256
| | | `-IntegerLiteral 0x5555d4b75c68 <col:50> 'int' 256
| | `-FullComment 0x5555d4c0db70 <line:1291:5, line:1294:70>
| |   `-ParagraphComment 0x5555d4c0db40 <line:1291:5, line:1294:70>
| |     |-TextComment 0x5555d4c0daa0 <line:1291:5, col:72> Text=" Used to indicate that the precompiled preamble should be created on"
| |     |-TextComment 0x5555d4c0dac0 <line:1292:5, col:77> Text=" the first parse. Otherwise it will be created on the first reparse. This"
| |     |-TextComment 0x5555d4c0dae0 <line:1293:5, col:80> Text=" trades runtime on the first parse (serializing the preamble takes time) for"
| |     `-TextComment 0x5555d4c0db00 <line:1294:5, col:70> Text=" reduced runtime on the second parse (can now reuse the preamble)."
| |-EnumConstantDecl 0x5555d4b75d68 <line:1307:3, col:33> col:3 CXTranslationUnit_KeepGoing 'int'
| | |-ConstantExpr 0x5555d4b75d48 <col:33> 'int'
| | | |-value: Int 512
| | | `-IntegerLiteral 0x5555d4b75d28 <col:33> 'int' 512
| | `-FullComment 0x5555d4c0dd50 <line:1299:5, line:1305:75>
| |   |-ParagraphComment 0x5555d4c0dc10 <line:1299:5, col:62>
| |   | `-TextComment 0x5555d4c0dbe0 <col:5, col:62> Text=" Do not stop processing when fatal errors are encountered."
| |   `-ParagraphComment 0x5555d4c0dd20 <line:1301:5, line:1305:75>
| |     |-TextComment 0x5555d4c0dc30 <line:1301:5, col:72> Text=" When fatal errors are encountered while parsing a translation unit,"
| |     |-TextComment 0x5555d4c0dc70 <line:1302:5, col:79> Text=" semantic analysis is typically stopped early when compiling code. A common"
| |     |-TextComment 0x5555d4c0dc90 <line:1303:5, col:68> Text=" source for fatal errors are unresolvable include files. For the"
| |     |-TextComment 0x5555d4c0dcb0 <line:1304:5, col:77> Text=" purposes of an IDE, this is undesirable behavior and as much information"
| |     `-TextComment 0x5555d4c0dcd0 <line:1305:5, col:75> Text=" as possible should be reported. Use this flag to enable this behavior."
| |-EnumConstantDecl 0x5555d4b75e28 <line:1312:3, col:39> col:3 CXTranslationUnit_SingleFileParse 'int'
| | |-ConstantExpr 0x5555d4b75e08 <col:39> 'int'
| | | |-value: Int 1024
| | | `-IntegerLiteral 0x5555d4b75de8 <col:39> 'int' 1024
| | `-FullComment 0x5555d4c0de20 <line:1310:5, col:68>
| |   `-ParagraphComment 0x5555d4c0ddf0 <col:5, col:68>
| |     `-TextComment 0x5555d4c0ddc0 <col:5, col:68> Text=" Sets the preprocessor in a mode for parsing a single file only."
| |-EnumConstantDecl 0x5555d4b75ee8 <line:1320:3, col:57> col:3 CXTranslationUnit_LimitSkipFunctionBodiesToPreamble 'int'
| | |-ConstantExpr 0x5555d4b75ec8 <col:57> 'int'
| | | |-value: Int 2048
| | | `-IntegerLiteral 0x5555d4b75ea8 <col:57> 'int' 2048
| | `-FullComment 0x5555d4c0df60 <line:1315:5, line:1318:58>
| |   |-ParagraphComment 0x5555d4c0dee0 <line:1315:5, line:1316:63>
| |   | |-TextComment 0x5555d4c0de90 <line:1315:5, col:69> Text=" Used in combination with CXTranslationUnit_SkipFunctionBodies to"
| |   | `-TextComment 0x5555d4c0deb0 <line:1316:5, col:63> Text=" constrain the skipping of function bodies to the preamble."
| |   `-ParagraphComment 0x5555d4c0df30 <line:1318:5, col:58>
| |     `-TextComment 0x5555d4c0df00 <col:5, col:58> Text=" The function bodies of the main file are not skipped."
| |-EnumConstantDecl 0x5555d4b75fa8 <line:1325:3, col:46> col:3 CXTranslationUnit_IncludeAttributedTypes 'int'
| | |-ConstantExpr 0x5555d4b75f88 <col:46> 'int'
| | | |-value: Int 4096
| | | `-IntegerLiteral 0x5555d4b75f68 <col:46> 'int' 4096
| | `-FullComment 0x5555d4c0e030 <line:1323:5, col:73>
| |   `-ParagraphComment 0x5555d4c0e000 <col:5, col:73>
| |     `-TextComment 0x5555d4c0dfd0 <col:5, col:73> Text=" Used to indicate that attributed types should be included in CXType."
| |-EnumConstantDecl 0x5555d4b76068 <line:1330:3, col:47> col:3 CXTranslationUnit_VisitImplicitAttributes 'int'
| | |-ConstantExpr 0x5555d4b76048 <col:47> 'int'
| | | |-value: Int 8192
| | | `-IntegerLiteral 0x5555d4b76028 <col:47> 'int' 8192
| | `-FullComment 0x5555d4c0e100 <line:1328:5, col:65>
| |   `-ParagraphComment 0x5555d4c0e0d0 <col:5, col:65>
| |     `-TextComment 0x5555d4c0e0a0 <col:5, col:65> Text=" Used to indicate that implicit attributes should be visited."
| |-EnumConstantDecl 0x5555d4b77170 <line:1340:3, col:56> col:3 CXTranslationUnit_IgnoreNonErrorsFromIncludedFiles 'int'
| | |-ConstantExpr 0x5555d4b76108 <col:56> 'int'
| | | |-value: Int 16384
| | | `-IntegerLiteral 0x5555d4b760e8 <col:56> 'int' 16384
| | `-FullComment 0x5555d4c0e290 <line:1333:5, line:1338:74>
| |   |-ParagraphComment 0x5555d4c0e1a0 <line:1333:5, col:76>
| |   | `-TextComment 0x5555d4c0e170 <col:5, col:76> Text=" Used to indicate that non-errors from included files should be ignored."
| |   `-ParagraphComment 0x5555d4c0e260 <line:1335:5, line:1338:74>
| |     |-TextComment 0x5555d4c0e1c0 <line:1335:5, col:78> Text=" If set, clang_getDiagnosticSetFromTU() will not report e.g. warnings from"
| |     |-TextComment 0x5555d4c0e1e0 <line:1336:5, col:78> Text=" included files anymore. This speeds up clang_getDiagnosticSetFromTU() for"
| |     |-TextComment 0x5555d4c0e200 <line:1337:5, col:73> Text=" the case where these warnings are not of interest, as for an IDE for"
| |     `-TextComment 0x5555d4c0e220 <line:1338:5, col:74> Text=" example, which typically shows only the diagnostics in the main file."
| `-EnumConstantDecl 0x5555d4b77228 <line:1345:3, col:55> col:3 CXTranslationUnit_RetainExcludedConditionalBlocks 'int'
|   |-ConstantExpr 0x5555d4b77208 <col:55> 'int'
|   | |-value: Int 32768
|   | `-IntegerLiteral 0x5555d4b771e8 <col:55> 'int' 32768
|   `-FullComment 0x5555d4c0e360 <line:1343:5, col:68>
|     `-ParagraphComment 0x5555d4c0e330 <col:5, col:68>
|       `-TextComment 0x5555d4c0e300 <col:5, col:68> Text=" Tells the preprocessor not to skip excluded conditional blocks."
|-FunctionDecl 0x5555d4b77368 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:1360:72> col:25 clang_defaultEditingTranslationUnitOptions 'unsigned int (void)'
| |-VisibilityAttr 0x5555d4b77410 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c0e710 </workspace/clang-c/Index.h:1349:3, line:1358:72>
|   |-ParagraphComment 0x5555d4c0e420 <line:1349:3, line:1350:29>
|   | |-TextComment 0x5555d4c0e3d0 <line:1349:3, col:70> Text=" Returns the set of flags that is suitable for parsing a translation"
|   | `-TextComment 0x5555d4c0e3f0 <line:1350:3, col:29> Text=" unit that is being edited."
|   `-ParagraphComment 0x5555d4c0e6e0 <line:1352:3, line:1358:72>
|     |-TextComment 0x5555d4c0e440 <line:1352:3, col:49> Text=" The set of flags returned provide options for "
|     |-InlineCommandComment 0x5555d4c0e4a0 <col:50, col:51> Name="c" RenderMonospaced Arg[0]="clang_parseTranslationUnit()"
|     |-TextComment 0x5555d4c0e4c0 <line:1353:3, col:77> Text=" to indicate that the translation unit is likely to be reparsed many times,"
|     |-TextComment 0x5555d4c0e4e0 <line:1354:3, col:26> Text=" either explicitly (via "
|     |-InlineCommandComment 0x5555d4c0e540 <col:27, col:28> Name="c" RenderMonospaced Arg[0]="clang_reparseTranslationUnit())"
|     |-TextComment 0x5555d4c0e560 <col:61, col:74> Text=" or implicitly"
|     |-TextComment 0x5555d4c0e580 <line:1355:3, col:30> Text=" (e.g., by code completion ("
|     |-InlineCommandComment 0x5555d4c0e5e0 <col:31, col:32> Name="c" RenderMonospaced Arg[0]="clang_codeCompletionAt()))."
|     |-TextComment 0x5555d4c0e600 <col:61, col:78> Text=" The returned flag"
|     |-TextComment 0x5555d4c0e620 <line:1356:3, col:74> Text=" set contains an unspecified set of optimizations (e.g., the precompiled"
|     |-TextComment 0x5555d4c0e640 <line:1357:3, col:75> Text=" preamble) geared toward improving the performance of these routines. The"
|     `-TextComment 0x5555d4c0e660 <line:1358:3, col:72> Text=" set of optimizations enabled may change from one version to the next."
|-FunctionDecl 0x5555d4b77958 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:1372:21> line:1368:34 clang_parseTranslationUnit 'CXTranslationUnit (CXIndex, const char *, const char *const *, int, struct CXUnsavedFile *, unsigned int, unsigned int)'
| |-ParmVarDecl 0x5555d4b774c8 <line:1369:5, col:13> col:13 CIdx 'CXIndex':'void *'
| |-ParmVarDecl 0x5555d4b77548 <col:19, col:31> col:31 source_filename 'const char *'
| |-ParmVarDecl 0x5555d4b775c8 <line:1370:5, col:24> col:24 command_line_args 'const char *const *'
| |-ParmVarDecl 0x5555d4b77648 <col:43, col:47> col:47 num_command_line_args 'int'
| |-ParmVarDecl 0x5555d4b776d8 <line:1371:5, col:27> col:27 unsaved_files 'struct CXUnsavedFile *'
| |-ParmVarDecl 0x5555d4b77758 <col:42, col:51> col:51 num_unsaved_files 'unsigned int'
| |-ParmVarDecl 0x5555d4b777d8 <line:1372:5, col:14> col:14 options 'unsigned int'
| |-VisibilityAttr 0x5555d4b77a38 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c0ea50 </workspace/clang-c/Index.h:1363:3, line:1366:15>
|   `-ParagraphComment 0x5555d4c0ea20 <line:1363:3, line:1366:15>
|     |-TextComment 0x5555d4c0e780 <line:1363:3, col:11> Text=" Same as "
|     |-InlineCommandComment 0x5555d4c0e7e0 <col:12, col:13> Name="c" RenderMonospaced Arg[0]="clang_parseTranslationUnit2,"
|     |-TextComment 0x5555d4c0e800 <col:43, col:54> Text=" but returns"
|     |-TextComment 0x5555d4c0e820 <line:1364:3, col:7> Text=" the "
|     |-InlineCommandComment 0x5555d4c0e870 <col:8, col:9> Name="c" RenderMonospaced Arg[0]="CXTranslationUnit"
|     |-TextComment 0x5555d4c0e890 <col:28, col:79> Text=" instead of an error code.  In case of an error this"
|     |-TextComment 0x5555d4c0e8b0 <line:1365:3, col:21> Text=" routine returns a "
|     |-InlineCommandComment 0x5555d4c0e8f0 <col:22, col:23> Name="c" RenderMonospaced Arg[0]="NULL"
|     |-TextComment 0x5555d4c0e910 <col:29> Text=" "
|     |-InlineCommandComment 0x5555d4c0e960 <col:30, col:31> Name="c" RenderMonospaced Arg[0]="CXTranslationUnit,"
|     |-TextComment 0x5555d4c0e980 <col:51, col:75> Text=" without further detailed"
|     `-TextComment 0x5555d4c0e9a0 <line:1366:3, col:15> Text=" error codes."
|-FunctionDecl 0x5555d4b78028 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:1422:48> line:1418:33 clang_parseTranslationUnit2 'enum CXErrorCode (CXIndex, const char *, const char *const *, int, struct CXUnsavedFile *, unsigned int, unsigned int, CXTranslationUnit *)'
| |-ParmVarDecl 0x5555d4b77ae8 <line:1419:5, col:13> col:13 CIdx 'CXIndex':'void *'
| |-ParmVarDecl 0x5555d4b77b68 <col:19, col:31> col:31 source_filename 'const char *'
| |-ParmVarDecl 0x5555d4b77be8 <line:1420:5, col:24> col:24 command_line_args 'const char *const *'
| |-ParmVarDecl 0x5555d4b77c68 <col:43, col:47> col:47 num_command_line_args 'int'
| |-ParmVarDecl 0x5555d4b77cf8 <line:1421:5, col:27> col:27 unsaved_files 'struct CXUnsavedFile *'
| |-ParmVarDecl 0x5555d4b77d78 <col:42, col:51> col:51 num_unsaved_files 'unsigned int'
| |-ParmVarDecl 0x5555d4b77df8 <line:1422:5, col:14> col:14 options 'unsigned int'
| |-ParmVarDecl 0x5555d4b77e78 <col:23, col:42> col:42 out_TU 'CXTranslationUnit *'
| |-VisibilityAttr 0x5555d4b78110 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c0fa50 </workspace/clang-c/Index.h:1375:3, line:1416:61>
|   |-ParagraphComment 0x5555d4c0eb10 <line:1375:3, line:1376:16>
|   | |-TextComment 0x5555d4c0eac0 <line:1375:3, col:69> Text=" Parse the given source file and the translation unit corresponding"
|   | `-TextComment 0x5555d4c0eae0 <line:1376:3, col:16> Text=" to that file."
|   |-ParagraphComment 0x5555d4c0ec00 <line:1378:3, line:1382:59>
|   | |-TextComment 0x5555d4c0eb30 <line:1378:3, col:74> Text=" This routine is the main entry point for the Clang C API, providing the"
|   | |-TextComment 0x5555d4c0eb50 <line:1379:3, col:74> Text=" ability to parse a source file into a translation unit that can then be"
|   | |-TextComment 0x5555d4c0eb70 <line:1380:3, col:71> Text=" queried by other functions in the API. This routine accepts a set of"
|   | |-TextComment 0x5555d4c0eb90 <line:1381:3, col:79> Text=" command-line arguments so that the compilation can be configured in the same"
|   | `-TextComment 0x5555d4c0ebb0 <line:1382:3, col:59> Text=" way that the compiler is configured on the command line."
|   |-ParagraphComment 0x5555d4c0ec50 <line:1384:3>
|   | `-TextComment 0x5555d4c0ec20 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c0ec70 <col:4, line:1385:14> [in] implicitly Param="CIdx" ParamIndex=0
|   | `-ParagraphComment 0x5555d4c0ed20 <line:1384:15, line:1385:14>
|   |   |-TextComment 0x5555d4c0ecd0 <line:1384:15, col:71> Text=" The index object with which the translation unit will be"
|   |   `-TextComment 0x5555d4c0ecf0 <line:1385:3, col:14> Text=" associated."
|   |-ParagraphComment 0x5555d4c0ed70 <line:1387:3>
|   | `-TextComment 0x5555d4c0ed40 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c0ed90 <col:4, line:1388:32> [in] implicitly Param="source_filename" ParamIndex=1
|   | `-ParagraphComment 0x5555d4c0eea0 <line:1387:26, line:1388:32>
|   |   |-TextComment 0x5555d4c0edf0 <line:1387:26, col:77> Text=" The name of the source file to load, or NULL if the"
|   |   |-TextComment 0x5555d4c0ee10 <line:1388:3, col:30> Text=" source file is included in "
|   |   `-InlineCommandComment 0x5555d4c0ee60 <col:31, col:32> Name="c" RenderMonospaced Arg[0]="command_line_args."
|   |-ParagraphComment 0x5555d4c0eef0 <line:1390:3>
|   | `-TextComment 0x5555d4c0eec0 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c0ef10 <col:4, line:1394:80> [in] implicitly Param="command_line_args" ParamIndex=2
|   | `-ParagraphComment 0x5555d4c0f110 <line:1390:28, line:1394:80>
|   |   |-TextComment 0x5555d4c0ef80 <line:1390:28, col:68> Text=" The command-line arguments that would be"
|   |   |-TextComment 0x5555d4c0efa0 <line:1391:3, col:17> Text=" passed to the "
|   |   |-InlineCommandComment 0x5555d4c0efe0 <col:18, col:19> Name="c" RenderMonospaced Arg[0]="clang"
|   |   |-TextComment 0x5555d4c0f000 <col:26, col:77> Text=" executable if it were being invoked out-of-process."
|   |   |-TextComment 0x5555d4c0f020 <line:1392:3, col:80> Text=" These command-line options will be parsed and will affect how the translation"
|   |   |-TextComment 0x5555d4c0f040 <line:1393:3, col:69> Text=" unit is parsed. Note that the following options are ignored: '-c',"
|   |   |-TextComment 0x5555d4c0f060 <line:1394:3, col:64> Text=" '-emit-ast', '-fsyntax-only' (which is the default), and '-o "
|   |   |-TextComment 0x5555d4c0f080 <col:65, col:66> Text="<"
|   |   `-TextComment 0x5555d4c0f0a0 <col:67, col:80> Text="output file>'."
|   |-ParagraphComment 0x5555d4c0f160 <line:1396:3>
|   | `-TextComment 0x5555d4c0f130 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c0f180 <col:4, line:1397:5> [in] implicitly Param="num_command_line_args" ParamIndex=3
|   | `-ParagraphComment 0x5555d4c0f2a0 <line:1396:32, line:1397:5>
|   |   |-TextComment 0x5555d4c0f1f0 <line:1396:32, col:71> Text=" The number of command-line arguments in"
|   |   |-TextComment 0x5555d4c0f210 <line:1397:3> Text=" "
|   |   `-InlineCommandComment 0x5555d4c0f260 <col:4, col:5> Name="c" RenderMonospaced Arg[0]="command_line_args."
|   |-ParagraphComment 0x5555d4c0f2f0 <line:1399:3>
|   | `-TextComment 0x5555d4c0f2c0 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c0f310 <col:4, line:1403:68> [in] implicitly Param="unsaved_files" ParamIndex=4
|   | `-ParagraphComment 0x5555d4c0f440 <line:1399:24, line:1403:68>
|   |   |-TextComment 0x5555d4c0f370 <line:1399:24, col:70> Text=" the files that have not yet been saved to disk"
|   |   |-TextComment 0x5555d4c0f390 <line:1400:3, col:61> Text=" but may be required for parsing, including the contents of"
|   |   |-TextComment 0x5555d4c0f3b0 <line:1401:3, col:70> Text=" those files.  The contents and name of these files (as specified by"
|   |   |-TextComment 0x5555d4c0f3d0 <line:1402:3, col:72> Text=" CXUnsavedFile) are copied when necessary, so the client only needs to"
|   |   `-TextComment 0x5555d4c0f3f0 <line:1403:3, col:68> Text=" guarantee their validity until the call to this function returns."
|   |-ParagraphComment 0x5555d4c0f490 <line:1405:3>
|   | `-TextComment 0x5555d4c0f460 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c0f4b0 <col:4, col:68> [in] implicitly Param="num_unsaved_files" ParamIndex=5
|   | `-ParagraphComment 0x5555d4c0f5a0 <col:28, col:68>
|   |   |-TextComment 0x5555d4c0f520 <col:28, col:66> Text=" the number of unsaved file entries in "
|   |   `-InlineCommandComment 0x5555d4c0f570 <col:67, col:68> Name="p" RenderMonospaced Arg[0]="unsaved_files."
|   |-ParagraphComment 0x5555d4c0f5f0 <line:1408:3>
|   | `-TextComment 0x5555d4c0f5c0 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c0f610 <col:4, line:1410:31> [in] implicitly Param="options" ParamIndex=6
|   | `-ParagraphComment 0x5555d4c0f6f0 <line:1408:18, line:1410:31>
|   |   |-TextComment 0x5555d4c0f670 <line:1408:18, col:76> Text=" A bitmask of options that affects how the translation unit"
|   |   |-TextComment 0x5555d4c0f690 <line:1409:3, col:73> Text=" is managed but not its compilation. This should be a bitwise OR of the"
|   |   `-TextComment 0x5555d4c0f6b0 <line:1410:3, col:31> Text=" CXTranslationUnit_XXX flags."
|   |-ParagraphComment 0x5555d4c0f740 <line:1412:3>
|   | `-TextComment 0x5555d4c0f710 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c0f760 <col:4, line:1414:40> [out] explicitly Param="out_TU" ParamIndex=7
|   | `-ParagraphComment 0x5555d4c0f8c0 <line:1412:22, line:1414:40>
|   |   |-TextComment 0x5555d4c0f7c0 <line:1412:22, col:61> Text=" A non-NULL pointer to store the created"
|   |   |-TextComment 0x5555d4c0f7e0 <line:1413:3> Text=" "
|   |   |-InlineCommandComment 0x5555d4c0f830 <col:4, col:5> Name="c" RenderMonospaced Arg[0]="CXTranslationUnit,"
|   |   |-TextComment 0x5555d4c0f850 <col:25, col:70> Text=" describing the parsed code and containing any"
|   |   `-TextComment 0x5555d4c0f870 <line:1414:3, col:40> Text=" diagnostics produced by the compiler."
|   |-ParagraphComment 0x5555d4c0f910 <line:1416:3>
|   | `-TextComment 0x5555d4c0f8e0 <col:3> Text=" "
|   `-BlockCommandComment 0x5555d4c0f930 <col:4, col:61> Name="returns"
|     `-ParagraphComment 0x5555d4c0f990 <col:12, col:61>
|       `-TextComment 0x5555d4c0f960 <col:12, col:61> Text=" Zero on success, otherwise returns an error code."
|-FunctionDecl 0x5555d4b78640 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:1433:48> line:1429:33 clang_parseTranslationUnit2FullArgv 'enum CXErrorCode (CXIndex, const char *, const char *const *, int, struct CXUnsavedFile *, unsigned int, unsigned int, CXTranslationUnit *)'
| |-ParmVarDecl 0x5555d4b781d8 <line:1430:5, col:13> col:13 CIdx 'CXIndex':'void *'
| |-ParmVarDecl 0x5555d4b78258 <col:19, col:31> col:31 source_filename 'const char *'
| |-ParmVarDecl 0x5555d4b782d8 <line:1431:5, col:24> col:24 command_line_args 'const char *const *'
| |-ParmVarDecl 0x5555d4b78358 <col:43, col:47> col:47 num_command_line_args 'int'
| |-ParmVarDecl 0x5555d4b783e8 <line:1432:5, col:27> col:27 unsaved_files 'struct CXUnsavedFile *'
| |-ParmVarDecl 0x5555d4b78468 <col:42, col:51> col:51 num_unsaved_files 'unsigned int'
| |-ParmVarDecl 0x5555d4b784e8 <line:1433:5, col:14> col:14 options 'unsigned int'
| |-ParmVarDecl 0x5555d4b78568 <col:23, col:42> col:42 out_TU 'CXTranslationUnit *'
| |-VisibilityAttr 0x5555d4b78728 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c0fbf0 </workspace/clang-c/Index.h:1425:3, line:1427:44>
|   `-ParagraphComment 0x5555d4c0fbc0 <line:1425:3, line:1427:44>
|     |-TextComment 0x5555d4c0fac0 <line:1425:3, col:71> Text=" Same as clang_parseTranslationUnit2 but requires a full command line"
|     |-TextComment 0x5555d4c0fae0 <line:1426:3, col:7> Text=" for "
|     |-InlineCommandComment 0x5555d4c0fb30 <col:8, col:9> Name="c" RenderMonospaced Arg[0]="command_line_args"
|     |-TextComment 0x5555d4c0fb50 <col:28, col:77> Text=" including argv[0]. This is useful if the standard"
|     `-TextComment 0x5555d4c0fb70 <line:1427:3, col:44> Text=" library paths are relative to the binary."
|-EnumDecl 0x5555d4b787a8 <line:1442:1, line:1447:1> line:1442:6 CXSaveTranslationUnit_Flags
| |-FullComment 0x5555d4c0fd80 <line:1436:3, line:1440:31>
| | |-ParagraphComment 0x5555d4c0fcb0 <line:1436:3, col:54>
| | | `-TextComment 0x5555d4c0fc80 <col:3, col:54> Text=" Flags that control how translation units are saved."
| | `-ParagraphComment 0x5555d4c0fd50 <line:1438:3, line:1440:31>
| |   |-TextComment 0x5555d4c0fcd0 <line:1438:3, col:67> Text=" The enumerators in this enumeration type are meant to be bitwise"
| |   |-TextComment 0x5555d4c0fcf0 <line:1439:3, col:61> Text=" ORed together to specify which options should be used when"
| |   `-TextComment 0x5555d4c0fd10 <line:1440:3, col:31> Text=" saving the translation unit."
| `-EnumConstantDecl 0x5555d4b788d8 <line:1446:3, col:32> col:3 CXSaveTranslationUnit_None 'int'
|   |-ConstantExpr 0x5555d4b788b8 <col:32> 'int'
|   | |-value: Int 0
|   | `-IntegerLiteral 0x5555d4b78898 <col:32> 'int' 0
|   `-FullComment 0x5555d4c0fe50 <line:1444:5, col:64>
|     `-ParagraphComment 0x5555d4c0fe20 <col:5, col:64>
|       `-TextComment 0x5555d4c0fdf0 <col:5, col:64> Text=" Used to indicate that no special saving options are needed."
|-FunctionDecl 0x5555d4b78a20 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:1458:70> col:25 clang_defaultSaveOptions 'unsigned int (CXTranslationUnit)'
| |-ParmVarDecl 0x5555d4b78988 <col:50, col:68> col:68 TU 'CXTranslationUnit':'struct CXTranslationUnitImpl *'
| |-VisibilityAttr 0x5555d4b78ad0 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c10090 </workspace/clang-c/Index.h:1450:3, line:1456:36>
|   |-ParagraphComment 0x5555d4c0ff10 <line:1450:3, line:1451:8>
|   | |-TextComment 0x5555d4c0fec0 <line:1450:3, col:69> Text=" Returns the set of flags that is suitable for saving a translation"
|   | `-TextComment 0x5555d4c0fee0 <line:1451:3, col:8> Text=" unit."
|   `-ParagraphComment 0x5555d4c10060 <line:1453:3, line:1456:36>
|     |-TextComment 0x5555d4c0ff30 <line:1453:3, col:48> Text=" The set of flags returned provide options for"
|     |-TextComment 0x5555d4c0ff50 <line:1454:3> Text=" "
|     |-InlineCommandComment 0x5555d4c0ffb0 <col:4, col:5> Name="c" RenderMonospaced Arg[0]="clang_saveTranslationUnit()"
|     |-TextComment 0x5555d4c0ffd0 <col:34, col:63> Text=" by default. The returned flag"
|     |-TextComment 0x5555d4c0fff0 <line:1455:3, col:78> Text=" set contains an unspecified set of options that save translation units with"
|     `-TextComment 0x5555d4c10010 <line:1456:3, col:36> Text=" the most commonly-requested data."
|-EnumDecl 0x5555d4b78b58 <line:1464:1, line:1493:1> line:1464:6 CXSaveError
| |-FullComment 0x5555d4c10210 <line:1461:3, line:1463:1>
| | `-ParagraphComment 0x5555d4c101e0 <line:1461:3, line:1463:1>
| |   |-TextComment 0x5555d4c10100 <line:1461:3, col:66> Text=" Describes the kind of error that occurred (if any) in a call to"
| |   |-TextComment 0x5555d4c10120 <line:1462:3> Text=" "
| |   |-InlineCommandComment 0x5555d4c10180 <col:4, col:5> Name="c" RenderMonospaced Arg[0]="clang_saveTranslationUnit()."
| |   `-TextComment 0x5555d4c101a0 <line:1463:1> Text=" "
| |-EnumConstantDecl 0x5555d4b78c88 <line:1468:3, col:22> col:3 CXSaveError_None 'int'
| | |-ConstantExpr 0x5555d4b78c68 <col:22> 'int'
| | | |-value: Int 0
| | | `-IntegerLiteral 0x5555d4b78c48 <col:22> 'int' 0
| | `-FullComment 0x5555d4c102e0 <line:1466:5, col:70>
| |   `-ParagraphComment 0x5555d4c102b0 <col:5, col:70>
| |     `-TextComment 0x5555d4c10280 <col:5, col:70> Text=" Indicates that no error occurred while saving a translation unit."
| |-EnumConstantDecl 0x5555d4b78d48 <line:1477:3, col:25> col:3 CXSaveError_Unknown 'int'
| | |-ConstantExpr 0x5555d4b78d28 <col:25> 'int'
| | | |-value: Int 1
| | | `-IntegerLiteral 0x5555d4b78d08 <col:25> 'int' 1
| | `-FullComment 0x5555d4c10440 <line:1471:5, line:1475:20>
| |   |-ParagraphComment 0x5555d4c103a0 <line:1471:5, line:1472:14>
| |   | |-TextComment 0x5555d4c10350 <line:1471:5, col:70> Text=" Indicates that an unknown error occurred while attempting to save"
| |   | `-TextComment 0x5555d4c10370 <line:1472:5, col:14> Text=" the file."
| |   `-ParagraphComment 0x5555d4c10410 <line:1474:5, line:1475:20>
| |     |-TextComment 0x5555d4c103c0 <line:1474:5, col:75> Text=" This error typically indicates that file I/O failed when attempting to"
| |     `-TextComment 0x5555d4c103e0 <line:1475:5, col:20> Text=" write the file."
| |-EnumConstantDecl 0x5555d4b78e08 <line:1486:3, col:35> col:3 CXSaveError_TranslationErrors 'int'
| | |-ConstantExpr 0x5555d4b78de8 <col:35> 'int'
| | | |-value: Int 2
| | | `-IntegerLiteral 0x5555d4b78dc8 <col:35> 'int' 2
| | `-FullComment 0x5555d4c106b0 <line:1480:5, line:1485:3>
| |   |-ParagraphComment 0x5555d4c10500 <line:1480:5, line:1481:34>
| |   | |-TextComment 0x5555d4c104b0 <line:1480:5, col:68> Text=" Indicates that errors during translation prevented this attempt"
| |   | `-TextComment 0x5555d4c104d0 <line:1481:5, col:34> Text=" to save the translation unit."
| |   `-ParagraphComment 0x5555d4c10680 <line:1483:5, line:1485:3>
| |     |-TextComment 0x5555d4c10520 <line:1483:5, col:69> Text=" Errors that prevent the translation unit from being saved can be"
| |     |-TextComment 0x5555d4c10540 <line:1484:5, col:21> Text=" extracted using "
| |     |-InlineCommandComment 0x5555d4c105a0 <col:22, col:23> Name="c" RenderMonospaced Arg[0]="clang_getNumDiagnostics()"
| |     |-TextComment 0x5555d4c105c0 <col:50, col:54> Text=" and "
| |     |-InlineCommandComment 0x5555d4c10610 <col:55, col:56> Name="c" RenderMonospaced Arg[0]="clang_getDiagnostic()."
| |     `-TextComment 0x5555d4c10630 <line:1485:1, col:3> Text="   "
| `-EnumConstantDecl 0x5555d4b78ec8 <line:1492:3, col:27> col:3 CXSaveError_InvalidTU 'int'
|   |-ConstantExpr 0x5555d4b78ea8 <col:27> 'int'
|   | |-value: Int 3
|   | `-IntegerLiteral 0x5555d4b78e88 <col:27> 'int' 3
|   `-FullComment 0x5555d4c107a0 <line:1489:5, line:1490:26>
|     `-ParagraphComment 0x5555d4c10770 <line:1489:5, line:1490:26>
|       |-TextComment 0x5555d4c10720 <line:1489:5, col:64> Text=" Indicates that the translation unit to be saved was somehow"
|       `-TextComment 0x5555d4c10740 <line:1490:5, col:26> Text=" invalid (e.g., NULL)."
|-FunctionDecl 0x5555d4b79410 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:1520:62> line:1518:20 clang_saveTranslationUnit 'int (CXTranslationUnit, const char *, unsigned int)'
| |-ParmVarDecl 0x5555d4b78f78 <col:46, col:64> col:64 TU 'CXTranslationUnit':'struct CXTranslationUnitImpl *'
| |-ParmVarDecl 0x5555d4b78ff8 <line:1519:46, col:58> col:58 FileName 'const char *'
| |-ParmVarDecl 0x5555d4b79078 <line:1520:46, col:55> col:55 options 'unsigned int'
| |-VisibilityAttr 0x5555d4b794d0 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c10f60 </workspace/clang-c/Index.h:1496:3, line:1516:80>
|   |-ParagraphComment 0x5555d4c10860 <line:1496:3, line:1497:33>
|   | |-TextComment 0x5555d4c10810 <line:1496:3, col:63> Text=" Saves a translation unit into a serialized representation of"
|   | `-TextComment 0x5555d4c10830 <line:1497:3, col:33> Text=" that translation unit on disk."
|   |-ParagraphComment 0x5555d4c10a80 <line:1499:3, line:1504:9>
|   | |-TextComment 0x5555d4c10880 <line:1499:3, col:66> Text=" Any translation unit that was parsed without error can be saved"
|   | |-TextComment 0x5555d4c108a0 <line:1500:3, col:68> Text=" into a file. The translation unit can then be deserialized into a"
|   | |-TextComment 0x5555d4c108c0 <line:1501:3, col:7> Text=" new "
|   | |-InlineCommandComment 0x5555d4c10910 <col:8, col:9> Name="c" RenderMonospaced Arg[0]="CXTranslationUnit"
|   | |-TextComment 0x5555d4c10930 <col:28, col:33> Text=" with "
|   | |-InlineCommandComment 0x5555d4c10990 <col:34, col:35> Name="c" RenderMonospaced Arg[0]="clang_createTranslationUnit()"
|   | |-TextComment 0x5555d4c109b0 <col:66, col:69> Text=" or,"
|   | |-TextComment 0x5555d4c109d0 <line:1502:3, col:64> Text=" if it is an incomplete translation unit that corresponds to a"
|   | |-TextComment 0x5555d4c109f0 <line:1503:3, col:70> Text=" header, used as a precompiled header when parsing other translation"
|   | `-TextComment 0x5555d4c10a10 <line:1504:3, col:9> Text=" units."
|   |-ParagraphComment 0x5555d4c10ad0 <line:1506:3>
|   | `-TextComment 0x5555d4c10aa0 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c10af0 <col:4, col:42> [in] implicitly Param="TU" ParamIndex=0
|   | `-ParagraphComment 0x5555d4c10b80 <col:13, col:42>
|   |   `-TextComment 0x5555d4c10b50 <col:13, col:42> Text=" The translation unit to save."
|   |-ParagraphComment 0x5555d4c10bd0 <line:1508:3>
|   | `-TextComment 0x5555d4c10ba0 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c10bf0 <col:4, col:72> [in] implicitly Param="FileName" ParamIndex=1
|   | `-ParagraphComment 0x5555d4c10c80 <col:19, col:72>
|   |   `-TextComment 0x5555d4c10c50 <col:19, col:72> Text=" The file to which the translation unit will be saved."
|   |-ParagraphComment 0x5555d4c10cd0 <line:1510:3>
|   | `-TextComment 0x5555d4c10ca0 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c10cf0 <col:4, line:1512:35> [in] implicitly Param="options" ParamIndex=2
|   | `-ParagraphComment 0x5555d4c10dd0 <line:1510:18, line:1512:35>
|   |   |-TextComment 0x5555d4c10d50 <line:1510:18, col:76> Text=" A bitmask of options that affects how the translation unit"
|   |   |-TextComment 0x5555d4c10d70 <line:1511:3, col:47> Text=" is saved. This should be a bitwise OR of the"
|   |   `-TextComment 0x5555d4c10d90 <line:1512:3, col:35> Text=" CXSaveTranslationUnit_XXX flags."
|   |-ParagraphComment 0x5555d4c10e20 <line:1514:3>
|   | `-TextComment 0x5555d4c10df0 <col:3> Text=" "
|   `-BlockCommandComment 0x5555d4c10e40 <col:4, line:1516:80> Name="returns"
|     `-ParagraphComment 0x5555d4c10ef0 <line:1514:12, line:1516:80>
|       |-TextComment 0x5555d4c10e70 <line:1514:12, col:77> Text=" A value that will match one of the enumerators of the CXSaveError"
|       |-TextComment 0x5555d4c10e90 <line:1515:3, col:79> Text=" enumeration. Zero (CXSaveError_None) indicates that the translation unit was"
|       `-TextComment 0x5555d4c10eb0 <line:1516:3, col:80> Text=" saved successfully, while a non-zero value indicates that a problem occurred."
|-FunctionDecl 0x5555d4b79620 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:1529:71> col:25 clang_suspendTranslationUnit 'unsigned int (CXTranslationUnit)'
| |-ParmVarDecl 0x5555d4b79588 <col:54> col:71 'CXTranslationUnit':'struct CXTranslationUnitImpl *'
| |-VisibilityAttr 0x5555d4b796d0 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c111c0 </workspace/clang-c/Index.h:1523:3, line:1527:76>
|   |-ParagraphComment 0x5555d4c11000 <line:1523:3, col:73>
|   | `-TextComment 0x5555d4c10fd0 <col:3, col:73> Text=" Suspend a translation unit in order to free memory associated with it."
|   `-ParagraphComment 0x5555d4c11190 <line:1525:3, line:1527:76>
|     |-TextComment 0x5555d4c11020 <line:1525:3, col:79> Text=" A suspended translation unit uses significantly less memory but on the other"
|     |-TextComment 0x5555d4c11040 <line:1526:3, col:46> Text=" side does not support any other calls than "
|     |-InlineCommandComment 0x5555d4c110a0 <col:47, col:48> Name="c" RenderMonospaced Arg[0]="clang_reparseTranslationUnit"
|     |-TextComment 0x5555d4c110c0 <line:1527:3, col:19> Text=" to resume it or "
|     |-InlineCommandComment 0x5555d4c11120 <col:20, col:21> Name="c" RenderMonospaced Arg[0]="clang_disposeTranslationUnit"
|     `-TextComment 0x5555d4c11140 <col:51, col:76> Text=" to dispose it completely."
|-FunctionDecl 0x5555d4b79878 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:1534:67> col:21 clang_disposeTranslationUnit 'void (CXTranslationUnit)'
| |-ParmVarDecl 0x5555d4b79788 <col:50> col:67 'CXTranslationUnit':'struct CXTranslationUnitImpl *'
| |-VisibilityAttr 0x5555d4b79928 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c11290 </workspace/clang-c/Index.h:1532:3, col:50>
|   `-ParagraphComment 0x5555d4c11260 <col:3, col:50>
|     `-TextComment 0x5555d4c11230 <col:3, col:50> Text=" Destroy the specified CXTranslationUnit object."
|-EnumDecl 0x5555d4b799a8 <line:1543:1, line:1548:1> line:1543:6 CXReparse_Flags
| |-FullComment 0x5555d4c11400 <line:1537:3, line:1541:34>
| | |-ParagraphComment 0x5555d4c11330 <line:1537:3, col:57>
| | | `-TextComment 0x5555d4c11300 <col:3, col:57> Text=" Flags that control the reparsing of translation units."
| | `-ParagraphComment 0x5555d4c113d0 <line:1539:3, line:1541:34>
| |   |-TextComment 0x5555d4c11350 <line:1539:3, col:67> Text=" The enumerators in this enumeration type are meant to be bitwise"
| |   |-TextComment 0x5555d4c11370 <line:1540:3, col:61> Text=" ORed together to specify which options should be used when"
| |   `-TextComment 0x5555d4c11390 <line:1541:3, col:34> Text=" reparsing the translation unit."
| `-EnumConstantDecl 0x5555d4b79ad8 <line:1547:3, col:20> col:3 CXReparse_None 'int'
|   |-ConstantExpr 0x5555d4b79ab8 <col:20> 'int'
|   | |-value: Int 0
|   | `-IntegerLiteral 0x5555d4b79a98 <col:20> 'int' 0
|   `-FullComment 0x5555d4c114d0 <line:1545:5, col:67>
|     `-ParagraphComment 0x5555d4c114a0 <col:5, col:67>
|       `-TextComment 0x5555d4c11470 <col:5, col:67> Text=" Used to indicate that no special reparsing options are needed."
|-FunctionDecl 0x5555d4b79c20 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:1560:73> col:25 clang_defaultReparseOptions 'unsigned int (CXTranslationUnit)'
| |-ParmVarDecl 0x5555d4b79b88 <col:53, col:71> col:71 TU 'CXTranslationUnit':'struct CXTranslationUnitImpl *'
| |-VisibilityAttr 0x5555d4b79cd0 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c11740 </workspace/clang-c/Index.h:1551:3, line:1558:15>
|   |-ParagraphComment 0x5555d4c11590 <line:1551:3, line:1552:8>
|   | |-TextComment 0x5555d4c11540 <line:1551:3, col:72> Text=" Returns the set of flags that is suitable for reparsing a translation"
|   | `-TextComment 0x5555d4c11560 <line:1552:3, col:8> Text=" unit."
|   `-ParagraphComment 0x5555d4c11710 <line:1554:3, line:1558:15>
|     |-TextComment 0x5555d4c115b0 <line:1554:3, col:48> Text=" The set of flags returned provide options for"
|     |-TextComment 0x5555d4c115d0 <line:1555:3> Text=" "
|     |-InlineCommandComment 0x5555d4c11630 <col:4, col:5> Name="c" RenderMonospaced Arg[0]="clang_reparseTranslationUnit()"
|     |-TextComment 0x5555d4c11650 <col:37, col:66> Text=" by default. The returned flag"
|     |-TextComment 0x5555d4c11670 <line:1556:3, col:77> Text=" set contains an unspecified set of optimizations geared toward common uses"
|     |-TextComment 0x5555d4c11690 <line:1557:3, col:77> Text=" of reparsing. The set of optimizations enabled may change from one version"
|     `-TextComment 0x5555d4c116b0 <line:1558:3, col:15> Text=" to the next."
|-FunctionDecl 0x5555d4b7a060 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:1604:46> line:1602:1 clang_reparseTranslationUnit 'int (CXTranslationUnit, unsigned int, struct CXUnsavedFile *, unsigned int)'
| |-ParmVarDecl 0x5555d4b79d88 <col:30, col:48> col:48 TU 'CXTranslationUnit':'struct CXTranslationUnitImpl *'
| |-ParmVarDecl 0x5555d4b79e08 <col:52, col:61> col:61 num_unsaved_files 'unsigned int'
| |-ParmVarDecl 0x5555d4b79e98 <line:1603:30, col:52> col:52 unsaved_files 'struct CXUnsavedFile *'
| |-ParmVarDecl 0x5555d4b79f18 <line:1604:30, col:39> col:39 options 'unsigned int'
| |-VisibilityAttr 0x5555d4b7a128 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c124a0 </workspace/clang-c/Index.h:1563:3, line:1599:52>
|   |-ParagraphComment 0x5555d4c117e0 <line:1563:3, col:64>
|   | `-TextComment 0x5555d4c117b0 <col:3, col:64> Text=" Reparse the source files that produced this translation unit."
|   |-ParagraphComment 0x5555d4c11950 <line:1565:3, line:1569:25>
|   | |-TextComment 0x5555d4c11800 <line:1565:3, col:72> Text=" This routine can be used to re-parse the source files that originally"
|   | |-TextComment 0x5555d4c11820 <line:1566:3, col:77> Text=" created the given translation unit, for example because those source files"
|   | |-TextComment 0x5555d4c11840 <line:1567:3, col:49> Text=" have changed (either on disk or as passed via "
|   | |-InlineCommandComment 0x5555d4c11890 <col:50, col:51> Name="p" RenderMonospaced Arg[0]="unsaved_files)."
|   | |-TextComment 0x5555d4c118b0 <col:68, col:71> Text=" The"
|   | |-TextComment 0x5555d4c118d0 <line:1568:3, col:72> Text=" source code will be reparsed with the same command-line options as it"
|   | `-TextComment 0x5555d4c118f0 <line:1569:3, col:25> Text=" was originally parsed."
|   |-ParagraphComment 0x5555d4c11a60 <line:1571:3, line:1576:27>
|   | |-TextComment 0x5555d4c11970 <line:1571:3, col:76> Text=" Reparsing a translation unit invalidates all cursors and source locations"
|   | |-TextComment 0x5555d4c11990 <line:1572:3, col:76> Text=" that refer into that translation unit. This makes reparsing a translation"
|   | |-TextComment 0x5555d4c119b0 <line:1573:3, col:75> Text=" unit semantically equivalent to destroying the translation unit and then"
|   | |-TextComment 0x5555d4c119d0 <line:1574:3, col:72> Text=" creating a new translation unit with the same command-line arguments."
|   | |-TextComment 0x5555d4c119f0 <line:1575:3, col:61> Text=" However, it may be more efficient to reparse a translation"
|   | `-TextComment 0x5555d4c11a10 <line:1576:3, col:27> Text=" unit using this routine."
|   |-ParagraphComment 0x5555d4c11ab0 <line:1578:3>
|   | `-TextComment 0x5555d4c11a80 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c11ad0 <col:4, line:1580:5> [in] implicitly Param="TU" ParamIndex=0
|   | `-ParagraphComment 0x5555d4c11c20 <line:1578:13, line:1580:5>
|   |   |-TextComment 0x5555d4c11b30 <line:1578:13, col:71> Text=" The translation unit whose contents will be re-parsed. The"
|   |   |-TextComment 0x5555d4c11b50 <line:1579:3, col:56> Text=" translation unit must originally have been built with"
|   |   |-TextComment 0x5555d4c11b70 <line:1580:3> Text=" "
|   |   `-InlineCommandComment 0x5555d4c11be0 <col:4, col:5> Name="c" RenderMonospaced Arg[0]="clang_createTranslationUnitFromSourceFile()."
|   |-ParagraphComment 0x5555d4c11c90 <line:1582:3>
|   | `-TextComment 0x5555d4c11c40 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c11cb0 <col:4, col:68> [in] implicitly Param="num_unsaved_files" ParamIndex=1
|   | `-ParagraphComment 0x5555d4c11da0 <col:28, col:68>
|   |   |-TextComment 0x5555d4c11d20 <col:28, col:66> Text=" The number of unsaved file entries in "
|   |   `-InlineCommandComment 0x5555d4c11d70 <col:67, col:68> Name="p" RenderMonospaced Arg[0]="unsaved_files."
|   |-ParagraphComment 0x5555d4c11df0 <line:1585:3>
|   | `-TextComment 0x5555d4c11dc0 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c11e10 <col:4, line:1589:68> [in] implicitly Param="unsaved_files" ParamIndex=2
|   | `-ParagraphComment 0x5555d4c11f40 <line:1585:24, line:1589:68>
|   |   |-TextComment 0x5555d4c11e70 <line:1585:24, col:70> Text=" The files that have not yet been saved to disk"
|   |   |-TextComment 0x5555d4c11e90 <line:1586:3, col:61> Text=" but may be required for parsing, including the contents of"
|   |   |-TextComment 0x5555d4c11eb0 <line:1587:3, col:70> Text=" those files.  The contents and name of these files (as specified by"
|   |   |-TextComment 0x5555d4c11ed0 <line:1588:3, col:72> Text=" CXUnsavedFile) are copied when necessary, so the client only needs to"
|   |   `-TextComment 0x5555d4c11ef0 <line:1589:3, col:68> Text=" guarantee their validity until the call to this function returns."
|   |-ParagraphComment 0x5555d4c11f90 <line:1591:3>
|   | `-TextComment 0x5555d4c11f60 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c11fb0 <col:4, line:1593:68> [in] implicitly Param="options" ParamIndex=3
|   | `-ParagraphComment 0x5555d4c12120 <line:1591:18, line:1593:68>
|   |   |-TextComment 0x5555d4c12010 <line:1591:18, col:79> Text=" A bitset of options composed of the flags in CXReparse_Flags."
|   |   |-TextComment 0x5555d4c12030 <line:1592:3, col:16> Text=" The function "
|   |   |-InlineCommandComment 0x5555d4c12090 <col:17, col:18> Name="c" RenderMonospaced Arg[0]="clang_defaultReparseOptions()"
|   |   |-TextComment 0x5555d4c120b0 <col:49, col:74> Text=" produces a default set of"
|   |   `-TextComment 0x5555d4c120d0 <line:1593:3, col:68> Text=" options recommended for most uses, based on the translation unit."
|   |-ParagraphComment 0x5555d4c12170 <line:1595:3>
|   | `-TextComment 0x5555d4c12140 <col:3> Text=" "
|   `-BlockCommandComment 0x5555d4c12190 <col:4, line:1599:52> Name="returns"
|     `-ParagraphComment 0x5555d4c12410 <line:1595:12, line:1599:52>
|       |-TextComment 0x5555d4c121c0 <line:1595:12, col:78> Text=" 0 if the sources could be reparsed.  A non-zero error code will be"
|       |-TextComment 0x5555d4c121e0 <line:1596:3, col:74> Text=" returned if reparsing was impossible, such that the translation unit is"
|       |-TextComment 0x5555d4c12200 <line:1597:3, col:51> Text=" invalid. In such cases, the only valid call for "
|       |-InlineCommandComment 0x5555d4c12240 <col:52, col:53> Name="c" RenderMonospaced Arg[0]="TU"
|       |-TextComment 0x5555d4c12260 <col:57, col:59> Text=" is"
|       |-TextComment 0x5555d4c12280 <line:1598:3> Text=" "
|       |-InlineCommandComment 0x5555d4c122e0 <col:4, col:5> Name="c" RenderMonospaced Arg[0]="clang_disposeTranslationUnit(TU)."
|       |-TextComment 0x5555d4c12300 <col:40, col:73> Text="  The error codes returned by this"
|       |-TextComment 0x5555d4c12320 <line:1599:3, col:32> Text=" routine are described by the "
|       |-InlineCommandComment 0x5555d4c12370 <col:33, col:34> Name="c" RenderMonospaced Arg[0]="CXErrorCode"
|       `-TextComment 0x5555d4c12390 <col:47, col:52> Text=" enum."
|-EnumDecl 0x5555d4b7a1a8 <line:1609:1, line:1630:1> line:1609:6 CXTUResourceUsageKind
| |-FullComment 0x5555d4c12570 <line:1607:3, col:62>
| | `-ParagraphComment 0x5555d4c12540 <col:3, col:62>
| |   `-TextComment 0x5555d4c12510 <col:3, col:62> Text=" Categorizes how memory is being used by a translation unit."
| |-EnumConstantDecl 0x5555d4b7a2b0 <line:1610:3, col:27> col:3 referenced CXTUResourceUsage_AST 'int'
| | `-ConstantExpr 0x5555d4b7a290 <col:27> 'int'
| |   |-value: Int 1
| |   `-IntegerLiteral 0x5555d4b7a270 <col:27> 'int' 1
| |-EnumConstantDecl 0x5555d4b7a340 <line:1611:3, col:35> col:3 CXTUResourceUsage_Identifiers 'int'
| | `-ConstantExpr 0x5555d4b7a320 <col:35> 'int'
| |   |-value: Int 2
| |   `-IntegerLiteral 0x5555d4b7a300 <col:35> 'int' 2
| |-EnumConstantDecl 0x5555d4b7a5a0 <line:1612:3, col:33> col:3 CXTUResourceUsage_Selectors 'int'
| | `-ConstantExpr 0x5555d4b7a3b0 <col:33> 'int'
| |   |-value: Int 3
| |   `-IntegerLiteral 0x5555d4b7a390 <col:33> 'int' 3
| |-EnumConstantDecl 0x5555d4b7a630 <line:1613:3, col:47> col:3 CXTUResourceUsage_GlobalCompletionResults 'int'
| | `-ConstantExpr 0x5555d4b7a610 <col:47> 'int'
| |   |-value: Int 4
| |   `-IntegerLiteral 0x5555d4b7a5f0 <col:47> 'int' 4
| |-EnumConstantDecl 0x5555d4b7a6c0 <line:1614:3, col:49> col:3 CXTUResourceUsage_SourceManagerContentCache 'int'
| | `-ConstantExpr 0x5555d4b7a6a0 <col:49> 'int'
| |   |-value: Int 5
| |   `-IntegerLiteral 0x5555d4b7a680 <col:49> 'int' 5
| |-EnumConstantDecl 0x5555d4b7a750 <line:1615:3, col:38> col:3 CXTUResourceUsage_AST_SideTables 'int'
| | `-ConstantExpr 0x5555d4b7a730 <col:38> 'int'
| |   |-value: Int 6
| |   `-IntegerLiteral 0x5555d4b7a710 <col:38> 'int' 6
| |-EnumConstantDecl 0x5555d4b7a7e0 <line:1616:3, col:54> col:3 CXTUResourceUsage_SourceManager_Membuffer_Malloc 'int'
| | `-ConstantExpr 0x5555d4b7a7c0 <col:54> 'int'
| |   |-value: Int 7
| |   `-IntegerLiteral 0x5555d4b7a7a0 <col:54> 'int' 7
| |-EnumConstantDecl 0x5555d4b7a870 <line:1617:3, col:52> col:3 CXTUResourceUsage_SourceManager_Membuffer_MMap 'int'
| | `-ConstantExpr 0x5555d4b7a850 <col:52> 'int'
| |   |-value: Int 8
| |   `-IntegerLiteral 0x5555d4b7a830 <col:52> 'int' 8
| |-EnumConstantDecl 0x5555d4b7a900 <line:1618:3, col:58> col:3 CXTUResourceUsage_ExternalASTSource_Membuffer_Malloc 'int'
| | `-ConstantExpr 0x5555d4b7a8e0 <col:58> 'int'
| |   |-value: Int 9
| |   `-IntegerLiteral 0x5555d4b7a8c0 <col:58> 'int' 9
| |-EnumConstantDecl 0x5555d4b7a990 <line:1619:3, col:56> col:3 CXTUResourceUsage_ExternalASTSource_Membuffer_MMap 'int'
| | `-ConstantExpr 0x5555d4b7a970 <col:56> 'int'
| |   |-value: Int 10
| |   `-IntegerLiteral 0x5555d4b7a950 <col:56> 'int' 10
| |-EnumConstantDecl 0x5555d4b7aa20 <line:1620:3, col:36> col:3 CXTUResourceUsage_Preprocessor 'int'
| | `-ConstantExpr 0x5555d4b7aa00 <col:36> 'int'
| |   |-value: Int 11
| |   `-IntegerLiteral 0x5555d4b7a9e0 <col:36> 'int' 11
| |-EnumConstantDecl 0x5555d4b7aab0 <line:1621:3, col:43> col:3 CXTUResourceUsage_PreprocessingRecord 'int'
| | `-ConstantExpr 0x5555d4b7aa90 <col:43> 'int'
| |   |-value: Int 12
| |   `-IntegerLiteral 0x5555d4b7aa70 <col:43> 'int' 12
| |-EnumConstantDecl 0x5555d4b7ab40 <line:1622:3, col:52> col:3 CXTUResourceUsage_SourceManager_DataStructures 'int'
| | `-ConstantExpr 0x5555d4b7ab20 <col:52> 'int'
| |   |-value: Int 13
| |   `-IntegerLiteral 0x5555d4b7ab00 <col:52> 'int' 13
| |-EnumConstantDecl 0x5555d4b7abd0 <line:1623:3, col:49> col:3 referenced CXTUResourceUsage_Preprocessor_HeaderSearch 'int'
| | `-ConstantExpr 0x5555d4b7abb0 <col:49> 'int'
| |   |-value: Int 14
| |   `-IntegerLiteral 0x5555d4b7ab90 <col:49> 'int' 14
| |-EnumConstantDecl 0x5555d4b7ac60 <line:1624:3, col:45> col:3 CXTUResourceUsage_MEMORY_IN_BYTES_BEGIN 'int'
| | `-ConstantExpr 0x5555d4b7ac40 <col:45> 'int'
| |   |-value: Int 1
| |   `-DeclRefExpr 0x5555d4b7ac20 <col:45> 'int' EnumConstant 0x5555d4b7a2b0 'CXTUResourceUsage_AST' 'int'
| |-EnumConstantDecl 0x5555d4b7acf0 <line:1625:3, line:1626:7> line:1625:3 CXTUResourceUsage_MEMORY_IN_BYTES_END 'int'
| | `-ConstantExpr 0x5555d4b7acd0 <line:1626:7> 'int'
| |   |-value: Int 14
| |   `-DeclRefExpr 0x5555d4b7acb0 <col:7> 'int' EnumConstant 0x5555d4b7abd0 'CXTUResourceUsage_Preprocessor_HeaderSearch' 'int'
| |-EnumConstantDecl 0x5555d4b7ad80 <line:1628:3, col:29> col:3 CXTUResourceUsage_First 'int'
| | `-ConstantExpr 0x5555d4b7ad60 <col:29> 'int'
| |   |-value: Int 1
| |   `-DeclRefExpr 0x5555d4b7ad40 <col:29> 'int' EnumConstant 0x5555d4b7a2b0 'CXTUResourceUsage_AST' 'int'
| `-EnumConstantDecl 0x5555d4b7ae10 <line:1629:3, col:28> col:3 CXTUResourceUsage_Last 'int'
|   `-ConstantExpr 0x5555d4b7adf0 <col:28> 'int'
|     |-value: Int 14
|     `-DeclRefExpr 0x5555d4b7add0 <col:28> 'int' EnumConstant 0x5555d4b7abd0 'CXTUResourceUsage_Preprocessor_HeaderSearch' 'int'
|-FunctionDecl 0x5555d4b7b000 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:1637:73> col:13 clang_getTUResourceUsageName 'const char *(enum CXTUResourceUsageKind)'
| |-ParmVarDecl 0x5555d4b7af00 <col:42, col:69> col:69 kind 'enum CXTUResourceUsageKind':'enum CXTUResourceUsageKind'
| |-VisibilityAttr 0x5555d4b7b0b0 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c12660 </workspace/clang-c/Index.h:1633:3, line:1634:72>
|   `-ParagraphComment 0x5555d4c12630 <line:1633:3, line:1634:72>
|     |-TextComment 0x5555d4c125e0 <line:1633:3, col:70> Text=" Returns the human-readable null-terminated C string that represents"
|     `-TextComment 0x5555d4c12600 <line:1634:3, col:72> Text="  the name of the memory category.  This string should never be freed."
|-RecordDecl 0x5555d4b7b108 <line:1639:9, line:1645:1> line:1639:16 struct CXTUResourceUsageEntry definition
| |-FieldDecl 0x5555d4b7b1d0 <line:1641:3, col:30> col:30 kind 'enum CXTUResourceUsageKind':'enum CXTUResourceUsageKind'
| `-FieldDecl 0x5555d4b7b238 <line:1644:3, col:17> col:17 amount 'unsigned long'
|-TypedefDecl 0x5555d4b7b2e8 <line:1639:1, line:1645:3> col:3 referenced CXTUResourceUsageEntry 'struct CXTUResourceUsageEntry':'struct CXTUResourceUsageEntry'
| `-ElaboratedType 0x5555d4b7b290 'struct CXTUResourceUsageEntry' sugar
|   `-RecordType 0x5555d4b7b190 'struct CXTUResourceUsageEntry'
|     `-Record 0x5555d4b7b108 'CXTUResourceUsageEntry'
|-RecordDecl 0x5555d4b7b380 <line:1650:9, line:1661:1> line:1650:16 struct CXTUResourceUsage definition
| |-FullComment 0x5555d4c12730 <line:1648:3, col:67>
| | `-ParagraphComment 0x5555d4c12700 <col:3, col:67>
| |   `-TextComment 0x5555d4c126d0 <col:3, col:67> Text=" The memory usage of a CXTranslationUnit, broken into categories."
| |-FieldDecl 0x5555d4b7b438 <line:1652:3, col:9> col:9 data 'void *'
| |-FieldDecl 0x5555d4b7b4a0 <line:1655:3, col:12> col:12 numEntries 'unsigned int'
| `-FieldDecl 0x5555d4b7b670 <line:1659:3, col:27> col:27 entries 'CXTUResourceUsageEntry *'
|-TypedefDecl 0x5555d4b7b718 <line:1650:1, line:1661:3> col:3 referenced CXTUResourceUsage 'struct CXTUResourceUsage':'struct CXTUResourceUsage'
| |-ElaboratedType 0x5555d4b7b6c0 'struct CXTUResourceUsage' sugar
| | `-RecordType 0x5555d4b7b400 'struct CXTUResourceUsage'
| |   `-Record 0x5555d4b7b380 'CXTUResourceUsage'
| `-FullComment 0x5555d4c12800 <line:1648:3, col:67>
|   `-ParagraphComment 0x5555d4c127d0 <col:3, col:67>
|     `-TextComment 0x5555d4c127a0 <col:3, col:67> Text=" The memory usage of a CXTranslationUnit, broken into categories."
|-FunctionDecl 0x5555d4b7b938 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:1668:48> col:1 clang_getCXTUResourceUsage 'CXTUResourceUsage (CXTranslationUnit)'
| |-ParmVarDecl 0x5555d4b7b840 <col:28, col:46> col:46 TU 'CXTranslationUnit':'struct CXTranslationUnitImpl *'
| |-VisibilityAttr 0x5555d4b7b9e8 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c128f0 </workspace/clang-c/Index.h:1664:3, line:1665:61>
|   `-ParagraphComment 0x5555d4c128c0 <line:1664:3, line:1665:61>
|     |-TextComment 0x5555d4c12870 <line:1664:3, col:62> Text=" Return the memory usage of a translation unit.  This object"
|     `-TextComment 0x5555d4c12890 <line:1665:3, col:61> Text="  should be released with clang_disposeCXTUResourceUsage()."
|-FunctionDecl 0x5555d4b7bb68 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:1670:75> col:21 clang_disposeCXTUResourceUsage 'void (CXTUResourceUsage)'
| |-ParmVarDecl 0x5555d4b7ba70 <col:52, col:70> col:70 usage 'CXTUResourceUsage':'struct CXTUResourceUsage'
| `-VisibilityAttr 0x5555d4b7bc18 </workspace/clang-c/Platform.h:34:41, col:61> Default
|-FunctionDecl 0x5555d4b7be28 <col:26, /workspace/clang-c/Index.h:1678:60> col:1 clang_getTranslationUnitTargetInfo 'CXTargetInfo (CXTranslationUnit)'
| |-ParmVarDecl 0x5555d4b7bd30 <col:36, col:54> col:54 CTUnit 'CXTranslationUnit':'struct CXTranslationUnitImpl *'
| |-VisibilityAttr 0x5555d4b7bed8 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c12a10 </workspace/clang-c/Index.h:1673:3, line:1675:71>
|   |-ParagraphComment 0x5555d4c12990 <line:1673:3, col:52>
|   | `-TextComment 0x5555d4c12960 <col:3, col:52> Text=" Get target information for this translation unit."
|   `-ParagraphComment 0x5555d4c129e0 <line:1675:3, col:71>
|     `-TextComment 0x5555d4c129b0 <col:3, col:71> Text=" The CXTargetInfo object cannot outlive the CXTranslationUnit object."
|-FunctionDecl 0x5555d4b7c078 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:1683:63> col:21 clang_TargetInfo_dispose 'void (CXTargetInfo)'
| |-ParmVarDecl 0x5555d4b7bf88 <col:46, col:59> col:59 Info 'CXTargetInfo':'struct CXTargetInfoImpl *'
| |-VisibilityAttr 0x5555d4b7c128 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c12ae0 </workspace/clang-c/Index.h:1681:3, col:35>
|   `-ParagraphComment 0x5555d4c12ab0 <col:3, col:35>
|     `-TextComment 0x5555d4c12a80 <col:3, col:35> Text=" Destroy the CXTargetInfo object."
|-FunctionDecl 0x5555d4b7c2c8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:1690:69> col:25 clang_TargetInfo_getTriple 'CXString (CXTargetInfo)'
| |-ParmVarDecl 0x5555d4b7c1d8 <col:52, col:65> col:65 Info 'CXTargetInfo':'struct CXTargetInfoImpl *'
| |-VisibilityAttr 0x5555d4b7c378 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c12c00 </workspace/clang-c/Index.h:1686:3, line:1688:49>
|   |-ParagraphComment 0x5555d4c12b80 <line:1686:3, col:48>
|   | `-TextComment 0x5555d4c12b50 <col:3, col:48> Text=" Get the normalized target triple as a string."
|   `-ParagraphComment 0x5555d4c12bd0 <line:1688:3, col:49>
|     `-TextComment 0x5555d4c12ba0 <col:3, col:49> Text=" Returns the empty string in case of any error."
|-FunctionDecl 0x5555d4b7c520 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:1697:70> col:20 clang_TargetInfo_getPointerWidth 'int (CXTargetInfo)'
| |-ParmVarDecl 0x5555d4b7c428 <col:53, col:66> col:66 Info 'CXTargetInfo':'struct CXTargetInfoImpl *'
| |-VisibilityAttr 0x5555d4b7c5d0 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c12d20 </workspace/clang-c/Index.h:1693:3, line:1695:31>
|   |-ParagraphComment 0x5555d4c12ca0 <line:1693:3, col:47>
|   | `-TextComment 0x5555d4c12c70 <col:3, col:47> Text=" Get the pointer width of the target in bits."
|   `-ParagraphComment 0x5555d4c12cf0 <line:1695:3, col:31>
|     `-TextComment 0x5555d4c12cc0 <col:3, col:31> Text=" Returns -1 in case of error."
|-EnumDecl 0x5555d4b7d7e8 <line:1706:1, line:2694:1> line:1706:6 CXCursorKind
| |-FullComment 0x5555d4c12df0 <line:1704:3, col:56>
| | `-ParagraphComment 0x5555d4c12dc0 <col:3, col:56>
| |   `-TextComment 0x5555d4c12d90 <col:3, col:56> Text=" Describes the kind of entity that a cursor refers to."
| |-EnumConstantDecl 0x5555d4b7d918 <line:1717:3, col:28> col:3 referenced CXCursor_UnexposedDecl 'int'
| | |-ConstantExpr 0x5555d4b7d8f8 <col:28> 'int'
| | | |-value: Int 1
| | | `-IntegerLiteral 0x5555d4b7d8d8 <col:28> 'int' 1
| | `-FullComment 0x5555d4c12fa0 <line:1709:5, line:1715:40>
| |   |-ParagraphComment 0x5555d4c12eb0 <line:1709:5, line:1710:15>
| |   | |-TextComment 0x5555d4c12e60 <line:1709:5, col:62> Text=" A declaration whose specific kind is not exposed via this"
| |   | `-TextComment 0x5555d4c12e80 <line:1710:5, col:15> Text=" interface."
| |   `-ParagraphComment 0x5555d4c12f70 <line:1712:5, line:1715:40>
| |     |-TextComment 0x5555d4c12ed0 <line:1712:5, col:70> Text=" Unexposed declarations have the same operations as any other kind"
| |     |-TextComment 0x5555d4c12ef0 <line:1713:5, col:64> Text=" of declaration; one can extract their location information,"
| |     |-TextComment 0x5555d4c12f10 <line:1714:5, col:70> Text=" spelling, find their definitions, etc. However, the specific kind"
| |     `-TextComment 0x5555d4c12f30 <line:1715:5, col:40> Text=" of the declaration is not reported."
| |-EnumConstantDecl 0x5555d4b7d9d8 <line:1719:3, col:25> col:3 CXCursor_StructDecl 'int'
| | |-ConstantExpr 0x5555d4b7d9b8 <col:25> 'int'
| | | |-value: Int 2
| | | `-IntegerLiteral 0x5555d4b7d998 <col:25> 'int' 2
| | `-FullComment 0x5555d4c13070 <line:1718:6, col:25>
| |   `-ParagraphComment 0x5555d4c13040 <col:6, col:25>
| |     `-TextComment 0x5555d4c13010 <col:6, col:25> Text=" A C or C++ struct. "
| |-EnumConstantDecl 0x5555d4b7da98 <line:1721:3, col:24> col:3 CXCursor_UnionDecl 'int'
| | |-ConstantExpr 0x5555d4b7da78 <col:24> 'int'
| | | |-value: Int 3
| | | `-IntegerLiteral 0x5555d4b7da58 <col:24> 'int' 3
| | `-FullComment 0x5555d4c13140 <line:1720:6, col:24>
| |   `-ParagraphComment 0x5555d4c13110 <col:6, col:24>
| |     `-TextComment 0x5555d4c130e0 <col:6, col:24> Text=" A C or C++ union. "
| |-EnumConstantDecl 0x5555d4b7db58 <line:1723:3, col:24> col:3 CXCursor_ClassDecl 'int'
| | |-ConstantExpr 0x5555d4b7db38 <col:24> 'int'
| | | |-value: Int 4
| | | `-IntegerLiteral 0x5555d4b7db18 <col:24> 'int' 4
| | `-FullComment 0x5555d4c13210 <line:1722:6, col:19>
| |   `-ParagraphComment 0x5555d4c131e0 <col:6, col:19>
| |     `-TextComment 0x5555d4c131b0 <col:6, col:19> Text=" A C++ class. "
| |-EnumConstantDecl 0x5555d4b7dc18 <line:1725:3, col:23> col:3 CXCursor_EnumDecl 'int'
| | |-ConstantExpr 0x5555d4b7dbf8 <col:23> 'int'
| | | |-value: Int 5
| | | `-IntegerLiteral 0x5555d4b7dbd8 <col:23> 'int' 5
| | `-FullComment 0x5555d4c132e0 <line:1724:6, col:22>
| |   `-ParagraphComment 0x5555d4c132b0 <col:6, col:22>
| |     `-TextComment 0x5555d4c13280 <col:6, col:22> Text=" An enumeration. "
| |-EnumConstantDecl 0x5555d4b7dcd8 <line:1730:3, col:24> col:3 CXCursor_FieldDecl 'int'
| | |-ConstantExpr 0x5555d4b7dcb8 <col:24> 'int'
| | | |-value: Int 6
| | | `-IntegerLiteral 0x5555d4b7dc98 <col:24> 'int' 6
| | `-FullComment 0x5555d4c133d0 <line:1727:5, line:1728:33>
| |   `-ParagraphComment 0x5555d4c133a0 <line:1727:5, line:1728:33>
| |     |-TextComment 0x5555d4c13350 <line:1727:5, col:59> Text=" A field (in C) or non-static data member (in C++) in a"
| |     `-TextComment 0x5555d4c13370 <line:1728:5, col:33> Text=" struct, union, or C++ class."
| |-EnumConstantDecl 0x5555d4b7dd98 <line:1732:3, col:31> col:3 CXCursor_EnumConstantDecl 'int'
| | |-ConstantExpr 0x5555d4b7dd78 <col:31> 'int'
| | | |-value: Int 7
| | | `-IntegerLiteral 0x5555d4b7dd58 <col:31> 'int' 7
| | `-FullComment 0x5555d4c134a0 <line:1731:6, col:30>
| |   `-ParagraphComment 0x5555d4c13470 <col:6, col:30>
| |     `-TextComment 0x5555d4c13440 <col:6, col:30> Text=" An enumerator constant. "
| |-EnumConstantDecl 0x5555d4b7de58 <line:1734:3, col:27> col:3 CXCursor_FunctionDecl 'int'
| | |-ConstantExpr 0x5555d4b7de38 <col:27> 'int'
| | | |-value: Int 8
| | | `-IntegerLiteral 0x5555d4b7de18 <col:27> 'int' 8
| | `-FullComment 0x5555d4c13570 <line:1733:6, col:18>
| |   `-ParagraphComment 0x5555d4c13540 <col:6, col:18>
| |     `-TextComment 0x5555d4c13510 <col:6, col:18> Text=" A function. "
| |-EnumConstantDecl 0x5555d4b7df18 <line:1736:3, col:22> col:3 CXCursor_VarDecl 'int'
| | |-ConstantExpr 0x5555d4b7def8 <col:22> 'int'
| | | |-value: Int 9
| | | `-IntegerLiteral 0x5555d4b7ded8 <col:22> 'int' 9
| | `-FullComment 0x5555d4c13640 <line:1735:6, col:18>
| |   `-ParagraphComment 0x5555d4c13610 <col:6, col:18>
| |     `-TextComment 0x5555d4c135e0 <col:6, col:18> Text=" A variable. "
| |-EnumConstantDecl 0x5555d4b7dfd8 <line:1738:3, col:23> col:3 CXCursor_ParmDecl 'int'
| | |-ConstantExpr 0x5555d4b7dfb8 <col:23> 'int'
| | | |-value: Int 10
| | | `-IntegerLiteral 0x5555d4b7df98 <col:23> 'int' 10
| | `-FullComment 0x5555d4c13710 <line:1737:6, col:38>
| |   `-ParagraphComment 0x5555d4c136e0 <col:6, col:38>
| |     `-TextComment 0x5555d4c136b0 <col:6, col:38> Text=" A function or method parameter. "
| |-EnumConstantDecl 0x5555d4b7e098 <line:1740:3, col:32> col:3 CXCursor_ObjCInterfaceDecl 'int'
| | |-ConstantExpr 0x5555d4b7e078 <col:32> 'int'
| | | |-value: Int 11
| | | `-IntegerLiteral 0x5555d4b7e058 <col:32> 'int' 11
| | `-FullComment 0x5555d4c13830 <line:1739:6, col:34>
| |   `-ParagraphComment 0x5555d4c13800 <col:6, col:34>
| |     |-TextComment 0x5555d4c13780 <col:6, col:21> Text=" An Objective-C "
| |     |-TextComment 0x5555d4c137a0 <col:22, col:23> Text="@"
| |     `-TextComment 0x5555d4c137c0 <col:24, col:34> Text="interface. "
| |-EnumConstantDecl 0x5555d4b7e158 <line:1742:3, col:31> col:3 CXCursor_ObjCCategoryDecl 'int'
| | |-ConstantExpr 0x5555d4b7e138 <col:31> 'int'
| | | |-value: Int 12
| | | `-IntegerLiteral 0x5555d4b7e118 <col:31> 'int' 12
| | `-FullComment 0x5555d4c13950 <line:1741:6, col:49>
| |   `-ParagraphComment 0x5555d4c13920 <col:6, col:49>
| |     |-TextComment 0x5555d4c138a0 <col:6, col:21> Text=" An Objective-C "
| |     |-TextComment 0x5555d4c138c0 <col:22, col:23> Text="@"
| |     `-TextComment 0x5555d4c138e0 <col:24, col:49> Text="interface for a category. "
| |-EnumConstantDecl 0x5555d4b7e218 <line:1744:3, col:31> col:3 CXCursor_ObjCProtocolDecl 'int'
| | |-ConstantExpr 0x5555d4b7e1f8 <col:31> 'int'
| | | |-value: Int 13
| | | `-IntegerLiteral 0x5555d4b7e1d8 <col:31> 'int' 13
| | `-FullComment 0x5555d4c13a70 <line:1743:6, col:45>
| |   `-ParagraphComment 0x5555d4c13a40 <col:6, col:45>
| |     |-TextComment 0x5555d4c139c0 <col:6, col:21> Text=" An Objective-C "
| |     |-TextComment 0x5555d4c139e0 <col:22, col:23> Text="@"
| |     `-TextComment 0x5555d4c13a00 <col:24, col:45> Text="protocol declaration. "
| |-EnumConstantDecl 0x5555d4b7e2d8 <line:1746:3, col:31> col:3 CXCursor_ObjCPropertyDecl 'int'
| | |-ConstantExpr 0x5555d4b7e2b8 <col:31> 'int'
| | | |-value: Int 14
| | | `-IntegerLiteral 0x5555d4b7e298 <col:31> 'int' 14
| | `-FullComment 0x5555d4c13b90 <line:1745:6, col:45>
| |   `-ParagraphComment 0x5555d4c13b60 <col:6, col:45>
| |     |-TextComment 0x5555d4c13ae0 <col:6, col:21> Text=" An Objective-C "
| |     |-TextComment 0x5555d4c13b00 <col:22, col:23> Text="@"
| |     `-TextComment 0x5555d4c13b20 <col:24, col:45> Text="property declaration. "
| |-EnumConstantDecl 0x5555d4b7e398 <line:1748:3, col:27> col:3 CXCursor_ObjCIvarDecl 'int'
| | |-ConstantExpr 0x5555d4b7e378 <col:27> 'int'
| | | |-value: Int 15
| | | `-IntegerLiteral 0x5555d4b7e358 <col:27> 'int' 15
| | `-FullComment 0x5555d4c13c60 <line:1747:6, col:40>
| |   `-ParagraphComment 0x5555d4c13c30 <col:6, col:40>
| |     `-TextComment 0x5555d4c13c00 <col:6, col:40> Text=" An Objective-C instance variable. "
| |-EnumConstantDecl 0x5555d4b7e458 <line:1750:3, col:37> col:3 CXCursor_ObjCInstanceMethodDecl 'int'
| | |-ConstantExpr 0x5555d4b7e438 <col:37> 'int'
| | | |-value: Int 16
| | | `-IntegerLiteral 0x5555d4b7e418 <col:37> 'int' 16
| | `-FullComment 0x5555d4c15d50 <line:1749:6, col:38>
| |   `-ParagraphComment 0x5555d4c15d20 <col:6, col:38>
| |     `-TextComment 0x5555d4c15cf0 <col:6, col:38> Text=" An Objective-C instance method. "
| |-EnumConstantDecl 0x5555d4b7e518 <line:1752:3, col:34> col:3 CXCursor_ObjCClassMethodDecl 'int'
| | |-ConstantExpr 0x5555d4b7e4f8 <col:34> 'int'
| | | |-value: Int 17
| | | `-IntegerLiteral 0x5555d4b7e4d8 <col:34> 'int' 17
| | `-FullComment 0x5555d4c15e20 <line:1751:6, col:35>
| |   `-ParagraphComment 0x5555d4c15df0 <col:6, col:35>
| |     `-TextComment 0x5555d4c15dc0 <col:6, col:35> Text=" An Objective-C class method. "
| |-EnumConstantDecl 0x5555d4b7e5d8 <line:1754:3, col:37> col:3 CXCursor_ObjCImplementationDecl 'int'
| | |-ConstantExpr 0x5555d4b7e5b8 <col:37> 'int'
| | | |-value: Int 18
| | | `-IntegerLiteral 0x5555d4b7e598 <col:37> 'int' 18
| | `-FullComment 0x5555d4c15f40 <line:1753:6, col:39>
| |   `-ParagraphComment 0x5555d4c15f10 <col:6, col:39>
| |     |-TextComment 0x5555d4c15e90 <col:6, col:21> Text=" An Objective-C "
| |     |-TextComment 0x5555d4c15eb0 <col:22, col:23> Text="@"
| |     `-TextComment 0x5555d4c15ed0 <col:24, col:39> Text="implementation. "
| |-EnumConstantDecl 0x5555d4b7e698 <line:1756:3, col:35> col:3 CXCursor_ObjCCategoryImplDecl 'int'
| | |-ConstantExpr 0x5555d4b7e678 <col:35> 'int'
| | | |-value: Int 19
| | | `-IntegerLiteral 0x5555d4b7e658 <col:35> 'int' 19
| | `-FullComment 0x5555d4c16060 <line:1755:6, col:54>
| |   `-ParagraphComment 0x5555d4c16030 <col:6, col:54>
| |     |-TextComment 0x5555d4c15fb0 <col:6, col:21> Text=" An Objective-C "
| |     |-TextComment 0x5555d4c15fd0 <col:22, col:23> Text="@"
| |     `-TextComment 0x5555d4c15ff0 <col:24, col:54> Text="implementation for a category. "
| |-EnumConstantDecl 0x5555d4b7ed20 <line:1758:3, col:26> col:3 CXCursor_TypedefDecl 'int'
| | |-ConstantExpr 0x5555d4b7e738 <col:26> 'int'
| | | |-value: Int 20
| | | `-IntegerLiteral 0x5555d4b7e718 <col:26> 'int' 20
| | `-FullComment 0x5555d4c16130 <line:1757:6, col:17>
| |   `-ParagraphComment 0x5555d4c16100 <col:6, col:17>
| |     `-TextComment 0x5555d4c160d0 <col:6, col:17> Text=" A typedef. "
| |-EnumConstantDecl 0x5555d4b7edd8 <line:1760:3, col:24> col:3 CXCursor_CXXMethod 'int'
| | |-ConstantExpr 0x5555d4b7edb8 <col:24> 'int'
| | | |-value: Int 21
| | | `-IntegerLiteral 0x5555d4b7ed98 <col:24> 'int' 21
| | `-FullComment 0x5555d4c16200 <line:1759:6, col:26>
| |   `-ParagraphComment 0x5555d4c161d0 <col:6, col:26>
| |     `-TextComment 0x5555d4c161a0 <col:6, col:26> Text=" A C++ class method. "
| |-EnumConstantDecl 0x5555d4b7ee98 <line:1762:3, col:24> col:3 CXCursor_Namespace 'int'
| | |-ConstantExpr 0x5555d4b7ee78 <col:24> 'int'
| | | |-value: Int 22
| | | `-IntegerLiteral 0x5555d4b7ee58 <col:24> 'int' 22
| | `-FullComment 0x5555d4c162d0 <line:1761:6, col:23>
| |   `-ParagraphComment 0x5555d4c162a0 <col:6, col:23>
| |     `-TextComment 0x5555d4c16270 <col:6, col:23> Text=" A C++ namespace. "
| |-EnumConstantDecl 0x5555d4b7ef58 <line:1764:3, col:26> col:3 CXCursor_LinkageSpec 'int'
| | |-ConstantExpr 0x5555d4b7ef38 <col:26> 'int'
| | | |-value: Int 23
| | | `-IntegerLiteral 0x5555d4b7ef18 <col:26> 'int' 23
| | `-FullComment 0x5555d4c163a0 <line:1763:6, col:50>
| |   `-ParagraphComment 0x5555d4c16370 <col:6, col:50>
| |     `-TextComment 0x5555d4c16340 <col:6, col:50> Text=" A linkage specification, e.g. 'extern "C"'. "
| |-EnumConstantDecl 0x5555d4b7f018 <line:1766:3, col:26> col:3 CXCursor_Constructor 'int'
| | |-ConstantExpr 0x5555d4b7eff8 <col:26> 'int'
| | | |-value: Int 24
| | | `-IntegerLiteral 0x5555d4b7efd8 <col:26> 'int' 24
| | `-FullComment 0x5555d4c16470 <line:1765:6, col:25>
| |   `-ParagraphComment 0x5555d4c16440 <col:6, col:25>
| |     `-TextComment 0x5555d4c16410 <col:6, col:25> Text=" A C++ constructor. "
| |-EnumConstantDecl 0x5555d4b7f0d8 <line:1768:3, col:25> col:3 CXCursor_Destructor 'int'
| | |-ConstantExpr 0x5555d4b7f0b8 <col:25> 'int'
| | | |-value: Int 25
| | | `-IntegerLiteral 0x5555d4b7f098 <col:25> 'int' 25
| | `-FullComment 0x5555d4c16540 <line:1767:6, col:24>
| |   `-ParagraphComment 0x5555d4c16510 <col:6, col:24>
| |     `-TextComment 0x5555d4c164e0 <col:6, col:24> Text=" A C++ destructor. "
| |-EnumConstantDecl 0x5555d4b7f198 <line:1770:3, col:33> col:3 CXCursor_ConversionFunction 'int'
| | |-ConstantExpr 0x5555d4b7f178 <col:33> 'int'
| | | |-value: Int 26
| | | `-IntegerLiteral 0x5555d4b7f158 <col:33> 'int' 26
| | `-FullComment 0x5555d4c16610 <line:1769:6, col:33>
| |   `-ParagraphComment 0x5555d4c165e0 <col:6, col:33>
| |     `-TextComment 0x5555d4c165b0 <col:6, col:33> Text=" A C++ conversion function. "
| |-EnumConstantDecl 0x5555d4b7f258 <line:1772:3, col:36> col:3 CXCursor_TemplateTypeParameter 'int'
| | |-ConstantExpr 0x5555d4b7f238 <col:36> 'int'
| | | |-value: Int 27
| | | `-IntegerLiteral 0x5555d4b7f218 <col:36> 'int' 27
| | `-FullComment 0x5555d4c166e0 <line:1771:6, col:37>
| |   `-ParagraphComment 0x5555d4c166b0 <col:6, col:37>
| |     `-TextComment 0x5555d4c16680 <col:6, col:37> Text=" A C++ template type parameter. "
| |-EnumConstantDecl 0x5555d4b7f318 <line:1774:3, col:39> col:3 CXCursor_NonTypeTemplateParameter 'int'
| | |-ConstantExpr 0x5555d4b7f2f8 <col:39> 'int'
| | | |-value: Int 28
| | | `-IntegerLiteral 0x5555d4b7f2d8 <col:39> 'int' 28
| | `-FullComment 0x5555d4c167b0 <line:1773:6, col:41>
| |   `-ParagraphComment 0x5555d4c16780 <col:6, col:41>
| |     `-TextComment 0x5555d4c16750 <col:6, col:41> Text=" A C++ non-type template parameter. "
| |-EnumConstantDecl 0x5555d4b7f3d8 <line:1776:3, col:40> col:3 CXCursor_TemplateTemplateParameter 'int'
| | |-ConstantExpr 0x5555d4b7f3b8 <col:40> 'int'
| | | |-value: Int 29
| | | `-IntegerLiteral 0x5555d4b7f398 <col:40> 'int' 29
| | `-FullComment 0x5555d4c16880 <line:1775:6, col:41>
| |   `-ParagraphComment 0x5555d4c16850 <col:6, col:41>
| |     `-TextComment 0x5555d4c16820 <col:6, col:41> Text=" A C++ template template parameter. "
| |-EnumConstantDecl 0x5555d4b7f498 <line:1778:3, col:31> col:3 CXCursor_FunctionTemplate 'int'
| | |-ConstantExpr 0x5555d4b7f478 <col:31> 'int'
| | | |-value: Int 30
| | | `-IntegerLiteral 0x5555d4b7f458 <col:31> 'int' 30
| | `-FullComment 0x5555d4c16950 <line:1777:6, col:31>
| |   `-ParagraphComment 0x5555d4c16920 <col:6, col:31>
| |     `-TextComment 0x5555d4c168f0 <col:6, col:31> Text=" A C++ function template. "
| |-EnumConstantDecl 0x5555d4b7f558 <line:1780:3, col:28> col:3 CXCursor_ClassTemplate 'int'
| | |-ConstantExpr 0x5555d4b7f538 <col:28> 'int'
| | | |-value: Int 31
| | | `-IntegerLiteral 0x5555d4b7f518 <col:28> 'int' 31
| | `-FullComment 0x5555d4c16a20 <line:1779:6, col:28>
| |   `-ParagraphComment 0x5555d4c169f0 <col:6, col:28>
| |     `-TextComment 0x5555d4c169c0 <col:6, col:28> Text=" A C++ class template. "
| |-EnumConstantDecl 0x5555d4b7f618 <line:1782:3, col:49> col:3 CXCursor_ClassTemplatePartialSpecialization 'int'
| | |-ConstantExpr 0x5555d4b7f5f8 <col:49> 'int'
| | | |-value: Int 32
| | | `-IntegerLiteral 0x5555d4b7f5d8 <col:49> 'int' 32
| | `-FullComment 0x5555d4c16af0 <line:1781:6, col:51>
| |   `-ParagraphComment 0x5555d4c16ac0 <col:6, col:51>
| |     `-TextComment 0x5555d4c16a90 <col:6, col:51> Text=" A C++ class template partial specialization. "
| |-EnumConstantDecl 0x5555d4b7f6d8 <line:1784:3, col:29> col:3 CXCursor_NamespaceAlias 'int'
| | |-ConstantExpr 0x5555d4b7f6b8 <col:29> 'int'
| | | |-value: Int 33
| | | `-IntegerLiteral 0x5555d4b7f698 <col:29> 'int' 33
| | `-FullComment 0x5555d4c16bc0 <line:1783:6, col:41>
| |   `-ParagraphComment 0x5555d4c16b90 <col:6, col:41>
| |     `-TextComment 0x5555d4c16b60 <col:6, col:41> Text=" A C++ namespace alias declaration. "
| |-EnumConstantDecl 0x5555d4b7f798 <line:1786:3, col:29> col:3 CXCursor_UsingDirective 'int'
| | |-ConstantExpr 0x5555d4b7f778 <col:29> 'int'
| | | |-value: Int 34
| | | `-IntegerLiteral 0x5555d4b7f758 <col:29> 'int' 34
| | `-FullComment 0x5555d4c16c90 <line:1785:6, col:29>
| |   `-ParagraphComment 0x5555d4c16c60 <col:6, col:29>
| |     `-TextComment 0x5555d4c16c30 <col:6, col:29> Text=" A C++ using directive. "
| |-EnumConstantDecl 0x5555d4b7f858 <line:1788:3, col:31> col:3 CXCursor_UsingDeclaration 'int'
| | |-ConstantExpr 0x5555d4b7f838 <col:31> 'int'
| | | |-value: Int 35
| | | `-IntegerLiteral 0x5555d4b7f818 <col:31> 'int' 35
| | `-FullComment 0x5555d4c16d60 <line:1787:6, col:31>
| |   `-ParagraphComment 0x5555d4c16d30 <col:6, col:31>
| |     `-TextComment 0x5555d4c16d00 <col:6, col:31> Text=" A C++ using declaration. "
| |-EnumConstantDecl 0x5555d4b7f918 <line:1790:3, col:28> col:3 CXCursor_TypeAliasDecl 'int'
| | |-ConstantExpr 0x5555d4b7f8f8 <col:28> 'int'
| | | |-value: Int 36
| | | `-IntegerLiteral 0x5555d4b7f8d8 <col:28> 'int' 36
| | `-FullComment 0x5555d4c16e30 <line:1789:6, col:30>
| |   `-ParagraphComment 0x5555d4c16e00 <col:6, col:30>
| |     `-TextComment 0x5555d4c16dd0 <col:6, col:30> Text=" A C++ alias declaration "
| |-EnumConstantDecl 0x5555d4b7f9d8 <line:1792:3, col:33> col:3 CXCursor_ObjCSynthesizeDecl 'int'
| | |-ConstantExpr 0x5555d4b7f9b8 <col:33> 'int'
| | | |-value: Int 37
| | | `-IntegerLiteral 0x5555d4b7f998 <col:33> 'int' 37
| | `-FullComment 0x5555d4c16f50 <line:1791:6, col:46>
| |   `-ParagraphComment 0x5555d4c16f20 <col:6, col:46>
| |     |-TextComment 0x5555d4c16ea0 <col:6, col:21> Text=" An Objective-C "
| |     |-TextComment 0x5555d4c16ec0 <col:22, col:23> Text="@"
| |     `-TextComment 0x5555d4c16ee0 <col:24, col:46> Text="synthesize definition. "
| |-EnumConstantDecl 0x5555d4b7fa98 <line:1794:3, col:30> col:3 CXCursor_ObjCDynamicDecl 'int'
| | |-ConstantExpr 0x5555d4b7fa78 <col:30> 'int'
| | | |-value: Int 38
| | | `-IntegerLiteral 0x5555d4b7fa58 <col:30> 'int' 38
| | `-FullComment 0x5555d4c17070 <line:1793:6, col:43>
| |   `-ParagraphComment 0x5555d4c17040 <col:6, col:43>
| |     |-TextComment 0x5555d4c16fc0 <col:6, col:21> Text=" An Objective-C "
| |     |-TextComment 0x5555d4c16fe0 <col:22, col:23> Text="@"
| |     `-TextComment 0x5555d4c17000 <col:24, col:43> Text="dynamic definition. "
| |-EnumConstantDecl 0x5555d4b7fb58 <line:1796:3, col:33> col:3 referenced CXCursor_CXXAccessSpecifier 'int'
| | |-ConstantExpr 0x5555d4b7fb38 <col:33> 'int'
| | | |-value: Int 39
| | | `-IntegerLiteral 0x5555d4b7fb18 <col:33> 'int' 39
| | `-FullComment 0x5555d4c17140 <line:1795:6, col:27>
| |   `-ParagraphComment 0x5555d4c17110 <col:6, col:27>
| |     `-TextComment 0x5555d4c170e0 <col:6, col:27> Text=" An access specifier. "
| |-EnumConstantDecl 0x5555d4b7fbe8 <line:1798:3, col:24> col:3 CXCursor_FirstDecl 'int'
| | |-ConstantExpr 0x5555d4b7fbc8 <col:24> 'int'
| | | |-value: Int 1
| | | `-DeclRefExpr 0x5555d4b7fba8 <col:24> 'int' EnumConstant 0x5555d4b7d918 'CXCursor_UnexposedDecl' 'int'
| | `-FullComment 0x5555d4c17210 <line:1795:6, col:27>
| |   `-ParagraphComment 0x5555d4c171e0 <col:6, col:27>
| |     `-TextComment 0x5555d4c171b0 <col:6, col:27> Text=" An access specifier. "
| |-EnumConstantDecl 0x5555d4b7fc78 <line:1799:3, col:23> col:3 CXCursor_LastDecl 'int'
| | |-ConstantExpr 0x5555d4b7fc58 <col:23> 'int'
| | | |-value: Int 39
| | | `-DeclRefExpr 0x5555d4b7fc38 <col:23> 'int' EnumConstant 0x5555d4b7fb58 'CXCursor_CXXAccessSpecifier' 'int'
| | `-FullComment 0x5555d4c172e0 <line:1795:6, col:27>
| |   `-ParagraphComment 0x5555d4c172b0 <col:6, col:27>
| |     `-TextComment 0x5555d4c17280 <col:6, col:27> Text=" An access specifier. "
| |-EnumConstantDecl 0x5555d4b86180 <line:1802:3, col:23> col:3 CXCursor_FirstRef 'int'
| | |-ConstantExpr 0x5555d4b7fce8 <col:23> 'int'
| | | |-value: Int 40
| | | `-IntegerLiteral 0x5555d4b7fcc8 <col:23> 'int' 40
| | `-FullComment 0x5555d4c173b0 <line:1795:6, col:27>
| |   `-ParagraphComment 0x5555d4c17380 <col:6, col:27>
| |     `-TextComment 0x5555d4c17350 <col:6, col:27> Text=" An access specifier. "
| |-EnumConstantDecl 0x5555d4b86210 <line:1803:3, col:32> col:3 CXCursor_ObjCSuperClassRef 'int'
| | |-ConstantExpr 0x5555d4b861f0 <col:32> 'int'
| | | |-value: Int 40
| | | `-IntegerLiteral 0x5555d4b861d0 <col:32> 'int' 40
| | `-FullComment 0x5555d4c17480 <line:1795:6, col:27>
| |   `-ParagraphComment 0x5555d4c17450 <col:6, col:27>
| |     `-TextComment 0x5555d4c17420 <col:6, col:27> Text=" An access specifier. "
| |-EnumConstantDecl 0x5555d4b862a0 <line:1804:3, col:30> col:3 CXCursor_ObjCProtocolRef 'int'
| | |-ConstantExpr 0x5555d4b86280 <col:30> 'int'
| | | |-value: Int 41
| | | `-IntegerLiteral 0x5555d4b86260 <col:30> 'int' 41
| | `-FullComment 0x5555d4c17550 <line:1795:6, col:27>
| |   `-ParagraphComment 0x5555d4c17520 <col:6, col:27>
| |     `-TextComment 0x5555d4c174f0 <col:6, col:27> Text=" An access specifier. "
| |-EnumConstantDecl 0x5555d4b86330 <line:1805:3, col:27> col:3 CXCursor_ObjCClassRef 'int'
| | |-ConstantExpr 0x5555d4b86310 <col:27> 'int'
| | | |-value: Int 42
| | | `-IntegerLiteral 0x5555d4b862f0 <col:27> 'int' 42
| | `-FullComment 0x5555d4c17620 <line:1795:6, col:27>
| |   `-ParagraphComment 0x5555d4c175f0 <col:6, col:27>
| |     `-TextComment 0x5555d4c175c0 <col:6, col:27> Text=" An access specifier. "
| |-EnumConstantDecl 0x5555d4b863e8 <line:1821:3, col:22> col:3 CXCursor_TypeRef 'int'
| | |-ConstantExpr 0x5555d4b863c8 <col:22> 'int'
| | | |-value: Int 43
| | | `-IntegerLiteral 0x5555d4b863a8 <col:22> 'int' 43
| | `-FullComment 0x5555d4c17910 <line:1807:5, line:1819:65>
| |   |-ParagraphComment 0x5555d4c176c0 <line:1807:5, col:39>
| |   | `-TextComment 0x5555d4c17690 <col:5, col:39> Text=" A reference to a type declaration."
| |   |-ParagraphComment 0x5555d4c17730 <line:1809:5, line:1810:34>
| |   | |-TextComment 0x5555d4c176e0 <line:1809:5, col:67> Text=" A type reference occurs anywhere where a type is named but not"
| |   | `-TextComment 0x5555d4c17700 <line:1810:5, col:34> Text=" declared. For example, given:"
| |   |-ParagraphComment 0x5555d4c17780 <line:1812:5>
| |   | `-TextComment 0x5555d4c17750 <col:5> Text=" "
| |   |-VerbatimBlockComment 0x5555d4c177a0 <col:6, col:11> Name="code" CloseName="endcode"
| |   | |-VerbatimBlockLineComment 0x5555d4c177f0 <line:1813:5, col:33> Text=" typedef unsigned size_type;"
| |   | `-VerbatimBlockLineComment 0x5555d4c17810 <line:1814:5, col:21> Text=" size_type size;"
| |   `-ParagraphComment 0x5555d4c178c0 <line:1817:5, line:1819:65>
| |     |-TextComment 0x5555d4c17840 <line:1817:5, col:70> Text=" The typedef is a declaration of size_type (CXCursor_TypedefDecl),"
| |     |-TextComment 0x5555d4c17860 <line:1818:5, col:68> Text=" while the type of the variable "size" is referenced. The cursor"
| |     `-TextComment 0x5555d4c17880 <line:1819:5, col:65> Text=" referenced by the type of size is the typedef for size_type."
| |-EnumConstantDecl 0x5555d4b86478 <line:1822:3, col:31> col:3 CXCursor_CXXBaseSpecifier 'int'
| | |-ConstantExpr 0x5555d4b86458 <col:31> 'int'
| | | |-value: Int 44
| | | `-IntegerLiteral 0x5555d4b86438 <col:31> 'int' 44
| | `-FullComment 0x5555d4c17c00 <line:1807:5, line:1819:65>
| |   |-ParagraphComment 0x5555d4c179b0 <line:1807:5, col:39>
| |   | `-TextComment 0x5555d4c17980 <col:5, col:39> Text=" A reference to a type declaration."
| |   |-ParagraphComment 0x5555d4c17a20 <line:1809:5, line:1810:34>
| |   | |-TextComment 0x5555d4c179d0 <line:1809:5, col:67> Text=" A type reference occurs anywhere where a type is named but not"
| |   | `-TextComment 0x5555d4c179f0 <line:1810:5, col:34> Text=" declared. For example, given:"
| |   |-ParagraphComment 0x5555d4c17a70 <line:1812:5>
| |   | `-TextComment 0x5555d4c17a40 <col:5> Text=" "
| |   |-VerbatimBlockComment 0x5555d4c17a90 <col:6, col:11> Name="code" CloseName="endcode"
| |   | |-VerbatimBlockLineComment 0x5555d4c17ae0 <line:1813:5, col:33> Text=" typedef unsigned size_type;"
| |   | `-VerbatimBlockLineComment 0x5555d4c17b00 <line:1814:5, col:21> Text=" size_type size;"
| |   `-ParagraphComment 0x5555d4c17bb0 <line:1817:5, line:1819:65>
| |     |-TextComment 0x5555d4c17b30 <line:1817:5, col:70> Text=" The typedef is a declaration of size_type (CXCursor_TypedefDecl),"
| |     |-TextComment 0x5555d4c17b50 <line:1818:5, col:68> Text=" while the type of the variable "size" is referenced. The cursor"
| |     `-TextComment 0x5555d4c17b70 <line:1819:5, col:65> Text=" referenced by the type of size is the typedef for size_type."
| |-EnumConstantDecl 0x5555d4b86538 <line:1827:3, col:26> col:3 CXCursor_TemplateRef 'int'
| | |-ConstantExpr 0x5555d4b86518 <col:26> 'int'
| | | |-value: Int 45
| | | `-IntegerLiteral 0x5555d4b864f8 <col:26> 'int' 45
| | `-FullComment 0x5555d4c17d00 <line:1824:5, line:1825:66>
| |   `-ParagraphComment 0x5555d4c17cd0 <line:1824:5, line:1825:66>
| |     |-TextComment 0x5555d4c17c70 <line:1824:5, col:65> Text=" A reference to a class template, function template, template"
| |     `-TextComment 0x5555d4c17c90 <line:1825:5, col:66> Text=" template parameter, or class template partial specialization."
| |-EnumConstantDecl 0x5555d4b865f8 <line:1831:3, col:27> col:3 CXCursor_NamespaceRef 'int'
| | |-ConstantExpr 0x5555d4b865d8 <col:27> 'int'
| | | |-value: Int 46
| | | `-IntegerLiteral 0x5555d4b865b8 <col:27> 'int' 46
| | `-FullComment 0x5555d4c17dd0 <line:1829:5, col:51>
| |   `-ParagraphComment 0x5555d4c17da0 <col:5, col:51>
| |     `-TextComment 0x5555d4c17d70 <col:5, col:51> Text=" A reference to a namespace or namespace alias."
| |-EnumConstantDecl 0x5555d4b866b8 <line:1836:3, col:24> col:3 CXCursor_MemberRef 'int'
| | |-ConstantExpr 0x5555d4b86698 <col:24> 'int'
| | | |-value: Int 47
| | | `-IntegerLiteral 0x5555d4b86678 <col:24> 'int' 47
| | `-FullComment 0x5555d4c17ec0 <line:1833:5, line:1834:65>
| |   `-ParagraphComment 0x5555d4c17e90 <line:1833:5, line:1834:65>
| |     |-TextComment 0x5555d4c17e40 <line:1833:5, col:72> Text=" A reference to a member of a struct, union, or class that occurs in"
| |     `-TextComment 0x5555d4c17e60 <line:1834:5, col:65> Text=" some non-expression context, e.g., a designated initializer."
| |-EnumConstantDecl 0x5555d4b86778 <line:1852:3, col:23> col:3 CXCursor_LabelRef 'int'
| | |-ConstantExpr 0x5555d4b86758 <col:23> 'int'
| | | |-value: Int 48
| | | `-IntegerLiteral 0x5555d4b86738 <col:23> 'int' 48
| | `-FullComment 0x5555d4c181b0 <line:1838:5, line:1850:58>
| |   |-ParagraphComment 0x5555d4c17f60 <line:1838:5, col:40>
| |   | `-TextComment 0x5555d4c17f30 <col:5, col:40> Text=" A reference to a labeled statement."
| |   |-ParagraphComment 0x5555d4c17fd0 <line:1840:5, line:1841:45>
| |   | |-TextComment 0x5555d4c17f80 <line:1840:5, col:73> Text=" This cursor kind is used to describe the jump to "start_over" in the"
| |   | `-TextComment 0x5555d4c17fa0 <line:1841:5, col:45> Text=" goto statement in the following example:"
| |   |-ParagraphComment 0x5555d4c18020 <line:1843:5>
| |   | `-TextComment 0x5555d4c17ff0 <col:5> Text=" "
| |   |-VerbatimBlockComment 0x5555d4c18040 <col:6, col:11> Name="code" CloseName="endcode"
| |   | |-VerbatimBlockLineComment 0x5555d4c18090 <line:1844:5, col:19> Text="   start_over:"
| |   | |-VerbatimBlockLineComment 0x5555d4c180b0 <line:1845:5, col:20> Text="     ++counter;"
| |   | |-VerbatimBlockLineComment 0x5555d4c180d0 <line:1846:5> Text=""
| |   | `-VerbatimBlockLineComment 0x5555d4c180f0 <line:1847:5, col:26> Text="     goto start_over;"
| |   `-ParagraphComment 0x5555d4c18160 <line:1850:5, col:58>
| |     `-TextComment 0x5555d4c18130 <col:5, col:58> Text=" A label reference cursor refers to a label statement."
| |-EnumConstantDecl 0x5555d4b86838 <line:1890:3, col:32> col:3 CXCursor_OverloadedDeclRef 'int'
| | |-ConstantExpr 0x5555d4b86818 <col:32> 'int'
| | | |-value: Int 49
| | | `-IntegerLiteral 0x5555d4b867f8 <col:32> 'int' 49
| | `-FullComment 0x5555d4c18900 <line:1855:5, line:1888:31>
| |   |-ParagraphComment 0x5555d4c18270 <line:1855:5, line:1856:80>
| |   | |-TextComment 0x5555d4c18220 <line:1855:5, col:71> Text=" A reference to a set of overloaded functions or function templates"
| |   | `-TextComment 0x5555d4c18240 <line:1856:5, col:80> Text=" that has not yet been resolved to a specific function or function template."
| |   |-ParagraphComment 0x5555d4c182e0 <line:1858:5, line:1859:56>
| |   | |-TextComment 0x5555d4c18290 <line:1858:5, col:77> Text=" An overloaded declaration reference cursor occurs in C++ templates where"
| |   | `-TextComment 0x5555d4c182b0 <line:1859:5, col:56> Text=" a dependent name refers to a function. For example:"
| |   |-ParagraphComment 0x5555d4c18330 <line:1861:5>
| |   | `-TextComment 0x5555d4c18300 <col:5> Text=" "
| |   |-VerbatimBlockComment 0x5555d4c18350 <col:6, col:11> Name="code" CloseName="endcode"
| |   | |-VerbatimBlockLineComment 0x5555d4c183a0 <line:1862:5, col:45> Text=" template<typename T> void swap(T&, T&);"
| |   | |-VerbatimBlockLineComment 0x5555d4c183c0 <line:1863:5> Text=""
| |   | |-VerbatimBlockLineComment 0x5555d4c183e0 <line:1864:5, col:23> Text=" struct X { ... };"
| |   | |-VerbatimBlockLineComment 0x5555d4c18400 <line:1865:5, col:24> Text=" void swap(X&, X&);"
| |   | |-VerbatimBlockLineComment 0x5555d4c18420 <line:1866:5> Text=""
| |   | |-VerbatimBlockLineComment 0x5555d4c18440 <line:1867:5, col:26> Text=" template<typename T>"
| |   | |-VerbatimBlockLineComment 0x5555d4c18460 <line:1868:5, col:39> Text=" void reverse(T* first, T* last) {"
| |   | |-VerbatimBlockLineComment 0x5555d4c18480 <line:1869:5, col:34> Text="   while (first < last - 1) {"
| |   | |-VerbatimBlockLineComment 0x5555d4c184a0 <line:1870:5, col:32> Text="     swap(*first, *--last);"
| |   | |-VerbatimBlockLineComment 0x5555d4c184c0 <line:1871:5, col:18> Text="     ++first;"
| |   | |-VerbatimBlockLineComment 0x5555d4c184e0 <line:1872:5, col:9> Text="   }"
| |   | |-VerbatimBlockLineComment 0x5555d4c18500 <line:1873:5, col:7> Text=" }"
| |   | |-VerbatimBlockLineComment 0x5555d4c18520 <line:1874:5> Text=""
| |   | |-VerbatimBlockLineComment 0x5555d4c18540 <line:1875:5, col:19> Text=" struct Y { };"
| |   | `-VerbatimBlockLineComment 0x5555d4c18560 <line:1876:5, col:24> Text=" void swap(Y&, Y&);"
| |   |-ParagraphComment 0x5555d4c186f0 <line:1879:5, line:1884:14>
| |   | |-TextComment 0x5555d4c18600 <line:1879:5, col:77> Text=" Here, the identifier "swap" is associated with an overloaded declaration"
| |   | |-TextComment 0x5555d4c18620 <line:1880:5, col:78> Text=" reference. In the template definition, "swap" refers to either of the two"
| |   | |-TextComment 0x5555d4c18640 <line:1881:5, col:75> Text=" "swap" functions declared above, so both results will be available. At"
| |   | |-TextComment 0x5555d4c18660 <line:1882:5, col:75> Text=" instantiation time, "swap" may also refer to other functions found via"
| |   | |-TextComment 0x5555d4c18680 <line:1883:5, col:75> Text=" argument-dependent lookup (e.g., the "swap" function at the end of the"
| |   | `-TextComment 0x5555d4c186a0 <line:1884:5, col:14> Text=" example)."
| |   `-ParagraphComment 0x5555d4c188b0 <line:1886:5, line:1888:31>
| |     |-TextComment 0x5555d4c18710 <line:1886:5, col:19> Text=" The functions "
| |     |-InlineCommandComment 0x5555d4c18770 <col:20, col:21> Name="c" RenderMonospaced Arg[0]="clang_getNumOverloadedDecls()"
| |     |-TextComment 0x5555d4c18790 <col:52, col:55> Text=" and"
| |     |-TextComment 0x5555d4c187b0 <line:1887:5> Text=" "
| |     |-InlineCommandComment 0x5555d4c18810 <col:6, col:7> Name="c" RenderMonospaced Arg[0]="clang_getOverloadedDecl()"
| |     |-TextComment 0x5555d4c18830 <col:34, col:73> Text=" can be used to retrieve the definitions"
| |     `-TextComment 0x5555d4c18850 <line:1888:5, col:31> Text=" referenced by this cursor."
| |-EnumConstantDecl 0x5555d4b868f8 <line:1896:3, col:26> col:3 referenced CXCursor_VariableRef 'int'
| | |-ConstantExpr 0x5555d4b868d8 <col:26> 'int'
| | | |-value: Int 50
| | | `-IntegerLiteral 0x5555d4b868b8 <col:26> 'int' 50
| | `-FullComment 0x5555d4c189f0 <line:1893:5, line:1894:46>
| |   `-ParagraphComment 0x5555d4c189c0 <line:1893:5, line:1894:46>
| |     |-TextComment 0x5555d4c18970 <line:1893:5, col:65> Text=" A reference to a variable that occurs in some non-expression"
| |     `-TextComment 0x5555d4c18990 <line:1894:5, col:46> Text=" context, e.g., a C++ lambda capture list."
| |-EnumConstantDecl 0x5555d4b86988 <line:1898:3, col:22> col:3 CXCursor_LastRef 'int'
| | |-ConstantExpr 0x5555d4b86968 <col:22> 'int'
| | | |-value: Int 50
| | | `-DeclRefExpr 0x5555d4b86948 <col:22> 'int' EnumConstant 0x5555d4b868f8 'CXCursor_VariableRef' 'int'
| | `-FullComment 0x5555d4c18ae0 <line:1893:5, line:1894:46>
| |   `-ParagraphComment 0x5555d4c18ab0 <line:1893:5, line:1894:46>
| |     |-TextComment 0x5555d4c18a60 <line:1893:5, col:65> Text=" A reference to a variable that occurs in some non-expression"
| |     `-TextComment 0x5555d4c18a80 <line:1894:5, col:46> Text=" context, e.g., a C++ lambda capture list."
| |-EnumConstantDecl 0x5555d4b86a18 <line:1901:3, col:27> col:3 CXCursor_FirstInvalid 'int'
| | |-ConstantExpr 0x5555d4b869f8 <col:27> 'int'
| | | |-value: Int 70
| | | `-IntegerLiteral 0x5555d4b869d8 <col:27> 'int' 70
| | `-FullComment 0x5555d4c18bd0 <line:1893:5, line:1894:46>
| |   `-ParagraphComment 0x5555d4c18ba0 <line:1893:5, line:1894:46>
| |     |-TextComment 0x5555d4c18b50 <line:1893:5, col:65> Text=" A reference to a variable that occurs in some non-expression"
| |     `-TextComment 0x5555d4c18b70 <line:1894:5, col:46> Text=" context, e.g., a C++ lambda capture list."
| |-EnumConstantDecl 0x5555d4b86aa8 <line:1902:3, col:26> col:3 CXCursor_InvalidFile 'int'
| | |-ConstantExpr 0x5555d4b86a88 <col:26> 'int'
| | | |-value: Int 70
| | | `-IntegerLiteral 0x5555d4b86a68 <col:26> 'int' 70
| | `-FullComment 0x5555d4c18cc0 <line:1893:5, line:1894:46>
| |   `-ParagraphComment 0x5555d4c18c90 <line:1893:5, line:1894:46>
| |     |-TextComment 0x5555d4c18c40 <line:1893:5, col:65> Text=" A reference to a variable that occurs in some non-expression"
| |     `-TextComment 0x5555d4c18c60 <line:1894:5, col:46> Text=" context, e.g., a C++ lambda capture list."
| |-EnumConstantDecl 0x5555d4b86b38 <line:1903:3, col:26> col:3 CXCursor_NoDeclFound 'int'
| | |-ConstantExpr 0x5555d4b86b18 <col:26> 'int'
| | | |-value: Int 71
| | | `-IntegerLiteral 0x5555d4b86af8 <col:26> 'int' 71
| | `-FullComment 0x5555d4c18db0 <line:1893:5, line:1894:46>
| |   `-ParagraphComment 0x5555d4c18d80 <line:1893:5, line:1894:46>
| |     |-TextComment 0x5555d4c18d30 <line:1893:5, col:65> Text=" A reference to a variable that occurs in some non-expression"
| |     `-TextComment 0x5555d4c18d50 <line:1894:5, col:46> Text=" context, e.g., a C++ lambda capture list."
| |-EnumConstantDecl 0x5555d4b86bc8 <line:1904:3, col:29> col:3 CXCursor_NotImplemented 'int'
| | |-ConstantExpr 0x5555d4b86ba8 <col:29> 'int'
| | | |-value: Int 72
| | | `-IntegerLiteral 0x5555d4b86b88 <col:29> 'int' 72
| | `-FullComment 0x5555d4c18ea0 <line:1893:5, line:1894:46>
| |   `-ParagraphComment 0x5555d4c18e70 <line:1893:5, line:1894:46>
| |     |-TextComment 0x5555d4c18e20 <line:1893:5, col:65> Text=" A reference to a variable that occurs in some non-expression"
| |     `-TextComment 0x5555d4c18e40 <line:1894:5, col:46> Text=" context, e.g., a C++ lambda capture list."
| |-EnumConstantDecl 0x5555d4b86c58 <line:1905:3, col:26> col:3 referenced CXCursor_InvalidCode 'int'
| | |-ConstantExpr 0x5555d4b86c38 <col:26> 'int'
| | | |-value: Int 73
| | | `-IntegerLiteral 0x5555d4b86c18 <col:26> 'int' 73
| | `-FullComment 0x5555d4c18f90 <line:1893:5, line:1894:46>
| |   `-ParagraphComment 0x5555d4c18f60 <line:1893:5, line:1894:46>
| |     |-TextComment 0x5555d4c18f10 <line:1893:5, col:65> Text=" A reference to a variable that occurs in some non-expression"
| |     `-TextComment 0x5555d4c18f30 <line:1894:5, col:46> Text=" context, e.g., a C++ lambda capture list."
| |-EnumConstantDecl 0x5555d4b86ce8 <line:1906:3, col:26> col:3 CXCursor_LastInvalid 'int'
| | |-ConstantExpr 0x5555d4b86cc8 <col:26> 'int'
| | | |-value: Int 73
| | | `-DeclRefExpr 0x5555d4b86ca8 <col:26> 'int' EnumConstant 0x5555d4b86c58 'CXCursor_InvalidCode' 'int'
| | `-FullComment 0x5555d4c19080 <line:1893:5, line:1894:46>
| |   `-ParagraphComment 0x5555d4c19050 <line:1893:5, line:1894:46>
| |     |-TextComment 0x5555d4c19000 <line:1893:5, col:65> Text=" A reference to a variable that occurs in some non-expression"
| |     `-TextComment 0x5555d4c19020 <line:1894:5, col:46> Text=" context, e.g., a C++ lambda capture list."
| |-EnumConstantDecl 0x5555d4b86d78 <line:1909:3, col:24> col:3 CXCursor_FirstExpr 'int'
| | |-ConstantExpr 0x5555d4b86d58 <col:24> 'int'
| | | |-value: Int 100
| | | `-IntegerLiteral 0x5555d4b86d38 <col:24> 'int' 100
| | `-FullComment 0x5555d4c19170 <line:1893:5, line:1894:46>
| |   `-ParagraphComment 0x5555d4c19140 <line:1893:5, line:1894:46>
| |     |-TextComment 0x5555d4c190f0 <line:1893:5, col:65> Text=" A reference to a variable that occurs in some non-expression"
| |     `-TextComment 0x5555d4c19110 <line:1894:5, col:46> Text=" context, e.g., a C++ lambda capture list."
| |-EnumConstantDecl 0x5555d4b86e38 <line:1920:3, col:28> col:3 CXCursor_UnexposedExpr 'int'
| | |-ConstantExpr 0x5555d4b86e18 <col:28> 'int'
| | | |-value: Int 100
| | | `-IntegerLiteral 0x5555d4b86df8 <col:28> 'int' 100
| | `-FullComment 0x5555d4c19320 <line:1912:5, line:1918:32>
| |   |-ParagraphComment 0x5555d4c19230 <line:1912:5, line:1913:15>
| |   | |-TextComment 0x5555d4c191e0 <line:1912:5, col:62> Text=" An expression whose specific kind is not exposed via this"
| |   | `-TextComment 0x5555d4c19200 <line:1913:5, col:15> Text=" interface."
| |   `-ParagraphComment 0x5555d4c192f0 <line:1915:5, line:1918:32>
| |     |-TextComment 0x5555d4c19250 <line:1915:5, col:69> Text=" Unexposed expressions have the same operations as any other kind"
| |     |-TextComment 0x5555d4c19270 <line:1916:5, col:63> Text=" of expression; one can extract their location information,"
| |     |-TextComment 0x5555d4c19290 <line:1917:5, col:63> Text=" spelling, children, etc. However, the specific kind of the"
| |     `-TextComment 0x5555d4c192b0 <line:1918:5, col:32> Text=" expression is not reported."
| |-EnumConstantDecl 0x5555d4b86ef8 <line:1926:3, col:26> col:3 CXCursor_DeclRefExpr 'int'
| | |-ConstantExpr 0x5555d4b86ed8 <col:26> 'int'
| | | |-value: Int 101
| | | `-IntegerLiteral 0x5555d4b86eb8 <col:26> 'int' 101
| | `-FullComment 0x5555d4c19410 <line:1923:5, line:1924:44>
| |   `-ParagraphComment 0x5555d4c193e0 <line:1923:5, line:1924:44>
| |     |-TextComment 0x5555d4c19390 <line:1923:5, col:62> Text=" An expression that refers to some value declaration, such"
| |     `-TextComment 0x5555d4c193b0 <line:1924:5, col:44> Text=" as a function, variable, or enumerator."
| |-EnumConstantDecl 0x5555d4b86fb8 <line:1932:3, col:28> col:3 CXCursor_MemberRefExpr 'int'
| | |-ConstantExpr 0x5555d4b86f98 <col:28> 'int'
| | | |-value: Int 102
| | | `-IntegerLiteral 0x5555d4b86f78 <col:28> 'int' 102
| | `-FullComment 0x5555d4c19500 <line:1929:5, line:1930:35>
| |   `-ParagraphComment 0x5555d4c194d0 <line:1929:5, line:1930:35>
| |     |-TextComment 0x5555d4c19480 <line:1929:5, col:62> Text=" An expression that refers to a member of a struct, union,"
| |     `-TextComment 0x5555d4c194a0 <line:1930:5, col:35> Text=" class, Objective-C class, etc."
| |-EnumConstantDecl 0x5555d4b87078 <line:1935:3, col:23> col:3 CXCursor_CallExpr 'int'
| | |-ConstantExpr 0x5555d4b87058 <col:23> 'int'
| | | |-value: Int 103
| | | `-IntegerLiteral 0x5555d4b87038 <col:23> 'int' 103
| | `-FullComment 0x5555d4c195d0 <line:1934:6, col:43>
| |   `-ParagraphComment 0x5555d4c195a0 <col:6, col:43>
| |     `-TextComment 0x5555d4c19570 <col:6, col:43> Text=" An expression that calls a function. "
| |-EnumConstantDecl 0x5555d4b80070 <line:1939:3, col:30> col:3 CXCursor_ObjCMessageExpr 'int'
| | |-ConstantExpr 0x5555d4b87118 <col:30> 'int'
| | | |-value: Int 104
| | | `-IntegerLiteral 0x5555d4b870f8 <col:30> 'int' 104
| | `-FullComment 0x5555d4c196c0 <line:1937:6, line:1938:20>
| |   `-ParagraphComment 0x5555d4c19690 <line:1937:6, line:1938:20>
| |     |-TextComment 0x5555d4c19640 <line:1937:6, col:58> Text=" An expression that sends a message to an Objective-C"
| |     `-TextComment 0x5555d4c19660 <line:1938:1, col:20> Text="   object or class. "
| |-EnumConstantDecl 0x5555d4b80128 <line:1942:3, col:24> col:3 CXCursor_BlockExpr 'int'
| | |-ConstantExpr 0x5555d4b80108 <col:24> 'int'
| | | |-value: Int 105
| | | `-IntegerLiteral 0x5555d4b800e8 <col:24> 'int' 105
| | `-FullComment 0x5555d4c19790 <line:1941:6, col:53>
| |   `-ParagraphComment 0x5555d4c19760 <col:6, col:53>
| |     `-TextComment 0x5555d4c19730 <col:6, col:53> Text=" An expression that represents a block literal. "
| |-EnumConstantDecl 0x5555d4b801e8 <line:1946:3, col:29> col:3 CXCursor_IntegerLiteral 'int'
| | |-ConstantExpr 0x5555d4b801c8 <col:29> 'int'
| | | |-value: Int 106
| | | `-IntegerLiteral 0x5555d4b801a8 <col:29> 'int' 106
| | `-FullComment 0x5555d4c19860 <line:1944:6, col:25>
| |   `-ParagraphComment 0x5555d4c19830 <col:6, col:25>
| |     `-TextComment 0x5555d4c19800 <col:6, col:25> Text=" An integer literal."
| |-EnumConstantDecl 0x5555d4b802a8 <line:1950:3, col:30> col:3 CXCursor_FloatingLiteral 'int'
| | |-ConstantExpr 0x5555d4b80288 <col:30> 'int'
| | | |-value: Int 107
| | | `-IntegerLiteral 0x5555d4b80268 <col:30> 'int' 107
| | `-FullComment 0x5555d4c19930 <line:1948:6, col:38>
| |   `-ParagraphComment 0x5555d4c19900 <col:6, col:38>
| |     `-TextComment 0x5555d4c198d0 <col:6, col:38> Text=" A floating point number literal."
| |-EnumConstantDecl 0x5555d4b80368 <line:1954:3, col:31> col:3 CXCursor_ImaginaryLiteral 'int'
| | |-ConstantExpr 0x5555d4b80348 <col:31> 'int'
| | | |-value: Int 108
| | | `-IntegerLiteral 0x5555d4b80328 <col:31> 'int' 108
| | `-FullComment 0x5555d4c19a00 <line:1952:6, col:34>
| |   `-ParagraphComment 0x5555d4c199d0 <col:6, col:34>
| |     `-TextComment 0x5555d4c199a0 <col:6, col:34> Text=" An imaginary number literal."
| |-EnumConstantDecl 0x5555d4b80428 <line:1958:3, col:28> col:3 CXCursor_StringLiteral 'int'
| | |-ConstantExpr 0x5555d4b80408 <col:28> 'int'
| | | |-value: Int 109
| | | `-IntegerLiteral 0x5555d4b803e8 <col:28> 'int' 109
| | `-FullComment 0x5555d4c19ad0 <line:1956:6, col:23>
| |   `-ParagraphComment 0x5555d4c19aa0 <col:6, col:23>
| |     `-TextComment 0x5555d4c19a70 <col:6, col:23> Text=" A string literal."
| |-EnumConstantDecl 0x5555d4b804e8 <line:1962:3, col:31> col:3 CXCursor_CharacterLiteral 'int'
| | |-ConstantExpr 0x5555d4b804c8 <col:31> 'int'
| | | |-value: Int 110
| | | `-IntegerLiteral 0x5555d4b804a8 <col:31> 'int' 110
| | `-FullComment 0x5555d4c19ba0 <line:1960:6, col:26>
| |   `-ParagraphComment 0x5555d4c19b70 <col:6, col:26>
| |     `-TextComment 0x5555d4c19b40 <col:6, col:26> Text=" A character literal."
| |-EnumConstantDecl 0x5555d4b805a8 <line:1968:3, col:24> col:3 CXCursor_ParenExpr 'int'
| | |-ConstantExpr 0x5555d4b80588 <col:24> 'int'
| | | |-value: Int 111
| | | `-IntegerLiteral 0x5555d4b80568 <col:24> 'int' 111
| | `-FullComment 0x5555d4c19cd0 <line:1964:6, line:1966:76>
| |   |-ParagraphComment 0x5555d4c19c40 <line:1964:6, col:45>
| |   | `-TextComment 0x5555d4c19c10 <col:6, col:45> Text=" A parenthesized expression, e.g. "(1)"."
| |   `-ParagraphComment 0x5555d4c19c90 <line:1966:5, col:76>
| |     `-TextComment 0x5555d4c19c60 <col:5, col:76> Text=" This AST node is only formed if full location information is requested."
| |-EnumConstantDecl 0x5555d4b80668 <line:1973:3, col:28> col:3 CXCursor_UnaryOperator 'int'
| | |-ConstantExpr 0x5555d4b80648 <col:28> 'int'
| | | |-value: Int 112
| | | `-IntegerLiteral 0x5555d4b80628 <col:28> 'int' 112
| | `-FullComment 0x5555d4c19dc0 <line:1970:6, line:1971:14>
| |   `-ParagraphComment 0x5555d4c19d90 <line:1970:6, line:1971:14>
| |     |-TextComment 0x5555d4c19d40 <line:1970:6, col:63> Text=" This represents the unary-expression's (except sizeof and"
| |     `-TextComment 0x5555d4c19d60 <line:1971:5, col:14> Text=" alignof)."
| |-EnumConstantDecl 0x5555d4b80728 <line:1977:3, col:33> col:3 CXCursor_ArraySubscriptExpr 'int'
| | |-ConstantExpr 0x5555d4b80708 <col:33> 'int'
| | | |-value: Int 113
| | | `-IntegerLiteral 0x5555d4b806e8 <col:33> 'int' 113
| | `-FullComment 0x5555d4c19e90 <line:1975:6, col:39>
| |   `-ParagraphComment 0x5555d4c19e60 <col:6, col:39>
| |     `-TextComment 0x5555d4c19e30 <col:6, col:39> Text=" [C99 6.5.2.1] Array Subscripting."
| |-EnumConstantDecl 0x5555d4b807e8 <line:1982:3, col:29> col:3 CXCursor_BinaryOperator 'int'
| | |-ConstantExpr 0x5555d4b807c8 <col:29> 'int'
| | | |-value: Int 114
| | | `-IntegerLiteral 0x5555d4b807a8 <col:29> 'int' 114
| | `-FullComment 0x5555d4c19f80 <line:1979:6, line:1980:14>
| |   `-ParagraphComment 0x5555d4c19f50 <line:1979:6, line:1980:14>
| |     |-TextComment 0x5555d4c19f00 <line:1979:6, col:62> Text=" A builtin binary operation expression such as "x + y" or"
| |     `-TextComment 0x5555d4c19f20 <line:1980:5, col:14> Text=" "x <= y"."
| |-EnumConstantDecl 0x5555d4b808a8 <line:1986:3, col:37> col:3 CXCursor_CompoundAssignOperator 'int'
| | |-ConstantExpr 0x5555d4b80888 <col:37> 'int'
| | | |-value: Int 115
| | | `-IntegerLiteral 0x5555d4b80868 <col:37> 'int' 115
| | `-FullComment 0x5555d4c1a050 <line:1984:6, col:39>
| |   `-ParagraphComment 0x5555d4c1a020 <col:6, col:39>
| |     `-TextComment 0x5555d4c19ff0 <col:6, col:39> Text=" Compound assignment such as "+="."
| |-EnumConstantDecl 0x5555d4b80968 <line:1990:3, col:34> col:3 CXCursor_ConditionalOperator 'int'
| | |-ConstantExpr 0x5555d4b80948 <col:34> 'int'
| | | |-value: Int 116
| | | `-IntegerLiteral 0x5555d4b80928 <col:34> 'int' 116
| | `-FullComment 0x5555d4c1a120 <line:1988:6, col:30>
| |   `-ParagraphComment 0x5555d4c1a0f0 <col:6, col:30>
| |     `-TextComment 0x5555d4c1a0c0 <col:6, col:30> Text=" The ?: ternary operator."
| |-EnumConstantDecl 0x5555d4b80a28 <line:1997:3, col:29> col:3 CXCursor_CStyleCastExpr 'int'
| | |-ConstantExpr 0x5555d4b80a08 <col:29> 'int'
| | | |-value: Int 117
| | | `-IntegerLiteral 0x5555d4b809e8 <col:29> 'int' 117
| | `-FullComment 0x5555d4c1a260 <line:1992:6, line:1995:25>
| |   |-ParagraphComment 0x5555d4c1a1e0 <line:1992:6, line:1993:57>
| |   | |-TextComment 0x5555d4c1a190 <line:1992:6, col:64> Text=" An explicit cast in C (C99 6.5.4) or a C-style cast in C++"
| |   | `-TextComment 0x5555d4c1a1b0 <line:1993:5, col:57> Text=" (C++ [expr.cast]), which uses the syntax (Type)expr."
| |   `-ParagraphComment 0x5555d4c1a230 <line:1995:5, col:25>
| |     `-TextComment 0x5555d4c1a200 <col:5, col:25> Text=" For example: (int)f."
| |-EnumConstantDecl 0x5555d4b80ae8 <line:2001:3, col:34> col:3 CXCursor_CompoundLiteralExpr 'int'
| | |-ConstantExpr 0x5555d4b80ac8 <col:34> 'int'
| | | |-value: Int 118
| | | `-IntegerLiteral 0x5555d4b80aa8 <col:34> 'int' 118
| | `-FullComment 0x5555d4c1a330 <line:1999:6, col:19>
| |   `-ParagraphComment 0x5555d4c1a300 <col:6, col:19>
| |     `-TextComment 0x5555d4c1a2d0 <col:6, col:19> Text=" [C99 6.5.2.5]"
| |-EnumConstantDecl 0x5555d4b80ba8 <line:2005:3, col:27> col:3 CXCursor_InitListExpr 'int'
| | |-ConstantExpr 0x5555d4b80b88 <col:27> 'int'
| | | |-value: Int 119
| | | `-IntegerLiteral 0x5555d4b80b68 <col:27> 'int' 119
| | `-FullComment 0x5555d4c1a400 <line:2003:6, col:45>
| |   `-ParagraphComment 0x5555d4c1a3d0 <col:6, col:45>
| |     `-TextComment 0x5555d4c1a3a0 <col:6, col:45> Text=" Describes an C or C++ initializer list."
| |-EnumConstantDecl 0x5555d4b80c68 <line:2009:3, col:28> col:3 CXCursor_AddrLabelExpr 'int'
| | |-ConstantExpr 0x5555d4b80c48 <col:28> 'int'
| | | |-value: Int 120
| | | `-IntegerLiteral 0x5555d4b80c28 <col:28> 'int' 120
| | `-FullComment 0x5555d4c1a540 <line:2007:6, col:63>
| |   `-ParagraphComment 0x5555d4c1a510 <col:6, col:63>
| |     |-TextComment 0x5555d4c1a470 <col:6, col:55> Text=" The GNU address of label extension, representing "
| |     |-TextComment 0x5555d4c1a490 <col:56> Text="&"
| |     |-TextComment 0x5555d4c1a4b0 <col:57, col:62> Text="&label"
| |     `-TextComment 0x5555d4c1a4d0 <col:63> Text="."
| |-EnumConstantDecl 0x5555d4b80d28 <line:2013:3, col:23> col:3 CXCursor_StmtExpr 'int'
| | |-ConstantExpr 0x5555d4b80d08 <col:23> 'int'
| | | |-value: Int 121
| | | `-IntegerLiteral 0x5555d4b80ce8 <col:23> 'int' 121
| | `-FullComment 0x5555d4c1a610 <line:2011:6, col:69>
| |   `-ParagraphComment 0x5555d4c1a5e0 <col:6, col:69>
| |     `-TextComment 0x5555d4c1a5b0 <col:6, col:69> Text=" This is the GNU Statement Expression extension: ({int X=4; X;})"
| |-EnumConstantDecl 0x5555d4b80de8 <line:2017:3, col:35> col:3 CXCursor_GenericSelectionExpr 'int'
| | |-ConstantExpr 0x5555d4b80dc8 <col:35> 'int'
| | | |-value: Int 122
| | | `-IntegerLiteral 0x5555d4b80da8 <col:35> 'int' 122
| | `-FullComment 0x5555d4c1a6e0 <line:2015:6, col:41>
| |   `-ParagraphComment 0x5555d4c1a6b0 <col:6, col:41>
| |     `-TextComment 0x5555d4c1a680 <col:6, col:41> Text=" Represents a C11 generic selection."
| |-EnumConstantDecl 0x5555d4b80ea8 <line:2027:3, col:26> col:3 CXCursor_GNUNullExpr 'int'
| | |-ConstantExpr 0x5555d4b80e88 <col:26> 'int'
| | | |-value: Int 123
| | | `-IntegerLiteral 0x5555d4b80e68 <col:26> 'int' 123
| | `-FullComment 0x5555d4c1a8a0 <line:2019:6, line:2025:34>
| |   |-ParagraphComment 0x5555d4c1a7d0 <line:2019:6, line:2021:37>
| |   | |-TextComment 0x5555d4c1a750 <line:2019:6, col:69> Text=" Implements the GNU __null extension, which is a name for a null"
| |   | |-TextComment 0x5555d4c1a770 <line:2020:5, col:80> Text=" pointer constant that has integral type (e.g., int or long) and is the same"
| |   | `-TextComment 0x5555d4c1a790 <line:2021:5, col:37> Text=" size and alignment as a pointer."
| |   `-ParagraphComment 0x5555d4c1a870 <line:2023:5, line:2025:34>
| |     |-TextComment 0x5555d4c1a7f0 <line:2023:5, col:80> Text=" The __null extension is typically only used by system headers, which define"
| |     |-TextComment 0x5555d4c1a810 <line:2024:5, col:80> Text=" NULL as __null in C++ rather than using 0 (which is an integer that may not"
| |     `-TextComment 0x5555d4c1a830 <line:2025:5, col:34> Text=" match the size of a pointer)."
| |-EnumConstantDecl 0x5555d4b80f68 <line:2031:3, col:32> col:3 CXCursor_CXXStaticCastExpr 'int'
| | |-ConstantExpr 0x5555d4b80f48 <col:32> 'int'
| | | |-value: Int 124
| | | `-IntegerLiteral 0x5555d4b80f28 <col:32> 'int' 124
| | `-FullComment 0x5555d4c1a9c0 <line:2029:6, col:37>
| |   `-ParagraphComment 0x5555d4c1a990 <col:6, col:37>
| |     |-TextComment 0x5555d4c1a910 <col:6, col:23> Text=" C++'s static_cast"
| |     |-TextComment 0x5555d4c1a930 <col:24> Text="<"
| |     `-TextComment 0x5555d4c1a950 <col:25, col:37> Text="> expression."
| |-EnumConstantDecl 0x5555d4b819e0 <line:2035:3, col:33> col:3 CXCursor_CXXDynamicCastExpr 'int'
| | |-ConstantExpr 0x5555d4b81008 <col:33> 'int'
| | | |-value: Int 125
| | | `-IntegerLiteral 0x5555d4b80fe8 <col:33> 'int' 125
| | `-FullComment 0x5555d4c1aae0 <line:2033:6, col:38>
| |   `-ParagraphComment 0x5555d4c1aab0 <col:6, col:38>
| |     |-TextComment 0x5555d4c1aa30 <col:6, col:24> Text=" C++'s dynamic_cast"
| |     |-TextComment 0x5555d4c1aa50 <col:25> Text="<"
| |     `-TextComment 0x5555d4c1aa70 <col:26, col:38> Text="> expression."
| |-EnumConstantDecl 0x5555d4b81a98 <line:2039:3, col:37> col:3 CXCursor_CXXReinterpretCastExpr 'int'
| | |-ConstantExpr 0x5555d4b81a78 <col:37> 'int'
| | | |-value: Int 126
| | | `-IntegerLiteral 0x5555d4b81a58 <col:37> 'int' 126
| | `-FullComment 0x5555d4c1ac00 <line:2037:6, col:42>
| |   `-ParagraphComment 0x5555d4c1abd0 <col:6, col:42>
| |     |-TextComment 0x5555d4c1ab50 <col:6, col:28> Text=" C++'s reinterpret_cast"
| |     |-TextComment 0x5555d4c1ab70 <col:29> Text="<"
| |     `-TextComment 0x5555d4c1ab90 <col:30, col:42> Text="> expression."
| |-EnumConstantDecl 0x5555d4b81b58 <line:2043:3, col:31> col:3 CXCursor_CXXConstCastExpr 'int'
| | |-ConstantExpr 0x5555d4b81b38 <col:31> 'int'
| | | |-value: Int 127
| | | `-IntegerLiteral 0x5555d4b81b18 <col:31> 'int' 127
| | `-FullComment 0x5555d4c1ad20 <line:2041:6, col:36>
| |   `-ParagraphComment 0x5555d4c1acf0 <col:6, col:36>
| |     |-TextComment 0x5555d4c1ac70 <col:6, col:22> Text=" C++'s const_cast"
| |     |-TextComment 0x5555d4c1ac90 <col:23> Text="<"
| |     `-TextComment 0x5555d4c1acb0 <col:24, col:36> Text="> expression."
| |-EnumConstantDecl 0x5555d4b81c18 <line:2053:3, col:36> col:3 CXCursor_CXXFunctionalCastExpr 'int'
| | |-ConstantExpr 0x5555d4b81bf8 <col:36> 'int'
| | | |-value: Int 128
| | | `-IntegerLiteral 0x5555d4b81bd8 <col:36> 'int' 128
| | `-FullComment 0x5555d4c1af60 <line:2045:6, line:2052:3>
| |   |-ParagraphComment 0x5555d4c1ade0 <line:2045:6, line:2046:35>
| |   | |-TextComment 0x5555d4c1ad90 <line:2045:6, col:71> Text=" Represents an explicit C++ type conversion that uses "functional""
| |   | `-TextComment 0x5555d4c1adb0 <line:2046:5, col:35> Text=" notion (C++ [expr.type.conv])."
| |   |-ParagraphComment 0x5555d4c1ae50 <line:2048:5, line:2049:5>
| |   | |-TextComment 0x5555d4c1ae00 <line:2048:5, col:13> Text=" Example:"
| |   | `-TextComment 0x5555d4c1ae20 <line:2049:5> Text=" "
| |   |-VerbatimBlockComment 0x5555d4c1ae70 <col:6, col:11> Name="code" CloseName="endcode"
| |   | `-VerbatimBlockLineComment 0x5555d4c1aec0 <line:2050:5, col:21> Text="   x = int(0.5);"
| |   `-ParagraphComment 0x5555d4c1af20 <line:2052:1, col:3>
| |     `-TextComment 0x5555d4c1aef0 <col:1, col:3> Text="   "
| |-EnumConstantDecl 0x5555d4b81cd8 <line:2057:3, col:28> col:3 CXCursor_CXXTypeidExpr 'int'
| | |-ConstantExpr 0x5555d4b81cb8 <col:28> 'int'
| | | |-value: Int 129
| | | `-IntegerLiteral 0x5555d4b81c98 <col:28> 'int' 129
| | `-FullComment 0x5555d4c1b030 <line:2055:6, col:50>
| |   `-ParagraphComment 0x5555d4c1b000 <col:6, col:50>
| |     `-TextComment 0x5555d4c1afd0 <col:6, col:50> Text=" A C++ typeid expression (C++ [expr.typeid])."
| |-EnumConstantDecl 0x5555d4b81d98 <line:2061:3, col:33> col:3 CXCursor_CXXBoolLiteralExpr 'int'
| | |-ConstantExpr 0x5555d4b81d78 <col:33> 'int'
| | | |-value: Int 130
| | | `-IntegerLiteral 0x5555d4b81d58 <col:33> 'int' 130
| | `-FullComment 0x5555d4c1b100 <line:2059:6, col:39>
| |   `-ParagraphComment 0x5555d4c1b0d0 <col:6, col:39>
| |     `-TextComment 0x5555d4c1b0a0 <col:6, col:39> Text=" [C++ 2.13.5] C++ Boolean Literal."
| |-EnumConstantDecl 0x5555d4b81e58 <line:2065:3, col:36> col:3 CXCursor_CXXNullPtrLiteralExpr 'int'
| | |-ConstantExpr 0x5555d4b81e38 <col:36> 'int'
| | | |-value: Int 131
| | | `-IntegerLiteral 0x5555d4b81e18 <col:36> 'int' 131
| | `-FullComment 0x5555d4c1b1d0 <line:2063:6, col:41>
| |   `-ParagraphComment 0x5555d4c1b1a0 <col:6, col:41>
| |     `-TextComment 0x5555d4c1b170 <col:6, col:41> Text=" [C++0x 2.14.7] C++ Pointer Literal."
| |-EnumConstantDecl 0x5555d4b81f18 <line:2069:3, col:26> col:3 CXCursor_CXXThisExpr 'int'
| | |-ConstantExpr 0x5555d4b81ef8 <col:26> 'int'
| | | |-value: Int 132
| | | `-IntegerLiteral 0x5555d4b81ed8 <col:26> 'int' 132
| | `-FullComment 0x5555d4c1b2a0 <line:2067:6, col:45>
| |   `-ParagraphComment 0x5555d4c1b270 <col:6, col:45>
| |     `-TextComment 0x5555d4c1b240 <col:6, col:45> Text=" Represents the "this" expression in C++"
| |-EnumConstantDecl 0x5555d4b81fd8 <line:2076:3, col:27> col:3 CXCursor_CXXThrowExpr 'int'
| | |-ConstantExpr 0x5555d4b81fb8 <col:27> 'int'
| | | |-value: Int 133
| | | `-IntegerLiteral 0x5555d4b81f98 <col:27> 'int' 133
| | `-FullComment 0x5555d4c1b3e0 <line:2071:6, line:2074:58>
| |   |-ParagraphComment 0x5555d4c1b340 <line:2071:6, col:36>
| |   | `-TextComment 0x5555d4c1b310 <col:6, col:36> Text=" [C++ 15] C++ Throw Expression."
| |   `-ParagraphComment 0x5555d4c1b3b0 <line:2073:5, line:2074:58>
| |     |-TextComment 0x5555d4c1b360 <line:2073:5, col:65> Text=" This handles 'throw' and 'throw' assignment-expression. When"
| |     `-TextComment 0x5555d4c1b380 <line:2074:5, col:58> Text=" assignment-expression isn't present, Op will be null."
| |-EnumConstantDecl 0x5555d4b82098 <line:2081:3, col:25> col:3 CXCursor_CXXNewExpr 'int'
| | |-ConstantExpr 0x5555d4b82078 <col:25> 'int'
| | | |-value: Int 134
| | | `-IntegerLiteral 0x5555d4b82058 <col:25> 'int' 134
| | `-FullComment 0x5555d4c1b4d0 <line:2078:6, line:2079:27>
| |   `-ParagraphComment 0x5555d4c1b4a0 <line:2078:6, line:2079:27>
| |     |-TextComment 0x5555d4c1b450 <line:2078:6, col:72> Text=" A new expression for memory allocation and constructor calls, e.g:"
| |     `-TextComment 0x5555d4c1b470 <line:2079:5, col:27> Text=" "new CXXNewExpr(foo)"."
| |-EnumConstantDecl 0x5555d4b82158 <line:2086:3, col:28> col:3 CXCursor_CXXDeleteExpr 'int'
| | |-ConstantExpr 0x5555d4b82138 <col:28> 'int'
| | | |-value: Int 135
| | | `-IntegerLiteral 0x5555d4b82118 <col:28> 'int' 135
| | `-FullComment 0x5555d4c1b5c0 <line:2083:6, line:2084:28>
| |   `-ParagraphComment 0x5555d4c1b590 <line:2083:6, line:2084:28>
| |     |-TextComment 0x5555d4c1b540 <line:2083:6, col:71> Text=" A delete expression for memory deallocation and destructor calls,"
| |     `-TextComment 0x5555d4c1b560 <line:2084:5, col:28> Text=" e.g. "delete[] pArray"."
| |-EnumConstantDecl 0x5555d4b82218 <line:2090:3, col:24> col:3 CXCursor_UnaryExpr 'int'
| | |-ConstantExpr 0x5555d4b821f8 <col:24> 'int'
| | | |-value: Int 136
| | | `-IntegerLiteral 0x5555d4b821d8 <col:24> 'int' 136
| | `-FullComment 0x5555d4c1b690 <line:2088:6, col:61>
| |   `-ParagraphComment 0x5555d4c1b660 <col:6, col:61>
| |     `-TextComment 0x5555d4c1b630 <col:6, col:61> Text=" A unary expression. (noexcept, sizeof, or other traits)"
| |-EnumConstantDecl 0x5555d4b822d8 <line:2094:3, col:32> col:3 CXCursor_ObjCStringLiteral 'int'
| | |-ConstantExpr 0x5555d4b822b8 <col:32> 'int'
| | | |-value: Int 137
| | | `-IntegerLiteral 0x5555d4b82298 <col:32> 'int' 137
| | `-FullComment 0x5555d4c1b7b0 <line:2092:6, col:48>
| |   `-ParagraphComment 0x5555d4c1b780 <col:6, col:48>
| |     |-TextComment 0x5555d4c1b700 <col:6, col:41> Text=" An Objective-C string literal i.e. "
| |     |-TextComment 0x5555d4c1b720 <col:42, col:43> Text="""
| |     `-TextComment 0x5555d4c1b740 <col:44, col:48> Text="foo"."
| |-EnumConstantDecl 0x5555d4b82398 <line:2098:3, col:29> col:3 CXCursor_ObjCEncodeExpr 'int'
| | |-ConstantExpr 0x5555d4b82378 <col:29> 'int'
| | | |-value: Int 138
| | | `-IntegerLiteral 0x5555d4b82358 <col:29> 'int' 138
| | `-FullComment 0x5555d4c1b8d0 <line:2096:6, col:41>
| |   `-ParagraphComment 0x5555d4c1b8a0 <col:6, col:41>
| |     |-TextComment 0x5555d4c1b820 <col:6, col:21> Text=" An Objective-C "
| |     |-TextComment 0x5555d4c1b840 <col:22, col:23> Text="@"
| |     `-TextComment 0x5555d4c1b860 <col:24, col:41> Text="encode expression."
| |-EnumConstantDecl 0x5555d4b82458 <line:2102:3, col:31> col:3 CXCursor_ObjCSelectorExpr 'int'
| | |-ConstantExpr 0x5555d4b82438 <col:31> 'int'
| | | |-value: Int 139
| | | `-IntegerLiteral 0x5555d4b82418 <col:31> 'int' 139
| | `-FullComment 0x5555d4c1b9f0 <line:2100:6, col:43>
| |   `-ParagraphComment 0x5555d4c1b9c0 <col:6, col:43>
| |     |-TextComment 0x5555d4c1b940 <col:6, col:21> Text=" An Objective-C "
| |     |-TextComment 0x5555d4c1b960 <col:22, col:23> Text="@"
| |     `-TextComment 0x5555d4c1b980 <col:24, col:43> Text="selector expression."
| |-EnumConstantDecl 0x5555d4b82518 <line:2106:3, col:31> col:3 CXCursor_ObjCProtocolExpr 'int'
| | |-ConstantExpr 0x5555d4b824f8 <col:31> 'int'
| | | |-value: Int 140
| | | `-IntegerLiteral 0x5555d4b824d8 <col:31> 'int' 140
| | `-FullComment 0x5555d4c1bb10 <line:2104:6, col:43>
| |   `-ParagraphComment 0x5555d4c1bae0 <col:6, col:43>
| |     |-TextComment 0x5555d4c1ba60 <col:6, col:21> Text=" An Objective-C "
| |     |-TextComment 0x5555d4c1ba80 <col:22, col:23> Text="@"
| |     `-TextComment 0x5555d4c1baa0 <col:24, col:43> Text="protocol expression."
| |-EnumConstantDecl 0x5555d4b825d8 <line:2115:3, col:34> col:3 CXCursor_ObjCBridgedCastExpr 'int'
| | |-ConstantExpr 0x5555d4b825b8 <col:34> 'int'
| | | |-value: Int 141
| | | `-IntegerLiteral 0x5555d4b82598 <col:34> 'int' 141
| | `-FullComment 0x5555d4c1bd50 <line:2108:6, line:2114:3>
| |   |-ParagraphComment 0x5555d4c1bbd0 <line:2108:6, line:2109:80>
| |   | |-TextComment 0x5555d4c1bb80 <line:2108:6, col:67> Text=" An Objective-C "bridged" cast expression, which casts between"
| |   | `-TextComment 0x5555d4c1bba0 <line:2109:5, col:80> Text=" Objective-C pointers and C pointers, transferring ownership in the process."
| |   |-ParagraphComment 0x5555d4c1bc20 <line:2111:5>
| |   | `-TextComment 0x5555d4c1bbf0 <col:5> Text=" "
| |   |-VerbatimBlockComment 0x5555d4c1bc40 <col:6, col:11> Name="code" CloseName="endcode"
| |   | `-VerbatimBlockLineComment 0x5555d4c1bc90 <line:2112:5, col:71> Text="   NSString *str = (__bridge_transfer NSString *)CFCreateString();"
| |   `-ParagraphComment 0x5555d4c1bd10 <line:2114:1, col:3>
| |     `-TextComment 0x5555d4c1bce0 <col:1, col:3> Text="   "
| |-EnumConstantDecl 0x5555d4b82698 <line:2130:3, col:32> col:3 CXCursor_PackExpansionExpr 'int'
| | |-ConstantExpr 0x5555d4b82678 <col:32> 'int'
| | | |-value: Int 142
| | | `-IntegerLiteral 0x5555d4b82658 <col:32> 'int' 142
| | `-FullComment 0x5555d4c1c060 <line:2117:6, line:2129:3>
| |   |-ParagraphComment 0x5555d4c1be10 <line:2117:6, line:2118:17>
| |   | |-TextComment 0x5555d4c1bdc0 <line:2117:6, col:67> Text=" Represents a C++0x pack expansion that produces a sequence of"
| |   | `-TextComment 0x5555d4c1bde0 <line:2118:5, col:17> Text=" expressions."
| |   |-ParagraphComment 0x5555d4c1be80 <line:2120:5, line:2121:54>
| |   | |-TextComment 0x5555d4c1be30 <line:2120:5, col:71> Text=" A pack expansion expression contains a pattern (which itself is an"
| |   | `-TextComment 0x5555d4c1be50 <line:2121:5, col:54> Text=" expression) followed by an ellipsis. For example:"
| |   |-ParagraphComment 0x5555d4c1bed0 <line:2123:5>
| |   | `-TextComment 0x5555d4c1bea0 <col:5> Text=" "
| |   |-VerbatimBlockComment 0x5555d4c1bef0 <col:6, col:11> Name="code" CloseName="endcode"
| |   | |-VerbatimBlockLineComment 0x5555d4c1bf40 <line:2124:5, col:45> Text=" template<typename F, typename ...Types>"
| |   | |-VerbatimBlockLineComment 0x5555d4c1bf60 <line:2125:5, col:42> Text=" void forward(F f, Types &&...args) {"
| |   | |-VerbatimBlockLineComment 0x5555d4c1bf80 <line:2126:5, col:40> Text="  f(static_cast<Types&&>(args)...);"
| |   | `-VerbatimBlockLineComment 0x5555d4c1bfa0 <line:2127:5, col:7> Text=" }"
| |   `-ParagraphComment 0x5555d4c1c010 <line:2129:1, col:3>
| |     `-TextComment 0x5555d4c1bfe0 <col:1, col:3> Text="   "
| |-EnumConstantDecl 0x5555d4b82758 <line:2142:3, col:29> col:3 CXCursor_SizeOfPackExpr 'int'
| | |-ConstantExpr 0x5555d4b82738 <col:29> 'int'
| | | |-value: Int 143
| | | `-IntegerLiteral 0x5555d4b82718 <col:29> 'int' 143
| | `-FullComment 0x5555d4c1c2f0 <line:2132:6, line:2141:3>
| |   |-ParagraphComment 0x5555d4c1c120 <line:2132:6, line:2133:10>
| |   | |-TextComment 0x5555d4c1c0d0 <line:2132:6, col:70> Text=" Represents an expression that computes the length of a parameter"
| |   | `-TextComment 0x5555d4c1c0f0 <line:2133:5, col:10> Text=" pack."
| |   |-ParagraphComment 0x5555d4c1c170 <line:2135:5>
| |   | `-TextComment 0x5555d4c1c140 <col:5> Text=" "
| |   |-VerbatimBlockComment 0x5555d4c1c190 <col:6, col:11> Name="code" CloseName="endcode"
| |   | |-VerbatimBlockLineComment 0x5555d4c1c1e0 <line:2136:5, col:33> Text=" template<typename ...Types>"
| |   | |-VerbatimBlockLineComment 0x5555d4c1c200 <line:2137:5, col:20> Text=" struct count {"
| |   | |-VerbatimBlockLineComment 0x5555d4c1c220 <line:2138:5, col:55> Text="   static const unsigned value = sizeof...(Types);"
| |   | `-VerbatimBlockLineComment 0x5555d4c1c240 <line:2139:5, col:8> Text=" };"
| |   `-ParagraphComment 0x5555d4c1c2b0 <line:2141:1, col:3>
| |     `-TextComment 0x5555d4c1c280 <col:1, col:3> Text="   "
| |-EnumConstantDecl 0x5555d4b827e8 <line:2156:3, col:25> col:3 CXCursor_LambdaExpr 'int'
| | `-ConstantExpr 0x5555d4b827c8 <col:25> 'int'
| |   |-value: Int 144
| |   `-IntegerLiteral 0x5555d4b827a8 <col:25> 'int' 144
| |-EnumConstantDecl 0x5555d4b828a8 <line:2160:3, col:34> col:3 CXCursor_ObjCBoolLiteralExpr 'int'
| | |-ConstantExpr 0x5555d4b82888 <col:34> 'int'
| | | |-value: Int 145
| | | `-IntegerLiteral 0x5555d4b82868 <col:34> 'int' 145
| | `-FullComment 0x5555d4c1c3c0 <line:2158:6, col:34>
| |   `-ParagraphComment 0x5555d4c1c390 <col:6, col:34>
| |     `-TextComment 0x5555d4c1c360 <col:6, col:34> Text=" Objective-c Boolean Literal."
| |-EnumConstantDecl 0x5555d4b82968 <line:2164:3, col:27> col:3 CXCursor_ObjCSelfExpr 'int'
| | |-ConstantExpr 0x5555d4b82948 <col:27> 'int'
| | | |-value: Int 146
| | | `-IntegerLiteral 0x5555d4b82928 <col:27> 'int' 146
| | `-FullComment 0x5555d4c1c490 <line:2162:6, col:64>
| |   `-ParagraphComment 0x5555d4c1c460 <col:6, col:64>
| |     `-TextComment 0x5555d4c1c430 <col:6, col:64> Text=" Represents the "self" expression in an Objective-C method."
| |-EnumConstantDecl 0x5555d4b82f58 <line:2168:3, col:34> col:3 CXCursor_OMPArraySectionExpr 'int'
| | |-ConstantExpr 0x5555d4b82f38 <col:34> 'int'
| | | |-value: Int 147
| | | `-IntegerLiteral 0x5555d4b82f18 <col:34> 'int' 147
| | `-FullComment 0x5555d4c1c560 <line:2166:6, col:40>
| |   `-ParagraphComment 0x5555d4c1c530 <col:6, col:40>
| |     `-TextComment 0x5555d4c1c500 <col:6, col:40> Text=" OpenMP 5.0 [2.1.5, Array Section]."
| |-EnumConstantDecl 0x5555d4b83018 <line:2172:3, col:40> col:3 CXCursor_ObjCAvailabilityCheckExpr 'int'
| | |-ConstantExpr 0x5555d4b82ff8 <col:40> 'int'
| | | |-value: Int 148
| | | `-IntegerLiteral 0x5555d4b82fd8 <col:40> 'int' 148
| | `-FullComment 0x5555d4c1c6b0 <line:2170:6, col:42>
| |   `-ParagraphComment 0x5555d4c1c680 <col:6, col:42>
| |     |-TextComment 0x5555d4c1c5d0 <col:6, col:20> Text=" Represents an "
| |     |-InlineCommandComment 0x5555d4c1c620 <col:21, col:30> Name="available" RenderNormal
| |     `-TextComment 0x5555d4c1c640 <col:31, col:42> Text="(...) check."
| |-EnumConstantDecl 0x5555d4b830d8 <line:2177:3, col:32> col:3 CXCursor_FixedPointLiteral 'int'
| | |-ConstantExpr 0x5555d4b830b8 <col:32> 'int'
| | | |-value: Int 149
| | | `-IntegerLiteral 0x5555d4b83098 <col:32> 'int' 149
| | `-FullComment 0x5555d4c1c780 <line:2175:5, col:24>
| |   `-ParagraphComment 0x5555d4c1c750 <col:5, col:24>
| |     `-TextComment 0x5555d4c1c720 <col:5, col:24> Text=" Fixed point literal"
| |-EnumConstantDecl 0x5555d4b83198 <line:2181:3, col:34> col:3 CXCursor_OMPArrayShapingExpr 'int'
| | |-ConstantExpr 0x5555d4b83178 <col:34> 'int'
| | | |-value: Int 150
| | | `-IntegerLiteral 0x5555d4b83158 <col:34> 'int' 150
| | `-FullComment 0x5555d4c1c850 <line:2179:6, col:40>
| |   `-ParagraphComment 0x5555d4c1c820 <col:6, col:40>
| |     `-TextComment 0x5555d4c1c7f0 <col:6, col:40> Text=" OpenMP 5.0 [2.1.4, Array Shaping]."
| |-EnumConstantDecl 0x5555d4b83258 <line:2186:3, col:30> col:3 CXCursor_OMPIteratorExpr 'int'
| | |-ConstantExpr 0x5555d4b83238 <col:30> 'int'
| | | |-value: Int 151
| | | `-IntegerLiteral 0x5555d4b83218 <col:30> 'int' 151
| | `-FullComment 0x5555d4c1c920 <line:2184:5, col:33>
| |   `-ParagraphComment 0x5555d4c1c8f0 <col:5, col:33>
| |     `-TextComment 0x5555d4c1c8c0 <col:5, col:33> Text=" OpenMP 5.0 [2.1.6 Iterators]"
| |-EnumConstantDecl 0x5555d4b83318 <line:2190:3, col:35> col:3 referenced CXCursor_CXXAddrspaceCastExpr 'int'
| | |-ConstantExpr 0x5555d4b832f8 <col:35> 'int'
| | | |-value: Int 152
| | | `-IntegerLiteral 0x5555d4b832d8 <col:35> 'int' 152
| | `-FullComment 0x5555d4c1ca40 <line:2188:6, col:43>
| |   `-ParagraphComment 0x5555d4c1ca10 <col:6, col:43>
| |     |-TextComment 0x5555d4c1c990 <col:6, col:29> Text=" OpenCL's addrspace_cast"
| |     |-TextComment 0x5555d4c1c9b0 <col:30> Text="<"
| |     `-TextComment 0x5555d4c1c9d0 <col:31, col:43> Text="> expression."
| |-EnumConstantDecl 0x5555d4b833a8 <line:2192:3, col:23> col:3 CXCursor_LastExpr 'int'
| | |-ConstantExpr 0x5555d4b83388 <col:23> 'int'
| | | |-value: Int 152
| | | `-DeclRefExpr 0x5555d4b83368 <col:23> 'int' EnumConstant 0x5555d4b83318 'CXCursor_CXXAddrspaceCastExpr' 'int'
| | `-FullComment 0x5555d4c1cb60 <line:2188:6, col:43>
| |   `-ParagraphComment 0x5555d4c1cb30 <col:6, col:43>
| |     |-TextComment 0x5555d4c1cab0 <col:6, col:29> Text=" OpenCL's addrspace_cast"
| |     |-TextComment 0x5555d4c1cad0 <col:30> Text="<"
| |     `-TextComment 0x5555d4c1caf0 <col:31, col:43> Text="> expression."
| |-EnumConstantDecl 0x5555d4b83438 <line:2195:3, col:24> col:3 CXCursor_FirstStmt 'int'
| | |-ConstantExpr 0x5555d4b83418 <col:24> 'int'
| | | |-value: Int 200
| | | `-IntegerLiteral 0x5555d4b833f8 <col:24> 'int' 200
| | `-FullComment 0x5555d4c1cc80 <line:2188:6, col:43>
| |   `-ParagraphComment 0x5555d4c1cc50 <col:6, col:43>
| |     |-TextComment 0x5555d4c1cbd0 <col:6, col:29> Text=" OpenCL's addrspace_cast"
| |     |-TextComment 0x5555d4c1cbf0 <col:30> Text="<"
| |     `-TextComment 0x5555d4c1cc10 <col:31, col:43> Text="> expression."
| |-EnumConstantDecl 0x5555d4b834f8 <line:2205:3, col:28> col:3 CXCursor_UnexposedStmt 'int'
| | |-ConstantExpr 0x5555d4b834d8 <col:28> 'int'
| | | |-value: Int 200
| | | `-IntegerLiteral 0x5555d4b834b8 <col:28> 'int' 200
| | `-FullComment 0x5555d4c1ce30 <line:2197:5, line:2203:14>
| |   |-ParagraphComment 0x5555d4c1cd40 <line:2197:5, line:2198:15>
| |   | |-TextComment 0x5555d4c1ccf0 <line:2197:5, col:60> Text=" A statement whose specific kind is not exposed via this"
| |   | `-TextComment 0x5555d4c1cd10 <line:2198:5, col:15> Text=" interface."
| |   `-ParagraphComment 0x5555d4c1ce00 <line:2200:5, line:2203:14>
| |     |-TextComment 0x5555d4c1cd60 <line:2200:5, col:71> Text=" Unexposed statements have the same operations as any other kind of"
| |     |-TextComment 0x5555d4c1cd80 <line:2201:5, col:69> Text=" statement; one can extract their location information, spelling,"
| |     |-TextComment 0x5555d4c1cda0 <line:2202:5, col:70> Text=" children, etc. However, the specific kind of the statement is not"
| |     `-TextComment 0x5555d4c1cdc0 <line:2203:5, col:14> Text=" reported."
| |-EnumConstantDecl 0x5555d4b835b8 <line:2218:3, col:24> col:3 CXCursor_LabelStmt 'int'
| | |-ConstantExpr 0x5555d4b83598 <col:24> 'int'
| | | |-value: Int 201
| | | `-IntegerLiteral 0x5555d4b83578 <col:24> 'int' 201
| | `-FullComment 0x5555d4c1d0d0 <line:2207:6, line:2217:3>
| |   |-ParagraphComment 0x5555d4c1ced0 <line:2207:6, col:41>
| |   | `-TextComment 0x5555d4c1cea0 <col:6, col:41> Text=" A labelled statement in a function."
| |   |-ParagraphComment 0x5555d4c1cf40 <line:2209:5, line:2210:27>
| |   | |-TextComment 0x5555d4c1cef0 <line:2209:5, col:78> Text=" This cursor kind is used to describe the "start_over:" label statement in"
| |   | `-TextComment 0x5555d4c1cf10 <line:2210:5, col:27> Text=" the following example:"
| |   |-ParagraphComment 0x5555d4c1cf90 <line:2212:5>
| |   | `-TextComment 0x5555d4c1cf60 <col:5> Text=" "
| |   |-VerbatimBlockComment 0x5555d4c1cfb0 <col:6, col:11> Name="code" CloseName="endcode"
| |   | |-VerbatimBlockLineComment 0x5555d4c1d000 <line:2213:5, col:19> Text="   start_over:"
| |   | `-VerbatimBlockLineComment 0x5555d4c1d020 <line:2214:5, col:20> Text="     ++counter;"
| |   `-ParagraphComment 0x5555d4c1d080 <line:2217:1, col:3>
| |     `-TextComment 0x5555d4c1d050 <col:1, col:3> Text="   "
| |-EnumConstantDecl 0x5555d4b83678 <line:2225:3, col:27> col:3 CXCursor_CompoundStmt 'int'
| | |-ConstantExpr 0x5555d4b83658 <col:27> 'int'
| | | |-value: Int 202
| | | `-IntegerLiteral 0x5555d4b83638 <col:27> 'int' 202
| | `-FullComment 0x5555d4c1d210 <line:2220:6, line:2223:12>
| |   |-ParagraphComment 0x5555d4c1d170 <line:2220:6, col:47>
| |   | `-TextComment 0x5555d4c1d140 <col:6, col:47> Text=" A group of statements like { stmt stmt }."
| |   `-ParagraphComment 0x5555d4c1d1e0 <line:2222:5, line:2223:12>
| |     |-TextComment 0x5555d4c1d190 <line:2222:5, col:76> Text=" This cursor kind is used to describe compound statements, e.g. function"
| |     `-TextComment 0x5555d4c1d1b0 <line:2223:5, col:12> Text=" bodies."
| |-EnumConstantDecl 0x5555d4b83738 <line:2229:3, col:23> col:3 CXCursor_CaseStmt 'int'
| | |-ConstantExpr 0x5555d4b83718 <col:23> 'int'
| | | |-value: Int 203
| | | `-IntegerLiteral 0x5555d4b836f8 <col:23> 'int' 203
| | `-FullComment 0x5555d4c1d2e0 <line:2227:6, col:23>
| |   `-ParagraphComment 0x5555d4c1d2b0 <col:6, col:23>
| |     `-TextComment 0x5555d4c1d280 <col:6, col:23> Text=" A case statement."
| |-EnumConstantDecl 0x5555d4b837f8 <line:2233:3, col:26> col:3 CXCursor_DefaultStmt 'int'
| | |-ConstantExpr 0x5555d4b837d8 <col:26> 'int'
| | | |-value: Int 204
| | | `-IntegerLiteral 0x5555d4b837b8 <col:26> 'int' 204
| | `-FullComment 0x5555d4c1d3b0 <line:2231:6, col:26>
| |   `-ParagraphComment 0x5555d4c1d380 <col:6, col:26>
| |     `-TextComment 0x5555d4c1d350 <col:6, col:26> Text=" A default statement."
| |-EnumConstantDecl 0x5555d4b838b8 <line:2237:3, col:21> col:3 CXCursor_IfStmt 'int'
| | |-ConstantExpr 0x5555d4b83898 <col:21> 'int'
| | | |-value: Int 205
| | | `-IntegerLiteral 0x5555d4b83878 <col:21> 'int' 205
| | `-FullComment 0x5555d4c1d480 <line:2235:6, col:21>
| |   `-ParagraphComment 0x5555d4c1d450 <col:6, col:21>
| |     `-TextComment 0x5555d4c1d420 <col:6, col:21> Text=" An if statement"
| |-EnumConstantDecl 0x5555d4b83978 <line:2241:3, col:25> col:3 CXCursor_SwitchStmt 'int'
| | |-ConstantExpr 0x5555d4b83958 <col:25> 'int'
| | | |-value: Int 206
| | | `-IntegerLiteral 0x5555d4b83938 <col:25> 'int' 206
| | `-FullComment 0x5555d4c1d550 <line:2239:6, col:25>
| |   `-ParagraphComment 0x5555d4c1d520 <col:6, col:25>
| |     `-TextComment 0x5555d4c1d4f0 <col:6, col:25> Text=" A switch statement."
| |-EnumConstantDecl 0x5555d4b83a38 <line:2245:3, col:24> col:3 CXCursor_WhileStmt 'int'
| | |-ConstantExpr 0x5555d4b83a18 <col:24> 'int'
| | | |-value: Int 207
| | | `-IntegerLiteral 0x5555d4b839f8 <col:24> 'int' 207
| | `-FullComment 0x5555d4c1d620 <line:2243:6, col:24>
| |   `-ParagraphComment 0x5555d4c1d5f0 <col:6, col:24>
| |     `-TextComment 0x5555d4c1d5c0 <col:6, col:24> Text=" A while statement."
| |-EnumConstantDecl 0x5555d4b83af8 <line:2249:3, col:21> col:3 CXCursor_DoStmt 'int'
| | |-ConstantExpr 0x5555d4b83ad8 <col:21> 'int'
| | | |-value: Int 208
| | | `-IntegerLiteral 0x5555d4b83ab8 <col:21> 'int' 208
| | `-FullComment 0x5555d4c1d6f0 <line:2247:6, col:21>
| |   `-ParagraphComment 0x5555d4c1d6c0 <col:6, col:21>
| |     `-TextComment 0x5555d4c1d690 <col:6, col:21> Text=" A do statement."
| |-EnumConstantDecl 0x5555d4b83bb8 <line:2253:3, col:22> col:3 CXCursor_ForStmt 'int'
| | |-ConstantExpr 0x5555d4b83b98 <col:22> 'int'
| | | |-value: Int 209
| | | `-IntegerLiteral 0x5555d4b83b78 <col:22> 'int' 209
| | `-FullComment 0x5555d4c1d7c0 <line:2251:6, col:22>
| |   `-ParagraphComment 0x5555d4c1d790 <col:6, col:22>
| |     `-TextComment 0x5555d4c1d760 <col:6, col:22> Text=" A for statement."
| |-EnumConstantDecl 0x5555d4b83c78 <line:2257:3, col:23> col:3 CXCursor_GotoStmt 'int'
| | |-ConstantExpr 0x5555d4b83c58 <col:23> 'int'
| | | |-value: Int 210
| | | `-IntegerLiteral 0x5555d4b83c38 <col:23> 'int' 210
| | `-FullComment 0x5555d4c1d890 <line:2255:6, col:23>
| |   `-ParagraphComment 0x5555d4c1d860 <col:6, col:23>
| |     `-TextComment 0x5555d4c1d830 <col:6, col:23> Text=" A goto statement."
| |-EnumConstantDecl 0x5555d4b83d38 <line:2261:3, col:31> col:3 CXCursor_IndirectGotoStmt 'int'
| | |-ConstantExpr 0x5555d4b83d18 <col:31> 'int'
| | | |-value: Int 211
| | | `-IntegerLiteral 0x5555d4b83cf8 <col:31> 'int' 211
| | `-FullComment 0x5555d4c1d960 <line:2259:6, col:33>
| |   `-ParagraphComment 0x5555d4c1d930 <col:6, col:33>
| |     `-TextComment 0x5555d4c1d900 <col:6, col:33> Text=" An indirect goto statement."
| |-EnumConstantDecl 0x5555d4b83df8 <line:2265:3, col:27> col:3 CXCursor_ContinueStmt 'int'
| | |-ConstantExpr 0x5555d4b83dd8 <col:27> 'int'
| | | |-value: Int 212
| | | `-IntegerLiteral 0x5555d4b83db8 <col:27> 'int' 212
| | `-FullComment 0x5555d4c1da30 <line:2263:6, col:27>
| |   `-ParagraphComment 0x5555d4c1da00 <col:6, col:27>
| |     `-TextComment 0x5555d4c1d9d0 <col:6, col:27> Text=" A continue statement."
| |-EnumConstantDecl 0x5555d4b95100 <line:2269:3, col:24> col:3 CXCursor_BreakStmt 'int'
| | |-ConstantExpr 0x5555d4b83e98 <col:24> 'int'
| | | |-value: Int 213
| | | `-IntegerLiteral 0x5555d4b83e78 <col:24> 'int' 213
| | `-FullComment 0x5555d4c1db00 <line:2267:6, col:24>
| |   `-ParagraphComment 0x5555d4c1dad0 <col:6, col:24>
| |     `-TextComment 0x5555d4c1daa0 <col:6, col:24> Text=" A break statement."
| |-EnumConstantDecl 0x5555d4b951b8 <line:2273:3, col:25> col:3 CXCursor_ReturnStmt 'int'
| | |-ConstantExpr 0x5555d4b95198 <col:25> 'int'
| | | |-value: Int 214
| | | `-IntegerLiteral 0x5555d4b95178 <col:25> 'int' 214
| | `-FullComment 0x5555d4c1dbd0 <line:2271:6, col:25>
| |   `-ParagraphComment 0x5555d4c1dba0 <col:6, col:25>
| |     `-TextComment 0x5555d4c1db70 <col:6, col:25> Text=" A return statement."
| |-EnumConstantDecl 0x5555d4b95278 <line:2277:3, col:25> col:3 referenced CXCursor_GCCAsmStmt 'int'
| | |-ConstantExpr 0x5555d4b95258 <col:25> 'int'
| | | |-value: Int 215
| | | `-IntegerLiteral 0x5555d4b95238 <col:25> 'int' 215
| | `-FullComment 0x5555d4c1dca0 <line:2275:6, col:48>
| |   `-ParagraphComment 0x5555d4c1dc70 <col:6, col:48>
| |     `-TextComment 0x5555d4c1dc40 <col:6, col:48> Text=" A GCC inline assembly statement extension."
| |-EnumConstantDecl 0x5555d4b95308 <line:2278:3, col:22> col:3 CXCursor_AsmStmt 'int'
| | |-ConstantExpr 0x5555d4b952e8 <col:22> 'int'
| | | |-value: Int 215
| | | `-DeclRefExpr 0x5555d4b952c8 <col:22> 'int' EnumConstant 0x5555d4b95278 'CXCursor_GCCAsmStmt' 'int'
| | `-FullComment 0x5555d4c1dd90 <line:2275:6, col:48>
| |   `-ParagraphComment 0x5555d4c1dd60 <col:6, col:48>
| |     `-TextComment 0x5555d4c1dd30 <col:6, col:48> Text=" A GCC inline assembly statement extension."
| |-EnumConstantDecl 0x5555d4b953c8 <line:2282:3, col:28> col:3 CXCursor_ObjCAtTryStmt 'int'
| | |-ConstantExpr 0x5555d4b953a8 <col:28> 'int'
| | | |-value: Int 216
| | | `-IntegerLiteral 0x5555d4b95388 <col:28> 'int' 216
| | `-FullComment 0x5555d4c1df50 <line:2280:6, col:62>
| |   `-ParagraphComment 0x5555d4c1df20 <col:6, col:62>
| |     |-TextComment 0x5555d4c1de00 <col:6, col:28> Text=" Objective-C's overall "
| |     |-TextComment 0x5555d4c1de20 <col:29, col:30> Text="@"
| |     |-TextComment 0x5555d4c1de40 <col:31, col:34> Text="try-"
| |     |-TextComment 0x5555d4c1de60 <col:35, col:36> Text="@"
| |     |-TextComment 0x5555d4c1de80 <col:37, col:42> Text="catch-"
| |     |-TextComment 0x5555d4c1dea0 <col:43, col:44> Text="@"
| |     `-TextComment 0x5555d4c1dec0 <col:45, col:62> Text="finally statement."
| |-EnumConstantDecl 0x5555d4b95488 <line:2286:3, col:30> col:3 CXCursor_ObjCAtCatchStmt 'int'
| | |-ConstantExpr 0x5555d4b95468 <col:30> 'int'
| | | |-value: Int 217
| | | `-IntegerLiteral 0x5555d4b95448 <col:30> 'int' 217
| | `-FullComment 0x5555d4c1e070 <line:2284:6, col:38>
| |   `-ParagraphComment 0x5555d4c1e040 <col:6, col:38>
| |     |-TextComment 0x5555d4c1dfc0 <col:6, col:20> Text=" Objective-C's "
| |     |-TextComment 0x5555d4c1dfe0 <col:21, col:22> Text="@"
| |     `-TextComment 0x5555d4c1e000 <col:23, col:38> Text="catch statement."
| |-EnumConstantDecl 0x5555d4b95548 <line:2290:3, col:32> col:3 CXCursor_ObjCAtFinallyStmt 'int'
| | |-ConstantExpr 0x5555d4b95528 <col:32> 'int'
| | | |-value: Int 218
| | | `-IntegerLiteral 0x5555d4b95508 <col:32> 'int' 218
| | `-FullComment 0x5555d4c1e190 <line:2288:6, col:40>
| |   `-ParagraphComment 0x5555d4c1e160 <col:6, col:40>
| |     |-TextComment 0x5555d4c1e0e0 <col:6, col:20> Text=" Objective-C's "
| |     |-TextComment 0x5555d4c1e100 <col:21, col:22> Text="@"
| |     `-TextComment 0x5555d4c1e120 <col:23, col:40> Text="finally statement."
| |-EnumConstantDecl 0x5555d4b95608 <line:2294:3, col:30> col:3 CXCursor_ObjCAtThrowStmt 'int'
| | |-ConstantExpr 0x5555d4b955e8 <col:30> 'int'
| | | |-value: Int 219
| | | `-IntegerLiteral 0x5555d4b955c8 <col:30> 'int' 219
| | `-FullComment 0x5555d4c1e2b0 <line:2292:6, col:38>
| |   `-ParagraphComment 0x5555d4c1e280 <col:6, col:38>
| |     |-TextComment 0x5555d4c1e200 <col:6, col:20> Text=" Objective-C's "
| |     |-TextComment 0x5555d4c1e220 <col:21, col:22> Text="@"
| |     `-TextComment 0x5555d4c1e240 <col:23, col:38> Text="throw statement."
| |-EnumConstantDecl 0x5555d4b956c8 <line:2298:3, col:37> col:3 CXCursor_ObjCAtSynchronizedStmt 'int'
| | |-ConstantExpr 0x5555d4b956a8 <col:37> 'int'
| | | |-value: Int 220
| | | `-IntegerLiteral 0x5555d4b95688 <col:37> 'int' 220
| | `-FullComment 0x5555d4c1e3d0 <line:2296:6, col:45>
| |   `-ParagraphComment 0x5555d4c1e3a0 <col:6, col:45>
| |     |-TextComment 0x5555d4c1e320 <col:6, col:20> Text=" Objective-C's "
| |     |-TextComment 0x5555d4c1e340 <col:21, col:22> Text="@"
| |     `-TextComment 0x5555d4c1e360 <col:23, col:45> Text="synchronized statement."
| |-EnumConstantDecl 0x5555d4b95788 <line:2302:3, col:38> col:3 CXCursor_ObjCAutoreleasePoolStmt 'int'
| | |-ConstantExpr 0x5555d4b95768 <col:38> 'int'
| | | |-value: Int 221
| | | `-IntegerLiteral 0x5555d4b95748 <col:38> 'int' 221
| | `-FullComment 0x5555d4c1e4a0 <line:2300:6, col:47>
| |   `-ParagraphComment 0x5555d4c1e470 <col:6, col:47>
| |     `-TextComment 0x5555d4c1e440 <col:6, col:47> Text=" Objective-C's autorelease pool statement."
| |-EnumConstantDecl 0x5555d4b95848 <line:2306:3, col:36> col:3 CXCursor_ObjCForCollectionStmt 'int'
| | |-ConstantExpr 0x5555d4b95828 <col:36> 'int'
| | | |-value: Int 222
| | | `-IntegerLiteral 0x5555d4b95808 <col:36> 'int' 222
| | `-FullComment 0x5555d4c1e570 <line:2304:6, col:41>
| |   `-ParagraphComment 0x5555d4c1e540 <col:6, col:41>
| |     `-TextComment 0x5555d4c1e510 <col:6, col:41> Text=" Objective-C's collection statement."
| |-EnumConstantDecl 0x5555d4b95908 <line:2310:3, col:27> col:3 CXCursor_CXXCatchStmt 'int'
| | |-ConstantExpr 0x5555d4b958e8 <col:27> 'int'
| | | |-value: Int 223
| | | `-IntegerLiteral 0x5555d4b958c8 <col:27> 'int' 223
| | `-FullComment 0x5555d4c1e640 <line:2308:6, col:28>
| |   `-ParagraphComment 0x5555d4c1e610 <col:6, col:28>
| |     `-TextComment 0x5555d4c1e5e0 <col:6, col:28> Text=" C++'s catch statement."
| |-EnumConstantDecl 0x5555d4b959c8 <line:2314:3, col:25> col:3 CXCursor_CXXTryStmt 'int'
| | |-ConstantExpr 0x5555d4b959a8 <col:25> 'int'
| | | |-value: Int 224
| | | `-IntegerLiteral 0x5555d4b95988 <col:25> 'int' 224
| | `-FullComment 0x5555d4c1e710 <line:2312:6, col:26>
| |   `-ParagraphComment 0x5555d4c1e6e0 <col:6, col:26>
| |     `-TextComment 0x5555d4c1e6b0 <col:6, col:26> Text=" C++'s try statement."
| |-EnumConstantDecl 0x5555d4b95a88 <line:2318:3, col:30> col:3 CXCursor_CXXForRangeStmt 'int'
| | |-ConstantExpr 0x5555d4b95a68 <col:30> 'int'
| | | |-value: Int 225
| | | `-IntegerLiteral 0x5555d4b95a48 <col:30> 'int' 225
| | `-FullComment 0x5555d4c1e7e0 <line:2316:6, col:34>
| |   `-ParagraphComment 0x5555d4c1e7b0 <col:6, col:34>
| |     `-TextComment 0x5555d4c1e780 <col:6, col:34> Text=" C++'s for (* : *) statement."
| |-EnumConstantDecl 0x5555d4b95b48 <line:2322:3, col:25> col:3 CXCursor_SEHTryStmt 'int'
| | |-ConstantExpr 0x5555d4b95b28 <col:25> 'int'
| | | |-value: Int 226
| | | `-IntegerLiteral 0x5555d4b95b08 <col:25> 'int' 226
| | `-FullComment 0x5555d4c1e8b0 <line:2320:6, col:60>
| |   `-ParagraphComment 0x5555d4c1e880 <col:6, col:60>
| |     `-TextComment 0x5555d4c1e850 <col:6, col:60> Text=" Windows Structured Exception Handling's try statement."
| |-EnumConstantDecl 0x5555d4b95c08 <line:2326:3, col:28> col:3 CXCursor_SEHExceptStmt 'int'
| | |-ConstantExpr 0x5555d4b95be8 <col:28> 'int'
| | | |-value: Int 227
| | | `-IntegerLiteral 0x5555d4b95bc8 <col:28> 'int' 227
| | `-FullComment 0x5555d4c1e980 <line:2324:6, col:63>
| |   `-ParagraphComment 0x5555d4c1e950 <col:6, col:63>
| |     `-TextComment 0x5555d4c1e920 <col:6, col:63> Text=" Windows Structured Exception Handling's except statement."
| |-EnumConstantDecl 0x5555d4b95cc8 <line:2330:3, col:29> col:3 CXCursor_SEHFinallyStmt 'int'
| | |-ConstantExpr 0x5555d4b95ca8 <col:29> 'int'
| | | |-value: Int 228
| | | `-IntegerLiteral 0x5555d4b95c88 <col:29> 'int' 228
| | `-FullComment 0x5555d4c1ea50 <line:2328:6, col:64>
| |   `-ParagraphComment 0x5555d4c1ea20 <col:6, col:64>
| |     `-TextComment 0x5555d4c1e9f0 <col:6, col:64> Text=" Windows Structured Exception Handling's finally statement."
| |-EnumConstantDecl 0x5555d4b95d88 <line:2334:3, col:24> col:3 CXCursor_MSAsmStmt 'int'
| | |-ConstantExpr 0x5555d4b95d68 <col:24> 'int'
| | | |-value: Int 229
| | | `-IntegerLiteral 0x5555d4b95d48 <col:24> 'int' 229
| | `-FullComment 0x5555d4c1eb20 <line:2332:6, col:47>
| |   `-ParagraphComment 0x5555d4c1eaf0 <col:6, col:47>
| |     `-TextComment 0x5555d4c1eac0 <col:6, col:47> Text=" A MS inline assembly statement extension."
| |-EnumConstantDecl 0x5555d4b95e48 <line:2340:3, col:23> col:3 CXCursor_NullStmt 'int'
| | |-ConstantExpr 0x5555d4b95e28 <col:23> 'int'
| | | |-value: Int 230
| | | `-IntegerLiteral 0x5555d4b95e08 <col:23> 'int' 230
| | `-FullComment 0x5555d4c1ec40 <line:2336:6, line:2338:61>
| |   |-ParagraphComment 0x5555d4c1ebc0 <line:2336:6, col:42>
| |   | `-TextComment 0x5555d4c1eb90 <col:6, col:42> Text=" The null statement ";": C99 6.8.3p3."
| |   `-ParagraphComment 0x5555d4c1ec10 <line:2338:5, col:61>
| |     `-TextComment 0x5555d4c1ebe0 <col:5, col:61> Text=" This cursor kind is used to describe the null statement."
| |-EnumConstantDecl 0x5555d4b95f08 <line:2345:3, col:23> col:3 CXCursor_DeclStmt 'int'
| | |-ConstantExpr 0x5555d4b95ee8 <col:23> 'int'
| | | |-value: Int 231
| | | `-IntegerLiteral 0x5555d4b95ec8 <col:23> 'int' 231
| | `-FullComment 0x5555d4c1ed30 <line:2342:6, line:2343:17>
| |   `-ParagraphComment 0x5555d4c1ed00 <line:2342:6, line:2343:17>
| |     |-TextComment 0x5555d4c1ecb0 <line:2342:6, col:63> Text=" Adaptor class for mixing declarations with statements and"
| |     `-TextComment 0x5555d4c1ecd0 <line:2343:5, col:17> Text=" expressions."
| |-EnumConstantDecl 0x5555d4b95fc8 <line:2349:3, col:35> col:3 CXCursor_OMPParallelDirective 'int'
| | |-ConstantExpr 0x5555d4b95fa8 <col:35> 'int'
| | | |-value: Int 232
| | | `-IntegerLiteral 0x5555d4b95f88 <col:35> 'int' 232
| | `-FullComment 0x5555d4c1ee00 <line:2347:6, col:32>
| |   `-ParagraphComment 0x5555d4c1edd0 <col:6, col:32>
| |     `-TextComment 0x5555d4c1eda0 <col:6, col:32> Text=" OpenMP parallel directive."
| |-EnumConstantDecl 0x5555d4b96088 <line:2353:3, col:31> col:3 CXCursor_OMPSimdDirective 'int'
| | |-ConstantExpr 0x5555d4b96068 <col:31> 'int'
| | | |-value: Int 233
| | | `-IntegerLiteral 0x5555d4b96048 <col:31> 'int' 233
| | `-FullComment 0x5555d4c1eed0 <line:2351:6, col:28>
| |   `-ParagraphComment 0x5555d4c1eea0 <col:6, col:28>
| |     `-TextComment 0x5555d4c1ee70 <col:6, col:28> Text=" OpenMP SIMD directive."
| |-EnumConstantDecl 0x5555d4b89d48 <line:2357:3, col:30> col:3 CXCursor_OMPForDirective 'int'
| | |-ConstantExpr 0x5555d4b89d28 <col:30> 'int'
| | | |-value: Int 234
| | | `-IntegerLiteral 0x5555d4b89d08 <col:30> 'int' 234
| | `-FullComment 0x5555d4c1efa0 <line:2355:6, col:27>
| |   `-ParagraphComment 0x5555d4c1ef70 <col:6, col:27>
| |     `-TextComment 0x5555d4c1ef40 <col:6, col:27> Text=" OpenMP for directive."
| |-EnumConstantDecl 0x5555d4b89e08 <line:2361:3, col:35> col:3 CXCursor_OMPSectionsDirective 'int'
| | |-ConstantExpr 0x5555d4b89de8 <col:35> 'int'
| | | |-value: Int 235
| | | `-IntegerLiteral 0x5555d4b89dc8 <col:35> 'int' 235
| | `-FullComment 0x5555d4c1f070 <line:2359:6, col:32>
| |   `-ParagraphComment 0x5555d4c1f040 <col:6, col:32>
| |     `-TextComment 0x5555d4c1f010 <col:6, col:32> Text=" OpenMP sections directive."
| |-EnumConstantDecl 0x5555d4b89ec8 <line:2365:3, col:34> col:3 CXCursor_OMPSectionDirective 'int'
| | |-ConstantExpr 0x5555d4b89ea8 <col:34> 'int'
| | | |-value: Int 236
| | | `-IntegerLiteral 0x5555d4b89e88 <col:34> 'int' 236
| | `-FullComment 0x5555d4c1f140 <line:2363:6, col:31>
| |   `-ParagraphComment 0x5555d4c1f110 <col:6, col:31>
| |     `-TextComment 0x5555d4c1f0e0 <col:6, col:31> Text=" OpenMP section directive."
| |-EnumConstantDecl 0x5555d4b89f88 <line:2369:3, col:33> col:3 CXCursor_OMPSingleDirective 'int'
| | |-ConstantExpr 0x5555d4b89f68 <col:33> 'int'
| | | |-value: Int 237
| | | `-IntegerLiteral 0x5555d4b89f48 <col:33> 'int' 237
| | `-FullComment 0x5555d4c1f210 <line:2367:6, col:30>
| |   `-ParagraphComment 0x5555d4c1f1e0 <col:6, col:30>
| |     `-TextComment 0x5555d4c1f1b0 <col:6, col:30> Text=" OpenMP single directive."
| |-EnumConstantDecl 0x5555d4b8a048 <line:2373:3, col:38> col:3 CXCursor_OMPParallelForDirective 'int'
| | |-ConstantExpr 0x5555d4b8a028 <col:38> 'int'
| | | |-value: Int 238
| | | `-IntegerLiteral 0x5555d4b8a008 <col:38> 'int' 238
| | `-FullComment 0x5555d4c1f2e0 <line:2371:6, col:36>
| |   `-ParagraphComment 0x5555d4c1f2b0 <col:6, col:36>
| |     `-TextComment 0x5555d4c1f280 <col:6, col:36> Text=" OpenMP parallel for directive."
| |-EnumConstantDecl 0x5555d4b8a108 <line:2377:3, col:43> col:3 CXCursor_OMPParallelSectionsDirective 'int'
| | |-ConstantExpr 0x5555d4b8a0e8 <col:43> 'int'
| | | |-value: Int 239
| | | `-IntegerLiteral 0x5555d4b8a0c8 <col:43> 'int' 239
| | `-FullComment 0x5555d4c1f3b0 <line:2375:6, col:41>
| |   `-ParagraphComment 0x5555d4c1f380 <col:6, col:41>
| |     `-TextComment 0x5555d4c1f350 <col:6, col:41> Text=" OpenMP parallel sections directive."
| |-EnumConstantDecl 0x5555d4b8a1c8 <line:2381:3, col:31> col:3 CXCursor_OMPTaskDirective 'int'
| | |-ConstantExpr 0x5555d4b8a1a8 <col:31> 'int'
| | | |-value: Int 240
| | | `-IntegerLiteral 0x5555d4b8a188 <col:31> 'int' 240
| | `-FullComment 0x5555d4c1f480 <line:2379:6, col:28>
| |   `-ParagraphComment 0x5555d4c1f450 <col:6, col:28>
| |     `-TextComment 0x5555d4c1f420 <col:6, col:28> Text=" OpenMP task directive."
| |-EnumConstantDecl 0x5555d4b8a288 <line:2385:3, col:33> col:3 CXCursor_OMPMasterDirective 'int'
| | |-ConstantExpr 0x5555d4b8a268 <col:33> 'int'
| | | |-value: Int 241
| | | `-IntegerLiteral 0x5555d4b8a248 <col:33> 'int' 241
| | `-FullComment 0x5555d4c1f550 <line:2383:6, col:30>
| |   `-ParagraphComment 0x5555d4c1f520 <col:6, col:30>
| |     `-TextComment 0x5555d4c1f4f0 <col:6, col:30> Text=" OpenMP master directive."
| |-EnumConstantDecl 0x5555d4b8a348 <line:2389:3, col:35> col:3 CXCursor_OMPCriticalDirective 'int'
| | |-ConstantExpr 0x5555d4b8a328 <col:35> 'int'
| | | |-value: Int 242
| | | `-IntegerLiteral 0x5555d4b8a308 <col:35> 'int' 242
| | `-FullComment 0x5555d4c1f620 <line:2387:6, col:32>
| |   `-ParagraphComment 0x5555d4c1f5f0 <col:6, col:32>
| |     `-TextComment 0x5555d4c1f5c0 <col:6, col:32> Text=" OpenMP critical directive."
| |-EnumConstantDecl 0x5555d4b8a408 <line:2393:3, col:36> col:3 CXCursor_OMPTaskyieldDirective 'int'
| | |-ConstantExpr 0x5555d4b8a3e8 <col:36> 'int'
| | | |-value: Int 243
| | | `-IntegerLiteral 0x5555d4b8a3c8 <col:36> 'int' 243
| | `-FullComment 0x5555d4c1f6f0 <line:2391:6, col:33>
| |   `-ParagraphComment 0x5555d4c1f6c0 <col:6, col:33>
| |     `-TextComment 0x5555d4c1f690 <col:6, col:33> Text=" OpenMP taskyield directive."
| |-EnumConstantDecl 0x5555d4b8a4c8 <line:2397:3, col:34> col:3 CXCursor_OMPBarrierDirective 'int'
| | |-ConstantExpr 0x5555d4b8a4a8 <col:34> 'int'
| | | |-value: Int 244
| | | `-IntegerLiteral 0x5555d4b8a488 <col:34> 'int' 244
| | `-FullComment 0x5555d4c1f7c0 <line:2395:6, col:31>
| |   `-ParagraphComment 0x5555d4c1f790 <col:6, col:31>
| |     `-TextComment 0x5555d4c1f760 <col:6, col:31> Text=" OpenMP barrier directive."
| |-EnumConstantDecl 0x5555d4b8a588 <line:2401:3, col:35> col:3 CXCursor_OMPTaskwaitDirective 'int'
| | |-ConstantExpr 0x5555d4b8a568 <col:35> 'int'
| | | |-value: Int 245
| | | `-IntegerLiteral 0x5555d4b8a548 <col:35> 'int' 245
| | `-FullComment 0x5555d4c1f890 <line:2399:6, col:32>
| |   `-ParagraphComment 0x5555d4c1f860 <col:6, col:32>
| |     `-TextComment 0x5555d4c1f830 <col:6, col:32> Text=" OpenMP taskwait directive."
| |-EnumConstantDecl 0x5555d4b8a648 <line:2405:3, col:32> col:3 CXCursor_OMPFlushDirective 'int'
| | |-ConstantExpr 0x5555d4b8a628 <col:32> 'int'
| | | |-value: Int 246
| | | `-IntegerLiteral 0x5555d4b8a608 <col:32> 'int' 246
| | `-FullComment 0x5555d4c1f960 <line:2403:6, col:29>
| |   `-ParagraphComment 0x5555d4c1f930 <col:6, col:29>
| |     `-TextComment 0x5555d4c1f900 <col:6, col:29> Text=" OpenMP flush directive."
| |-EnumConstantDecl 0x5555d4b8a708 <line:2409:3, col:27> col:3 CXCursor_SEHLeaveStmt 'int'
| | |-ConstantExpr 0x5555d4b8a6e8 <col:27> 'int'
| | | |-value: Int 247
| | | `-IntegerLiteral 0x5555d4b8a6c8 <col:27> 'int' 247
| | `-FullComment 0x5555d4c1fa30 <line:2407:6, col:62>
| |   `-ParagraphComment 0x5555d4c1fa00 <col:6, col:62>
| |     `-TextComment 0x5555d4c1f9d0 <col:6, col:62> Text=" Windows Structured Exception Handling's leave statement."
| |-EnumConstantDecl 0x5555d4b8a7c8 <line:2413:3, col:34> col:3 CXCursor_OMPOrderedDirective 'int'
| | |-ConstantExpr 0x5555d4b8a7a8 <col:34> 'int'
| | | |-value: Int 248
| | | `-IntegerLiteral 0x5555d4b8a788 <col:34> 'int' 248
| | `-FullComment 0x5555d4c1fb00 <line:2411:6, col:31>
| |   `-ParagraphComment 0x5555d4c1fad0 <col:6, col:31>
| |     `-TextComment 0x5555d4c1faa0 <col:6, col:31> Text=" OpenMP ordered directive."
| |-EnumConstantDecl 0x5555d4b8a888 <line:2417:3, col:33> col:3 CXCursor_OMPAtomicDirective 'int'
| | |-ConstantExpr 0x5555d4b8a868 <col:33> 'int'
| | | |-value: Int 249
| | | `-IntegerLiteral 0x5555d4b8a848 <col:33> 'int' 249
| | `-FullComment 0x5555d4c1fbd0 <line:2415:6, col:30>
| |   `-ParagraphComment 0x5555d4c1fba0 <col:6, col:30>
| |     `-TextComment 0x5555d4c1fb70 <col:6, col:30> Text=" OpenMP atomic directive."
| |-EnumConstantDecl 0x5555d4b8a948 <line:2421:3, col:34> col:3 CXCursor_OMPForSimdDirective 'int'
| | |-ConstantExpr 0x5555d4b8a928 <col:34> 'int'
| | | |-value: Int 250
| | | `-IntegerLiteral 0x5555d4b8a908 <col:34> 'int' 250
| | `-FullComment 0x5555d4c1fca0 <line:2419:6, col:32>
| |   `-ParagraphComment 0x5555d4c1fc70 <col:6, col:32>
| |     `-TextComment 0x5555d4c1fc40 <col:6, col:32> Text=" OpenMP for SIMD directive."
| |-EnumConstantDecl 0x5555d4b8aa08 <line:2425:3, col:42> col:3 CXCursor_OMPParallelForSimdDirective 'int'
| | |-ConstantExpr 0x5555d4b8a9e8 <col:42> 'int'
| | | |-value: Int 251
| | | `-IntegerLiteral 0x5555d4b8a9c8 <col:42> 'int' 251
| | `-FullComment 0x5555d4c1fda0 <line:2423:6, col:41>
| |   `-ParagraphComment 0x5555d4c1fd70 <col:6, col:41>
| |     `-TextComment 0x5555d4c1fd40 <col:6, col:41> Text=" OpenMP parallel for SIMD directive."
| |-EnumConstantDecl 0x5555d4b8aac8 <line:2429:3, col:33> col:3 CXCursor_OMPTargetDirective 'int'
| | |-ConstantExpr 0x5555d4b8aaa8 <col:33> 'int'
| | | |-value: Int 252
| | | `-IntegerLiteral 0x5555d4b8aa88 <col:33> 'int' 252
| | `-FullComment 0x5555d4c1fe70 <line:2427:6, col:30>
| |   `-ParagraphComment 0x5555d4c1fe40 <col:6, col:30>
| |     `-TextComment 0x5555d4c1fe10 <col:6, col:30> Text=" OpenMP target directive."
| |-EnumConstantDecl 0x5555d4b8ab88 <line:2433:3, col:32> col:3 CXCursor_OMPTeamsDirective 'int'
| | |-ConstantExpr 0x5555d4b8ab68 <col:32> 'int'
| | | |-value: Int 253
| | | `-IntegerLiteral 0x5555d4b8ab48 <col:32> 'int' 253
| | `-FullComment 0x5555d4c1ff40 <line:2431:6, col:29>
| |   `-ParagraphComment 0x5555d4c1ff10 <col:6, col:29>
| |     `-TextComment 0x5555d4c1fee0 <col:6, col:29> Text=" OpenMP teams directive."
| |-EnumConstantDecl 0x5555d4b8ac48 <line:2437:3, col:36> col:3 CXCursor_OMPTaskgroupDirective 'int'
| | |-ConstantExpr 0x5555d4b8ac28 <col:36> 'int'
| | | |-value: Int 254
| | | `-IntegerLiteral 0x5555d4b8ac08 <col:36> 'int' 254
| | `-FullComment 0x5555d4c20010 <line:2435:6, col:33>
| |   `-ParagraphComment 0x5555d4c1ffe0 <col:6, col:33>
| |     `-TextComment 0x5555d4c1ffb0 <col:6, col:33> Text=" OpenMP taskgroup directive."
| |-EnumConstantDecl 0x5555d4b8ad30 <line:2441:3, col:44> col:3 CXCursor_OMPCancellationPointDirective 'int'
| | |-ConstantExpr 0x5555d4b8ad10 <col:44> 'int'
| | | |-value: Int 255
| | | `-IntegerLiteral 0x5555d4b8acf0 <col:44> 'int' 255
| | `-FullComment 0x5555d4c200e0 <line:2439:6, col:42>
| |   `-ParagraphComment 0x5555d4c200b0 <col:6, col:42>
| |     `-TextComment 0x5555d4c20080 <col:6, col:42> Text=" OpenMP cancellation point directive."
| |-EnumConstantDecl 0x5555d4b8ade8 <line:2445:3, col:33> col:3 CXCursor_OMPCancelDirective 'int'
| | |-ConstantExpr 0x5555d4b8adc8 <col:33> 'int'
| | | |-value: Int 256
| | | `-IntegerLiteral 0x5555d4b8ada8 <col:33> 'int' 256
| | `-FullComment 0x5555d4c201b0 <line:2443:6, col:30>
| |   `-ParagraphComment 0x5555d4c20180 <col:6, col:30>
| |     `-TextComment 0x5555d4c20150 <col:6, col:30> Text=" OpenMP cancel directive."
| |-EnumConstantDecl 0x5555d4b8aea8 <line:2449:3, col:37> col:3 CXCursor_OMPTargetDataDirective 'int'
| | |-ConstantExpr 0x5555d4b8ae88 <col:37> 'int'
| | | |-value: Int 257
| | | `-IntegerLiteral 0x5555d4b8ae68 <col:37> 'int' 257
| | `-FullComment 0x5555d4c20280 <line:2447:6, col:35>
| |   `-ParagraphComment 0x5555d4c20250 <col:6, col:35>
| |     `-TextComment 0x5555d4c20220 <col:6, col:35> Text=" OpenMP target data directive."
| |-EnumConstantDecl 0x5555d4b8af68 <line:2453:3, col:35> col:3 CXCursor_OMPTaskLoopDirective 'int'
| | |-ConstantExpr 0x5555d4b8af48 <col:35> 'int'
| | | |-value: Int 258
| | | `-IntegerLiteral 0x5555d4b8af28 <col:35> 'int' 258
| | `-FullComment 0x5555d4c20350 <line:2451:6, col:32>
| |   `-ParagraphComment 0x5555d4c20320 <col:6, col:32>
| |     `-TextComment 0x5555d4c202f0 <col:6, col:32> Text=" OpenMP taskloop directive."
| |-EnumConstantDecl 0x5555d4b8b028 <line:2457:3, col:39> col:3 CXCursor_OMPTaskLoopSimdDirective 'int'
| | |-ConstantExpr 0x5555d4b8b008 <col:39> 'int'
| | | |-value: Int 259
| | | `-IntegerLiteral 0x5555d4b8afe8 <col:39> 'int' 259
| | `-FullComment 0x5555d4c20420 <line:2455:6, col:37>
| |   `-ParagraphComment 0x5555d4c203f0 <col:6, col:37>
| |     `-TextComment 0x5555d4c203c0 <col:6, col:37> Text=" OpenMP taskloop simd directive."
| |-EnumConstantDecl 0x5555d4b8b0e8 <line:2461:3, col:37> col:3 CXCursor_OMPDistributeDirective 'int'
| | |-ConstantExpr 0x5555d4b8b0c8 <col:37> 'int'
| | | |-value: Int 260
| | | `-IntegerLiteral 0x5555d4b8b0a8 <col:37> 'int' 260
| | `-FullComment 0x5555d4c204f0 <line:2459:6, col:34>
| |   `-ParagraphComment 0x5555d4c204c0 <col:6, col:34>
| |     `-TextComment 0x5555d4c20490 <col:6, col:34> Text=" OpenMP distribute directive."
| |-EnumConstantDecl 0x5555d4b8b1a8 <line:2465:3, col:42> col:3 CXCursor_OMPTargetEnterDataDirective 'int'
| | |-ConstantExpr 0x5555d4b8b188 <col:42> 'int'
| | | |-value: Int 261
| | | `-IntegerLiteral 0x5555d4b8b168 <col:42> 'int' 261
| | `-FullComment 0x5555d4c205c0 <line:2463:6, col:41>
| |   `-ParagraphComment 0x5555d4c20590 <col:6, col:41>
| |     `-TextComment 0x5555d4c20560 <col:6, col:41> Text=" OpenMP target enter data directive."
| |-EnumConstantDecl 0x5555d4b8b268 <line:2469:3, col:41> col:3 CXCursor_OMPTargetExitDataDirective 'int'
| | |-ConstantExpr 0x5555d4b8b248 <col:41> 'int'
| | | |-value: Int 262
| | | `-IntegerLiteral 0x5555d4b8b228 <col:41> 'int' 262
| | `-FullComment 0x5555d4c20690 <line:2467:6, col:40>
| |   `-ParagraphComment 0x5555d4c20660 <col:6, col:40>
| |     `-TextComment 0x5555d4c20630 <col:6, col:40> Text=" OpenMP target exit data directive."
| |-EnumConstantDecl 0x5555d4b8b328 <line:2473:3, col:41> col:3 CXCursor_OMPTargetParallelDirective 'int'
| | |-ConstantExpr 0x5555d4b8b308 <col:41> 'int'
| | | |-value: Int 263
| | | `-IntegerLiteral 0x5555d4b8b2e8 <col:41> 'int' 263
| | `-FullComment 0x5555d4c20760 <line:2471:6, col:39>
| |   `-ParagraphComment 0x5555d4c20730 <col:6, col:39>
| |     `-TextComment 0x5555d4c20700 <col:6, col:39> Text=" OpenMP target parallel directive."
| |-EnumConstantDecl 0x5555d4b8b3e8 <line:2477:3, col:44> col:3 CXCursor_OMPTargetParallelForDirective 'int'
| | |-ConstantExpr 0x5555d4b8b3c8 <col:44> 'int'
| | | |-value: Int 264
| | | `-IntegerLiteral 0x5555d4b8b3a8 <col:44> 'int' 264
| | `-FullComment 0x5555d4c20830 <line:2475:6, col:43>
| |   `-ParagraphComment 0x5555d4c20800 <col:6, col:43>
| |     `-TextComment 0x5555d4c207d0 <col:6, col:43> Text=" OpenMP target parallel for directive."
| |-EnumConstantDecl 0x5555d4b8b4a8 <line:2481:3, col:39> col:3 CXCursor_OMPTargetUpdateDirective 'int'
| | |-ConstantExpr 0x5555d4b8b488 <col:39> 'int'
| | | |-value: Int 265
| | | `-IntegerLiteral 0x5555d4b8b468 <col:39> 'int' 265
| | `-FullComment 0x5555d4c20900 <line:2479:6, col:37>
| |   `-ParagraphComment 0x5555d4c208d0 <col:6, col:37>
| |     `-TextComment 0x5555d4c208a0 <col:6, col:37> Text=" OpenMP target update directive."
| |-EnumConstantDecl 0x5555d4b8b568 <line:2485:3, col:48> col:3 CXCursor_OMPDistributeParallelForDirective 'int'
| | |-ConstantExpr 0x5555d4b8b548 <col:48> 'int'
| | | |-value: Int 266
| | | `-IntegerLiteral 0x5555d4b8b528 <col:48> 'int' 266
| | `-FullComment 0x5555d4c209d0 <line:2483:6, col:47>
| |   `-ParagraphComment 0x5555d4c209a0 <col:6, col:47>
| |     `-TextComment 0x5555d4c20970 <col:6, col:47> Text=" OpenMP distribute parallel for directive."
| |-EnumConstantDecl 0x5555d4b8b628 <line:2489:3, col:52> col:3 CXCursor_OMPDistributeParallelForSimdDirective 'int'
| | |-ConstantExpr 0x5555d4b8b608 <col:52> 'int'
| | | |-value: Int 267
| | | `-IntegerLiteral 0x5555d4b8b5e8 <col:52> 'int' 267
| | `-FullComment 0x5555d4c20aa0 <line:2487:6, col:52>
| |   `-ParagraphComment 0x5555d4c20a70 <col:6, col:52>
| |     `-TextComment 0x5555d4c20a40 <col:6, col:52> Text=" OpenMP distribute parallel for simd directive."
| |-EnumConstantDecl 0x5555d4b8b6e8 <line:2493:3, col:41> col:3 CXCursor_OMPDistributeSimdDirective 'int'
| | |-ConstantExpr 0x5555d4b8b6c8 <col:41> 'int'
| | | |-value: Int 268
| | | `-IntegerLiteral 0x5555d4b8b6a8 <col:41> 'int' 268
| | `-FullComment 0x5555d4c20b70 <line:2491:6, col:39>
| |   `-ParagraphComment 0x5555d4c20b40 <col:6, col:39>
| |     `-TextComment 0x5555d4c20b10 <col:6, col:39> Text=" OpenMP distribute simd directive."
| |-EnumConstantDecl 0x5555d4b8b7a8 <line:2497:3, col:48> col:3 CXCursor_OMPTargetParallelForSimdDirective 'int'
| | |-ConstantExpr 0x5555d4b8b788 <col:48> 'int'
| | | |-value: Int 269
| | | `-IntegerLiteral 0x5555d4b8b768 <col:48> 'int' 269
| | `-FullComment 0x5555d4c20c40 <line:2495:6, col:48>
| |   `-ParagraphComment 0x5555d4c20c10 <col:6, col:48>
| |     `-TextComment 0x5555d4c20be0 <col:6, col:48> Text=" OpenMP target parallel for simd directive."
| |-EnumConstantDecl 0x5555d4b8b868 <line:2501:3, col:37> col:3 CXCursor_OMPTargetSimdDirective 'int'
| | |-ConstantExpr 0x5555d4b8b848 <col:37> 'int'
| | | |-value: Int 270
| | | `-IntegerLiteral 0x5555d4b8b828 <col:37> 'int' 270
| | `-FullComment 0x5555d4c20d10 <line:2499:6, col:35>
| |   `-ParagraphComment 0x5555d4c20ce0 <col:6, col:35>
| |     `-TextComment 0x5555d4c20cb0 <col:6, col:35> Text=" OpenMP target simd directive."
| |-EnumConstantDecl 0x5555d4b8b928 <line:2505:3, col:42> col:3 CXCursor_OMPTeamsDistributeDirective 'int'
| | |-ConstantExpr 0x5555d4b8b908 <col:42> 'int'
| | | |-value: Int 271
| | | `-IntegerLiteral 0x5555d4b8b8e8 <col:42> 'int' 271
| | `-FullComment 0x5555d4c20de0 <line:2503:6, col:40>
| |   `-ParagraphComment 0x5555d4c20db0 <col:6, col:40>
| |     `-TextComment 0x5555d4c20d80 <col:6, col:40> Text=" OpenMP teams distribute directive."
| |-EnumConstantDecl 0x5555d4b8b9e8 <line:2509:3, col:46> col:3 CXCursor_OMPTeamsDistributeSimdDirective 'int'
| | |-ConstantExpr 0x5555d4b8b9c8 <col:46> 'int'
| | | |-value: Int 272
| | | `-IntegerLiteral 0x5555d4b8b9a8 <col:46> 'int' 272
| | `-FullComment 0x5555d4c20eb0 <line:2507:6, col:45>
| |   `-ParagraphComment 0x5555d4c20e80 <col:6, col:45>
| |     `-TextComment 0x5555d4c20e50 <col:6, col:45> Text=" OpenMP teams distribute simd directive."
| |-EnumConstantDecl 0x5555d4b8baa8 <line:2513:3, col:57> col:3 CXCursor_OMPTeamsDistributeParallelForSimdDirective 'int'
| | |-ConstantExpr 0x5555d4b8ba88 <col:57> 'int'
| | | |-value: Int 273
| | | `-IntegerLiteral 0x5555d4b8ba68 <col:57> 'int' 273
| | `-FullComment 0x5555d4c20f80 <line:2511:6, col:58>
| |   `-ParagraphComment 0x5555d4c20f50 <col:6, col:58>
| |     `-TextComment 0x5555d4c20f20 <col:6, col:58> Text=" OpenMP teams distribute parallel for simd directive."
| |-EnumConstantDecl 0x5555d4b8bb68 <line:2517:3, col:53> col:3 CXCursor_OMPTeamsDistributeParallelForDirective 'int'
| | |-ConstantExpr 0x5555d4b8bb48 <col:53> 'int'
| | | |-value: Int 274
| | | `-IntegerLiteral 0x5555d4b8bb28 <col:53> 'int' 274
| | `-FullComment 0x5555d4c21050 <line:2515:6, col:53>
| |   `-ParagraphComment 0x5555d4c21020 <col:6, col:53>
| |     `-TextComment 0x5555d4c20ff0 <col:6, col:53> Text=" OpenMP teams distribute parallel for directive."
| |-EnumConstantDecl 0x5555d4b8bc28 <line:2521:3, col:38> col:3 CXCursor_OMPTargetTeamsDirective 'int'
| | |-ConstantExpr 0x5555d4b8bc08 <col:38> 'int'
| | | |-value: Int 275
| | | `-IntegerLiteral 0x5555d4b8bbe8 <col:38> 'int' 275
| | `-FullComment 0x5555d4c21120 <line:2519:6, col:36>
| |   `-ParagraphComment 0x5555d4c210f0 <col:6, col:36>
| |     `-TextComment 0x5555d4c210c0 <col:6, col:36> Text=" OpenMP target teams directive."
| |-EnumConstantDecl 0x5555d4b8d190 <line:2525:3, col:48> col:3 CXCursor_OMPTargetTeamsDistributeDirective 'int'
| | |-ConstantExpr 0x5555d4b8bcc8 <col:48> 'int'
| | | |-value: Int 276
| | | `-IntegerLiteral 0x5555d4b8bca8 <col:48> 'int' 276
| | `-FullComment 0x5555d4c211f0 <line:2523:6, col:47>
| |   `-ParagraphComment 0x5555d4c211c0 <col:6, col:47>
| |     `-TextComment 0x5555d4c21190 <col:6, col:47> Text=" OpenMP target teams distribute directive."
| |-EnumConstantDecl 0x5555d4b8d248 <line:2529:3, col:59> col:3 CXCursor_OMPTargetTeamsDistributeParallelForDirective 'int'
| | |-ConstantExpr 0x5555d4b8d228 <col:59> 'int'
| | | |-value: Int 277
| | | `-IntegerLiteral 0x5555d4b8d208 <col:59> 'int' 277
| | `-FullComment 0x5555d4c212c0 <line:2527:6, col:60>
| |   `-ParagraphComment 0x5555d4c21290 <col:6, col:60>
| |     `-TextComment 0x5555d4c21260 <col:6, col:60> Text=" OpenMP target teams distribute parallel for directive."
| |-EnumConstantDecl 0x5555d4b8d308 <line:2533:3, col:63> col:3 CXCursor_OMPTargetTeamsDistributeParallelForSimdDirective 'int'
| | |-ConstantExpr 0x5555d4b8d2e8 <col:63> 'int'
| | | |-value: Int 278
| | | `-IntegerLiteral 0x5555d4b8d2c8 <col:63> 'int' 278
| | `-FullComment 0x5555d4c21390 <line:2531:6, col:65>
| |   `-ParagraphComment 0x5555d4c21360 <col:6, col:65>
| |     `-TextComment 0x5555d4c21330 <col:6, col:65> Text=" OpenMP target teams distribute parallel for simd directive."
| |-EnumConstantDecl 0x5555d4b8d3c8 <line:2537:3, col:52> col:3 CXCursor_OMPTargetTeamsDistributeSimdDirective 'int'
| | |-ConstantExpr 0x5555d4b8d3a8 <col:52> 'int'
| | | |-value: Int 279
| | | `-IntegerLiteral 0x5555d4b8d388 <col:52> 'int' 279
| | `-FullComment 0x5555d4c21460 <line:2535:6, col:52>
| |   `-ParagraphComment 0x5555d4c21430 <col:6, col:52>
| |     `-TextComment 0x5555d4c21400 <col:6, col:52> Text=" OpenMP target teams distribute simd directive."
| |-EnumConstantDecl 0x5555d4b8d488 <line:2541:3, col:33> col:3 CXCursor_BuiltinBitCastExpr 'int'
| | |-ConstantExpr 0x5555d4b8d468 <col:33> 'int'
| | | |-value: Int 280
| | | `-IntegerLiteral 0x5555d4b8d448 <col:33> 'int' 280
| | `-FullComment 0x5555d4c21530 <line:2539:6, col:37>
| |   `-ParagraphComment 0x5555d4c21500 <col:6, col:37>
| |     `-TextComment 0x5555d4c214d0 <col:6, col:37> Text=" C++2a std::bit_cast expression."
| |-EnumConstantDecl 0x5555d4b8d548 <line:2545:3, col:41> col:3 CXCursor_OMPMasterTaskLoopDirective 'int'
| | |-ConstantExpr 0x5555d4b8d528 <col:41> 'int'
| | | |-value: Int 281
| | | `-IntegerLiteral 0x5555d4b8d508 <col:41> 'int' 281
| | `-FullComment 0x5555d4c21600 <line:2543:6, col:39>
| |   `-ParagraphComment 0x5555d4c215d0 <col:6, col:39>
| |     `-TextComment 0x5555d4c215a0 <col:6, col:39> Text=" OpenMP master taskloop directive."
| |-EnumConstantDecl 0x5555d4b8d608 <line:2549:3, col:49> col:3 CXCursor_OMPParallelMasterTaskLoopDirective 'int'
| | |-ConstantExpr 0x5555d4b8d5e8 <col:49> 'int'
| | | |-value: Int 282
| | | `-IntegerLiteral 0x5555d4b8d5c8 <col:49> 'int' 282
| | `-FullComment 0x5555d4c216d0 <line:2547:6, col:48>
| |   `-ParagraphComment 0x5555d4c216a0 <col:6, col:48>
| |     `-TextComment 0x5555d4c21670 <col:6, col:48> Text=" OpenMP parallel master taskloop directive."
| |-EnumConstantDecl 0x5555d4b8d6c8 <line:2553:3, col:45> col:3 CXCursor_OMPMasterTaskLoopSimdDirective 'int'
| | |-ConstantExpr 0x5555d4b8d6a8 <col:45> 'int'
| | | |-value: Int 283
| | | `-IntegerLiteral 0x5555d4b8d688 <col:45> 'int' 283
| | `-FullComment 0x5555d4c217a0 <line:2551:6, col:44>
| |   `-ParagraphComment 0x5555d4c21770 <col:6, col:44>
| |     `-TextComment 0x5555d4c21740 <col:6, col:44> Text=" OpenMP master taskloop simd directive."
| |-EnumConstantDecl 0x5555d4b8d788 <line:2557:3, col:53> col:3 CXCursor_OMPParallelMasterTaskLoopSimdDirective 'int'
| | |-ConstantExpr 0x5555d4b8d768 <col:53> 'int'
| | | |-value: Int 284
| | | `-IntegerLiteral 0x5555d4b8d748 <col:53> 'int' 284
| | `-FullComment 0x5555d4c21870 <line:2555:6, col:53>
| |   `-ParagraphComment 0x5555d4c21840 <col:6, col:53>
| |     `-TextComment 0x5555d4c21810 <col:6, col:53> Text=" OpenMP parallel master taskloop simd directive."
| |-EnumConstantDecl 0x5555d4b8d848 <line:2561:3, col:41> col:3 CXCursor_OMPParallelMasterDirective 'int'
| | |-ConstantExpr 0x5555d4b8d828 <col:41> 'int'
| | | |-value: Int 285
| | | `-IntegerLiteral 0x5555d4b8d808 <col:41> 'int' 285
| | `-FullComment 0x5555d4c21940 <line:2559:6, col:39>
| |   `-ParagraphComment 0x5555d4c21910 <col:6, col:39>
| |     `-TextComment 0x5555d4c218e0 <col:6, col:39> Text=" OpenMP parallel master directive."
| |-EnumConstantDecl 0x5555d4b8d908 <line:2565:3, col:33> col:3 CXCursor_OMPDepobjDirective 'int'
| | |-ConstantExpr 0x5555d4b8d8e8 <col:33> 'int'
| | | |-value: Int 286
| | | `-IntegerLiteral 0x5555d4b8d8c8 <col:33> 'int' 286
| | `-FullComment 0x5555d4c21a10 <line:2563:6, col:30>
| |   `-ParagraphComment 0x5555d4c219e0 <col:6, col:30>
| |     `-TextComment 0x5555d4c219b0 <col:6, col:30> Text=" OpenMP depobj directive."
| |-EnumConstantDecl 0x5555d4b8d9c8 <line:2569:3, col:31> col:3 CXCursor_OMPScanDirective 'int'
| | |-ConstantExpr 0x5555d4b8d9a8 <col:31> 'int'
| | | |-value: Int 287
| | | `-IntegerLiteral 0x5555d4b8d988 <col:31> 'int' 287
| | `-FullComment 0x5555d4c21ae0 <line:2567:6, col:28>
| |   `-ParagraphComment 0x5555d4c21ab0 <col:6, col:28>
| |     `-TextComment 0x5555d4c21a80 <col:6, col:28> Text=" OpenMP scan directive."
| |-EnumConstantDecl 0x5555d4b8da88 <line:2573:3, col:31> col:3 CXCursor_OMPTileDirective 'int'
| | |-ConstantExpr 0x5555d4b8da68 <col:31> 'int'
| | | |-value: Int 288
| | | `-IntegerLiteral 0x5555d4b8da48 <col:31> 'int' 288
| | `-FullComment 0x5555d4c21bb0 <line:2571:6, col:28>
| |   `-ParagraphComment 0x5555d4c21b80 <col:6, col:28>
| |     `-TextComment 0x5555d4c21b50 <col:6, col:28> Text=" OpenMP tile directive."
| |-EnumConstantDecl 0x5555d4b8db48 <line:2577:3, col:31> col:3 CXCursor_OMPCanonicalLoop 'int'
| | |-ConstantExpr 0x5555d4b8db28 <col:31> 'int'
| | | |-value: Int 289
| | | `-IntegerLiteral 0x5555d4b8db08 <col:31> 'int' 289
| | `-FullComment 0x5555d4c21c80 <line:2575:6, col:28>
| |   `-ParagraphComment 0x5555d4c21c50 <col:6, col:28>
| |     `-TextComment 0x5555d4c21c20 <col:6, col:28> Text=" OpenMP canonical loop."
| |-EnumConstantDecl 0x5555d4b8dc08 <line:2581:3, col:34> col:3 CXCursor_OMPInteropDirective 'int'
| | |-ConstantExpr 0x5555d4b8dbe8 <col:34> 'int'
| | | |-value: Int 290
| | | `-IntegerLiteral 0x5555d4b8dbc8 <col:34> 'int' 290
| | `-FullComment 0x5555d4c21d70 <line:2579:6, col:31>
| |   `-ParagraphComment 0x5555d4c21d40 <col:6, col:31>
| |     `-TextComment 0x5555d4c21d10 <col:6, col:31> Text=" OpenMP interop directive."
| |-EnumConstantDecl 0x5555d4b8dcc8 <line:2585:3, col:35> col:3 CXCursor_OMPDispatchDirective 'int'
| | |-ConstantExpr 0x5555d4b8dca8 <col:35> 'int'
| | | |-value: Int 291
| | | `-IntegerLiteral 0x5555d4b8dc88 <col:35> 'int' 291
| | `-FullComment 0x5555d4c21e40 <line:2583:6, col:32>
| |   `-ParagraphComment 0x5555d4c21e10 <col:6, col:32>
| |     `-TextComment 0x5555d4c21de0 <col:6, col:32> Text=" OpenMP dispatch directive."
| |-EnumConstantDecl 0x5555d4b8dd88 <line:2589:3, col:33> col:3 CXCursor_OMPMaskedDirective 'int'
| | |-ConstantExpr 0x5555d4b8dd68 <col:33> 'int'
| | | |-value: Int 292
| | | `-IntegerLiteral 0x5555d4b8dd48 <col:33> 'int' 292
| | `-FullComment 0x5555d4c21f10 <line:2587:6, col:30>
| |   `-ParagraphComment 0x5555d4c21ee0 <col:6, col:30>
| |     `-TextComment 0x5555d4c21eb0 <col:6, col:30> Text=" OpenMP masked directive."
| |-EnumConstantDecl 0x5555d4b8de48 <line:2593:3, col:33> col:3 CXCursor_OMPUnrollDirective 'int'
| | |-ConstantExpr 0x5555d4b8de28 <col:33> 'int'
| | | |-value: Int 293
| | | `-IntegerLiteral 0x5555d4b8de08 <col:33> 'int' 293
| | `-FullComment 0x5555d4c21fe0 <line:2591:6, col:30>
| |   `-ParagraphComment 0x5555d4c21fb0 <col:6, col:30>
| |     `-TextComment 0x5555d4c21f80 <col:6, col:30> Text=" OpenMP unroll directive."
| |-EnumConstantDecl 0x5555d4b8df08 <line:2597:3, col:31> col:3 CXCursor_OMPMetaDirective 'int'
| | |-ConstantExpr 0x5555d4b8dee8 <col:31> 'int'
| | | |-value: Int 294
| | | `-IntegerLiteral 0x5555d4b8dec8 <col:31> 'int' 294
| | `-FullComment 0x5555d4c220b0 <line:2595:6, col:37>
| |   `-ParagraphComment 0x5555d4c22080 <col:6, col:37>
| |     `-TextComment 0x5555d4c22050 <col:6, col:37> Text=" OpenMP metadirective directive."
| |-EnumConstantDecl 0x5555d4b8dfc8 <line:2601:3, col:38> col:3 referenced CXCursor_OMPGenericLoopDirective 'int'
| | |-ConstantExpr 0x5555d4b8dfa8 <col:38> 'int'
| | | |-value: Int 295
| | | `-IntegerLiteral 0x5555d4b8df88 <col:38> 'int' 295
| | `-FullComment 0x5555d4c22180 <line:2599:6, col:28>
| |   `-ParagraphComment 0x5555d4c22150 <col:6, col:28>
| |     `-TextComment 0x5555d4c22120 <col:6, col:28> Text=" OpenMP loop directive."
| |-EnumConstantDecl 0x5555d4b8e058 <line:2603:3, col:23> col:3 CXCursor_LastStmt 'int'
| | |-ConstantExpr 0x5555d4b8e038 <col:23> 'int'
| | | |-value: Int 295
| | | `-DeclRefExpr 0x5555d4b8e018 <col:23> 'int' EnumConstant 0x5555d4b8dfc8 'CXCursor_OMPGenericLoopDirective' 'int'
| | `-FullComment 0x5555d4c22250 <line:2599:6, col:28>
| |   `-ParagraphComment 0x5555d4c22220 <col:6, col:28>
| |     `-TextComment 0x5555d4c221f0 <col:6, col:28> Text=" OpenMP loop directive."
| |-EnumConstantDecl 0x5555d4b8e118 <line:2611:3, col:30> col:3 CXCursor_TranslationUnit 'int'
| | |-ConstantExpr 0x5555d4b8e0f8 <col:30> 'int'
| | | |-value: Int 300
| | | `-IntegerLiteral 0x5555d4b8e0d8 <col:30> 'int' 300
| | `-FullComment 0x5555d4c22390 <line:2606:5, line:2609:62>
| |   |-ParagraphComment 0x5555d4c222f0 <line:2606:5, col:56>
| |   | `-TextComment 0x5555d4c222c0 <col:5, col:56> Text=" Cursor that represents the translation unit itself."
| |   `-ParagraphComment 0x5555d4c22360 <line:2608:5, line:2609:62>
| |     |-TextComment 0x5555d4c22310 <line:2608:5, col:68> Text=" The translation unit cursor exists primarily to act as the root"
| |     `-TextComment 0x5555d4c22330 <line:2609:5, col:62> Text=" cursor for traversing the contents of a translation unit."
| |-EnumConstantDecl 0x5555d4b8e6c0 <line:2614:3, col:24> col:3 CXCursor_FirstAttr 'int'
| | |-ConstantExpr 0x5555d4b8e6a0 <col:24> 'int'
| | | |-value: Int 400
| | | `-IntegerLiteral 0x5555d4b8e168 <col:24> 'int' 400
| | `-FullComment 0x5555d4c224d0 <line:2606:5, line:2609:62>
| |   |-ParagraphComment 0x5555d4c22430 <line:2606:5, col:56>
| |   | `-TextComment 0x5555d4c22400 <col:5, col:56> Text=" Cursor that represents the translation unit itself."
| |   `-ParagraphComment 0x5555d4c224a0 <line:2608:5, line:2609:62>
| |     |-TextComment 0x5555d4c22450 <line:2608:5, col:68> Text=" The translation unit cursor exists primarily to act as the root"
| |     `-TextComment 0x5555d4c22470 <line:2609:5, col:62> Text=" cursor for traversing the contents of a translation unit."
| |-EnumConstantDecl 0x5555d4b8e778 <line:2619:3, col:28> col:3 CXCursor_UnexposedAttr 'int'
| | |-ConstantExpr 0x5555d4b8e758 <col:28> 'int'
| | | |-value: Int 400
| | | `-IntegerLiteral 0x5555d4b8e738 <col:28> 'int' 400
| | `-FullComment 0x5555d4c225c0 <line:2616:5, line:2617:15>
| |   `-ParagraphComment 0x5555d4c22590 <line:2616:5, line:2617:15>
| |     |-TextComment 0x5555d4c22540 <line:2616:5, col:61> Text=" An attribute whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c22560 <line:2617:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b8e808 <line:2621:3, col:27> col:3 CXCursor_IBActionAttr 'int'
| | |-ConstantExpr 0x5555d4b8e7e8 <col:27> 'int'
| | | |-value: Int 401
| | | `-IntegerLiteral 0x5555d4b8e7c8 <col:27> 'int' 401
| | `-FullComment 0x5555d4c226b0 <line:2616:5, line:2617:15>
| |   `-ParagraphComment 0x5555d4c22680 <line:2616:5, line:2617:15>
| |     |-TextComment 0x5555d4c22630 <line:2616:5, col:61> Text=" An attribute whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c22650 <line:2617:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b8e898 <line:2622:3, col:27> col:3 CXCursor_IBOutletAttr 'int'
| | |-ConstantExpr 0x5555d4b8e878 <col:27> 'int'
| | | |-value: Int 402
| | | `-IntegerLiteral 0x5555d4b8e858 <col:27> 'int' 402
| | `-FullComment 0x5555d4c227a0 <line:2616:5, line:2617:15>
| |   `-ParagraphComment 0x5555d4c22770 <line:2616:5, line:2617:15>
| |     |-TextComment 0x5555d4c22720 <line:2616:5, col:61> Text=" An attribute whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c22740 <line:2617:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b8e928 <line:2623:3, col:37> col:3 CXCursor_IBOutletCollectionAttr 'int'
| | |-ConstantExpr 0x5555d4b8e908 <col:37> 'int'
| | | |-value: Int 403
| | | `-IntegerLiteral 0x5555d4b8e8e8 <col:37> 'int' 403
| | `-FullComment 0x5555d4c22890 <line:2616:5, line:2617:15>
| |   `-ParagraphComment 0x5555d4c22860 <line:2616:5, line:2617:15>
| |     |-TextComment 0x5555d4c22810 <line:2616:5, col:61> Text=" An attribute whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c22830 <line:2617:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b8e9b8 <line:2624:3, col:27> col:3 CXCursor_CXXFinalAttr 'int'
| | |-ConstantExpr 0x5555d4b8e998 <col:27> 'int'
| | | |-value: Int 404
| | | `-IntegerLiteral 0x5555d4b8e978 <col:27> 'int' 404
| | `-FullComment 0x5555d4c22980 <line:2616:5, line:2617:15>
| |   `-ParagraphComment 0x5555d4c22950 <line:2616:5, line:2617:15>
| |     |-TextComment 0x5555d4c22900 <line:2616:5, col:61> Text=" An attribute whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c22920 <line:2617:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b8ea48 <line:2625:3, col:30> col:3 CXCursor_CXXOverrideAttr 'int'
| | |-ConstantExpr 0x5555d4b8ea28 <col:30> 'int'
| | | |-value: Int 405
| | | `-IntegerLiteral 0x5555d4b8ea08 <col:30> 'int' 405
| | `-FullComment 0x5555d4c22a70 <line:2616:5, line:2617:15>
| |   `-ParagraphComment 0x5555d4c22a40 <line:2616:5, line:2617:15>
| |     |-TextComment 0x5555d4c229f0 <line:2616:5, col:61> Text=" An attribute whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c22a10 <line:2617:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b8ead8 <line:2626:3, col:27> col:3 CXCursor_AnnotateAttr 'int'
| | |-ConstantExpr 0x5555d4b8eab8 <col:27> 'int'
| | | |-value: Int 406
| | | `-IntegerLiteral 0x5555d4b8ea98 <col:27> 'int' 406
| | `-FullComment 0x5555d4c22b60 <line:2616:5, line:2617:15>
| |   `-ParagraphComment 0x5555d4c22b30 <line:2616:5, line:2617:15>
| |     |-TextComment 0x5555d4c22ae0 <line:2616:5, col:61> Text=" An attribute whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c22b00 <line:2617:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b8eb68 <line:2627:3, col:27> col:3 CXCursor_AsmLabelAttr 'int'
| | |-ConstantExpr 0x5555d4b8eb48 <col:27> 'int'
| | | |-value: Int 407
| | | `-IntegerLiteral 0x5555d4b8eb28 <col:27> 'int' 407
| | `-FullComment 0x5555d4c22c50 <line:2616:5, line:2617:15>
| |   `-ParagraphComment 0x5555d4c22c20 <line:2616:5, line:2617:15>
| |     |-TextComment 0x5555d4c22bd0 <line:2616:5, col:61> Text=" An attribute whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c22bf0 <line:2617:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b8ebf8 <line:2628:3, col:25> col:3 CXCursor_PackedAttr 'int'
| | |-ConstantExpr 0x5555d4b8ebd8 <col:25> 'int'
| | | |-value: Int 408
| | | `-IntegerLiteral 0x5555d4b8ebb8 <col:25> 'int' 408
| | `-FullComment 0x5555d4c22d40 <line:2616:5, line:2617:15>
| |   `-ParagraphComment 0x5555d4c22d10 <line:2616:5, line:2617:15>
| |     |-TextComment 0x5555d4c22cc0 <line:2616:5, col:61> Text=" An attribute whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c22ce0 <line:2617:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b8ec88 <line:2629:3, col:23> col:3 CXCursor_PureAttr 'int'
| | |-ConstantExpr 0x5555d4b8ec68 <col:23> 'int'
| | | |-value: Int 409
| | | `-IntegerLiteral 0x5555d4b8ec48 <col:23> 'int' 409
| | `-FullComment 0x5555d4c22e30 <line:2616:5, line:2617:15>
| |   `-ParagraphComment 0x5555d4c22e00 <line:2616:5, line:2617:15>
| |     |-TextComment 0x5555d4c22db0 <line:2616:5, col:61> Text=" An attribute whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c22dd0 <line:2617:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b8ed18 <line:2630:3, col:24> col:3 CXCursor_ConstAttr 'int'
| | |-ConstantExpr 0x5555d4b8ecf8 <col:24> 'int'
| | | |-value: Int 410
| | | `-IntegerLiteral 0x5555d4b8ecd8 <col:24> 'int' 410
| | `-FullComment 0x5555d4c22f20 <line:2616:5, line:2617:15>
| |   `-ParagraphComment 0x5555d4c22ef0 <line:2616:5, line:2617:15>
| |     |-TextComment 0x5555d4c22ea0 <line:2616:5, col:61> Text=" An attribute whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c22ec0 <line:2617:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b8eda8 <line:2631:3, col:30> col:3 CXCursor_NoDuplicateAttr 'int'
| | |-ConstantExpr 0x5555d4b8ed88 <col:30> 'int'
| | | |-value: Int 411
| | | `-IntegerLiteral 0x5555d4b8ed68 <col:30> 'int' 411
| | `-FullComment 0x5555d4c23010 <line:2616:5, line:2617:15>
| |   `-ParagraphComment 0x5555d4c22fe0 <line:2616:5, line:2617:15>
| |     |-TextComment 0x5555d4c22f90 <line:2616:5, col:61> Text=" An attribute whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c22fb0 <line:2617:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b8ee38 <line:2632:3, col:31> col:3 CXCursor_CUDAConstantAttr 'int'
| | |-ConstantExpr 0x5555d4b8ee18 <col:31> 'int'
| | | |-value: Int 412
| | | `-IntegerLiteral 0x5555d4b8edf8 <col:31> 'int' 412
| | `-FullComment 0x5555d4c23100 <line:2616:5, line:2617:15>
| |   `-ParagraphComment 0x5555d4c230d0 <line:2616:5, line:2617:15>
| |     |-TextComment 0x5555d4c23080 <line:2616:5, col:61> Text=" An attribute whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c230a0 <line:2617:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b8eec8 <line:2633:3, col:29> col:3 CXCursor_CUDADeviceAttr 'int'
| | |-ConstantExpr 0x5555d4b8eea8 <col:29> 'int'
| | | |-value: Int 413
| | | `-IntegerLiteral 0x5555d4b8ee88 <col:29> 'int' 413
| | `-FullComment 0x5555d4c231f0 <line:2616:5, line:2617:15>
| |   `-ParagraphComment 0x5555d4c231c0 <line:2616:5, line:2617:15>
| |     |-TextComment 0x5555d4c23170 <line:2616:5, col:61> Text=" An attribute whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c23190 <line:2617:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b8ef58 <line:2634:3, col:29> col:3 CXCursor_CUDAGlobalAttr 'int'
| | |-ConstantExpr 0x5555d4b8ef38 <col:29> 'int'
| | | |-value: Int 414
| | | `-IntegerLiteral 0x5555d4b8ef18 <col:29> 'int' 414
| | `-FullComment 0x5555d4c232e0 <line:2616:5, line:2617:15>
| |   `-ParagraphComment 0x5555d4c232b0 <line:2616:5, line:2617:15>
| |     |-TextComment 0x5555d4c23260 <line:2616:5, col:61> Text=" An attribute whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c23280 <line:2617:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b8efe8 <line:2635:3, col:27> col:3 CXCursor_CUDAHostAttr 'int'
| | |-ConstantExpr 0x5555d4b8efc8 <col:27> 'int'
| | | |-value: Int 415
| | | `-IntegerLiteral 0x5555d4b8efa8 <col:27> 'int' 415
| | `-FullComment 0x5555d4c233d0 <line:2616:5, line:2617:15>
| |   `-ParagraphComment 0x5555d4c233a0 <line:2616:5, line:2617:15>
| |     |-TextComment 0x5555d4c23350 <line:2616:5, col:61> Text=" An attribute whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c23370 <line:2617:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b8f078 <line:2636:3, col:29> col:3 CXCursor_CUDASharedAttr 'int'
| | |-ConstantExpr 0x5555d4b8f058 <col:29> 'int'
| | | |-value: Int 416
| | | `-IntegerLiteral 0x5555d4b8f038 <col:29> 'int' 416
| | `-FullComment 0x5555d4c234c0 <line:2616:5, line:2617:15>
| |   `-ParagraphComment 0x5555d4c23490 <line:2616:5, line:2617:15>
| |     |-TextComment 0x5555d4c23440 <line:2616:5, col:61> Text=" An attribute whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c23460 <line:2617:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b8f108 <line:2637:3, col:29> col:3 CXCursor_VisibilityAttr 'int'
| | |-ConstantExpr 0x5555d4b8f0e8 <col:29> 'int'
| | | |-value: Int 417
| | | `-IntegerLiteral 0x5555d4b8f0c8 <col:29> 'int' 417
| | `-FullComment 0x5555d4c235b0 <line:2616:5, line:2617:15>
| |   `-ParagraphComment 0x5555d4c23580 <line:2616:5, line:2617:15>
| |     |-TextComment 0x5555d4c23530 <line:2616:5, col:61> Text=" An attribute whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c23550 <line:2617:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b8f198 <line:2638:3, col:24> col:3 CXCursor_DLLExport 'int'
| | |-ConstantExpr 0x5555d4b8f178 <col:24> 'int'
| | | |-value: Int 418
| | | `-IntegerLiteral 0x5555d4b8f158 <col:24> 'int' 418
| | `-FullComment 0x5555d4c236a0 <line:2616:5, line:2617:15>
| |   `-ParagraphComment 0x5555d4c23670 <line:2616:5, line:2617:15>
| |     |-TextComment 0x5555d4c23620 <line:2616:5, col:61> Text=" An attribute whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c23640 <line:2617:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b8f228 <line:2639:3, col:24> col:3 CXCursor_DLLImport 'int'
| | |-ConstantExpr 0x5555d4b8f208 <col:24> 'int'
| | | |-value: Int 419
| | | `-IntegerLiteral 0x5555d4b8f1e8 <col:24> 'int' 419
| | `-FullComment 0x5555d4c23790 <line:2616:5, line:2617:15>
| |   `-ParagraphComment 0x5555d4c23760 <line:2616:5, line:2617:15>
| |     |-TextComment 0x5555d4c23710 <line:2616:5, col:61> Text=" An attribute whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c23730 <line:2617:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b8f2b8 <line:2640:3, col:32> col:3 CXCursor_NSReturnsRetained 'int'
| | |-ConstantExpr 0x5555d4b8f298 <col:32> 'int'
| | | |-value: Int 420
| | | `-IntegerLiteral 0x5555d4b8f278 <col:32> 'int' 420
| | `-FullComment 0x5555d4c23880 <line:2616:5, line:2617:15>
| |   `-ParagraphComment 0x5555d4c23850 <line:2616:5, line:2617:15>
| |     |-TextComment 0x5555d4c23800 <line:2616:5, col:61> Text=" An attribute whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c23820 <line:2617:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b8f348 <line:2641:3, col:35> col:3 CXCursor_NSReturnsNotRetained 'int'
| | |-ConstantExpr 0x5555d4b8f328 <col:35> 'int'
| | | |-value: Int 421
| | | `-IntegerLiteral 0x5555d4b8f308 <col:35> 'int' 421
| | `-FullComment 0x5555d4c23970 <line:2616:5, line:2617:15>
| |   `-ParagraphComment 0x5555d4c23940 <line:2616:5, line:2617:15>
| |     |-TextComment 0x5555d4c238f0 <line:2616:5, col:61> Text=" An attribute whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c23910 <line:2617:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b8f3d8 <line:2642:3, col:36> col:3 CXCursor_NSReturnsAutoreleased 'int'
| | |-ConstantExpr 0x5555d4b8f3b8 <col:36> 'int'
| | | |-value: Int 422
| | | `-IntegerLiteral 0x5555d4b8f398 <col:36> 'int' 422
| | `-FullComment 0x5555d4c23a60 <line:2616:5, line:2617:15>
| |   `-ParagraphComment 0x5555d4c23a30 <line:2616:5, line:2617:15>
| |     |-TextComment 0x5555d4c239e0 <line:2616:5, col:61> Text=" An attribute whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c23a00 <line:2617:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b8f468 <line:2643:3, col:29> col:3 CXCursor_NSConsumesSelf 'int'
| | |-ConstantExpr 0x5555d4b8f448 <col:29> 'int'
| | | |-value: Int 423
| | | `-IntegerLiteral 0x5555d4b8f428 <col:29> 'int' 423
| | `-FullComment 0x5555d4c23b50 <line:2616:5, line:2617:15>
| |   `-ParagraphComment 0x5555d4c23b20 <line:2616:5, line:2617:15>
| |     |-TextComment 0x5555d4c23ad0 <line:2616:5, col:61> Text=" An attribute whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c23af0 <line:2617:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b8f4f8 <line:2644:3, col:25> col:3 CXCursor_NSConsumed 'int'
| | |-ConstantExpr 0x5555d4b8f4d8 <col:25> 'int'
| | | |-value: Int 424
| | | `-IntegerLiteral 0x5555d4b8f4b8 <col:25> 'int' 424
| | `-FullComment 0x5555d4c23c40 <line:2616:5, line:2617:15>
| |   `-ParagraphComment 0x5555d4c23c10 <line:2616:5, line:2617:15>
| |     |-TextComment 0x5555d4c23bc0 <line:2616:5, col:61> Text=" An attribute whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c23be0 <line:2617:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b8f588 <line:2645:3, col:28> col:3 CXCursor_ObjCException 'int'
| | |-ConstantExpr 0x5555d4b8f568 <col:28> 'int'
| | | |-value: Int 425
| | | `-IntegerLiteral 0x5555d4b8f548 <col:28> 'int' 425
| | `-FullComment 0x5555d4c13cd0 <line:2616:5, line:2617:15>
| |   `-ParagraphComment 0x5555d4c13ca0 <line:2616:5, line:2617:15>
| |     |-TextComment 0x5555d4c23cb0 <line:2616:5, col:61> Text=" An attribute whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c23cd0 <line:2617:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b8f618 <line:2646:3, col:27> col:3 CXCursor_ObjCNSObject 'int'
| | |-ConstantExpr 0x5555d4b8f5f8 <col:27> 'int'
| | | |-value: Int 426
| | | `-IntegerLiteral 0x5555d4b8f5d8 <col:27> 'int' 426
| | `-FullComment 0x5555d4c13dc0 <line:2616:5, line:2617:15>
| |   `-ParagraphComment 0x5555d4c13d90 <line:2616:5, line:2617:15>
| |     |-TextComment 0x5555d4c13d40 <line:2616:5, col:61> Text=" An attribute whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c13d60 <line:2617:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b90720 <line:2647:3, col:35> col:3 CXCursor_ObjCIndependentClass 'int'
| | |-ConstantExpr 0x5555d4b90700 <col:35> 'int'
| | | |-value: Int 427
| | | `-IntegerLiteral 0x5555d4b8f668 <col:35> 'int' 427
| | `-FullComment 0x5555d4c13eb0 <line:2616:5, line:2617:15>
| |   `-ParagraphComment 0x5555d4c13e80 <line:2616:5, line:2617:15>
| |     |-TextComment 0x5555d4c13e30 <line:2616:5, col:61> Text=" An attribute whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c13e50 <line:2617:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b907b0 <line:2648:3, col:34> col:3 CXCursor_ObjCPreciseLifetime 'int'
| | |-ConstantExpr 0x5555d4b90790 <col:34> 'int'
| | | |-value: Int 428
| | | `-IntegerLiteral 0x5555d4b90770 <col:34> 'int' 428
| | `-FullComment 0x5555d4c13fa0 <line:2616:5, line:2617:15>
| |   `-ParagraphComment 0x5555d4c13f70 <line:2616:5, line:2617:15>
| |     |-TextComment 0x5555d4c13f20 <line:2616:5, col:61> Text=" An attribute whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c13f40 <line:2617:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b90840 <line:2649:3, col:38> col:3 CXCursor_ObjCReturnsInnerPointer 'int'
| | |-ConstantExpr 0x5555d4b90820 <col:38> 'int'
| | | |-value: Int 429
| | | `-IntegerLiteral 0x5555d4b90800 <col:38> 'int' 429
| | `-FullComment 0x5555d4c14090 <line:2616:5, line:2617:15>
| |   `-ParagraphComment 0x5555d4c14060 <line:2616:5, line:2617:15>
| |     |-TextComment 0x5555d4c14010 <line:2616:5, col:61> Text=" An attribute whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c14030 <line:2617:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b908d0 <line:2650:3, col:32> col:3 CXCursor_ObjCRequiresSuper 'int'
| | |-ConstantExpr 0x5555d4b908b0 <col:32> 'int'
| | | |-value: Int 430
| | | `-IntegerLiteral 0x5555d4b90890 <col:32> 'int' 430
| | `-FullComment 0x5555d4c14180 <line:2616:5, line:2617:15>
| |   `-ParagraphComment 0x5555d4c14150 <line:2616:5, line:2617:15>
| |     |-TextComment 0x5555d4c14100 <line:2616:5, col:61> Text=" An attribute whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c14120 <line:2617:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b90960 <line:2651:3, col:28> col:3 CXCursor_ObjCRootClass 'int'
| | |-ConstantExpr 0x5555d4b90940 <col:28> 'int'
| | | |-value: Int 431
| | | `-IntegerLiteral 0x5555d4b90920 <col:28> 'int' 431
| | `-FullComment 0x5555d4c14270 <line:2616:5, line:2617:15>
| |   `-ParagraphComment 0x5555d4c14240 <line:2616:5, line:2617:15>
| |     |-TextComment 0x5555d4c141f0 <line:2616:5, col:61> Text=" An attribute whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c14210 <line:2617:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b909f0 <line:2652:3, col:40> col:3 CXCursor_ObjCSubclassingRestricted 'int'
| | |-ConstantExpr 0x5555d4b909d0 <col:40> 'int'
| | | |-value: Int 432
| | | `-IntegerLiteral 0x5555d4b909b0 <col:40> 'int' 432
| | `-FullComment 0x5555d4c14360 <line:2616:5, line:2617:15>
| |   `-ParagraphComment 0x5555d4c14330 <line:2616:5, line:2617:15>
| |     |-TextComment 0x5555d4c142e0 <line:2616:5, col:61> Text=" An attribute whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c14300 <line:2617:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b90a80 <line:2653:3, col:39> col:3 CXCursor_ObjCExplicitProtocolImpl 'int'
| | |-ConstantExpr 0x5555d4b90a60 <col:39> 'int'
| | | |-value: Int 433
| | | `-IntegerLiteral 0x5555d4b90a40 <col:39> 'int' 433
| | `-FullComment 0x5555d4c14450 <line:2616:5, line:2617:15>
| |   `-ParagraphComment 0x5555d4c14420 <line:2616:5, line:2617:15>
| |     |-TextComment 0x5555d4c143d0 <line:2616:5, col:61> Text=" An attribute whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c143f0 <line:2617:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b90b10 <line:2654:3, col:40> col:3 CXCursor_ObjCDesignatedInitializer 'int'
| | |-ConstantExpr 0x5555d4b90af0 <col:40> 'int'
| | | |-value: Int 434
| | | `-IntegerLiteral 0x5555d4b90ad0 <col:40> 'int' 434
| | `-FullComment 0x5555d4c14540 <line:2616:5, line:2617:15>
| |   `-ParagraphComment 0x5555d4c14510 <line:2616:5, line:2617:15>
| |     |-TextComment 0x5555d4c144c0 <line:2616:5, col:61> Text=" An attribute whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c144e0 <line:2617:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b90ba0 <line:2655:3, col:33> col:3 CXCursor_ObjCRuntimeVisible 'int'
| | |-ConstantExpr 0x5555d4b90b80 <col:33> 'int'
| | | |-value: Int 435
| | | `-IntegerLiteral 0x5555d4b90b60 <col:33> 'int' 435
| | `-FullComment 0x5555d4c14630 <line:2616:5, line:2617:15>
| |   `-ParagraphComment 0x5555d4c14600 <line:2616:5, line:2617:15>
| |     |-TextComment 0x5555d4c145b0 <line:2616:5, col:61> Text=" An attribute whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c145d0 <line:2617:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b90c30 <line:2656:3, col:26> col:3 CXCursor_ObjCBoxable 'int'
| | |-ConstantExpr 0x5555d4b90c10 <col:26> 'int'
| | | |-value: Int 436
| | | `-IntegerLiteral 0x5555d4b90bf0 <col:26> 'int' 436
| | `-FullComment 0x5555d4c14720 <line:2616:5, line:2617:15>
| |   `-ParagraphComment 0x5555d4c146f0 <line:2616:5, line:2617:15>
| |     |-TextComment 0x5555d4c146a0 <line:2616:5, col:61> Text=" An attribute whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c146c0 <line:2617:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b90cc0 <line:2657:3, col:23> col:3 CXCursor_FlagEnum 'int'
| | |-ConstantExpr 0x5555d4b90ca0 <col:23> 'int'
| | | |-value: Int 437
| | | `-IntegerLiteral 0x5555d4b90c80 <col:23> 'int' 437
| | `-FullComment 0x5555d4c14810 <line:2616:5, line:2617:15>
| |   `-ParagraphComment 0x5555d4c147e0 <line:2616:5, line:2617:15>
| |     |-TextComment 0x5555d4c14790 <line:2616:5, col:61> Text=" An attribute whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c147b0 <line:2617:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b90d50 <line:2658:3, col:29> col:3 CXCursor_ConvergentAttr 'int'
| | |-ConstantExpr 0x5555d4b90d30 <col:29> 'int'
| | | |-value: Int 438
| | | `-IntegerLiteral 0x5555d4b90d10 <col:29> 'int' 438
| | `-FullComment 0x5555d4c14900 <line:2616:5, line:2617:15>
| |   `-ParagraphComment 0x5555d4c148d0 <line:2616:5, line:2617:15>
| |     |-TextComment 0x5555d4c14880 <line:2616:5, col:61> Text=" An attribute whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c148a0 <line:2617:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b90de0 <line:2659:3, col:29> col:3 CXCursor_WarnUnusedAttr 'int'
| | |-ConstantExpr 0x5555d4b90dc0 <col:29> 'int'
| | | |-value: Int 439
| | | `-IntegerLiteral 0x5555d4b90da0 <col:29> 'int' 439
| | `-FullComment 0x5555d4c149f0 <line:2616:5, line:2617:15>
| |   `-ParagraphComment 0x5555d4c149c0 <line:2616:5, line:2617:15>
| |     |-TextComment 0x5555d4c14970 <line:2616:5, col:61> Text=" An attribute whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c14990 <line:2617:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b90e70 <line:2660:3, col:35> col:3 CXCursor_WarnUnusedResultAttr 'int'
| | |-ConstantExpr 0x5555d4b90e50 <col:35> 'int'
| | | |-value: Int 440
| | | `-IntegerLiteral 0x5555d4b90e30 <col:35> 'int' 440
| | `-FullComment 0x5555d4c14ae0 <line:2616:5, line:2617:15>
| |   `-ParagraphComment 0x5555d4c14ab0 <line:2616:5, line:2617:15>
| |     |-TextComment 0x5555d4c14a60 <line:2616:5, col:61> Text=" An attribute whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c14a80 <line:2617:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b90f00 <line:2661:3, col:26> col:3 referenced CXCursor_AlignedAttr 'int'
| | |-ConstantExpr 0x5555d4b90ee0 <col:26> 'int'
| | | |-value: Int 441
| | | `-IntegerLiteral 0x5555d4b90ec0 <col:26> 'int' 441
| | `-FullComment 0x5555d4c14bd0 <line:2616:5, line:2617:15>
| |   `-ParagraphComment 0x5555d4c14ba0 <line:2616:5, line:2617:15>
| |     |-TextComment 0x5555d4c14b50 <line:2616:5, col:61> Text=" An attribute whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c14b70 <line:2617:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b90f90 <line:2662:3, col:23> col:3 CXCursor_LastAttr 'int'
| | |-ConstantExpr 0x5555d4b90f70 <col:23> 'int'
| | | |-value: Int 441
| | | `-DeclRefExpr 0x5555d4b90f50 <col:23> 'int' EnumConstant 0x5555d4b90f00 'CXCursor_AlignedAttr' 'int'
| | `-FullComment 0x5555d4c14cc0 <line:2616:5, line:2617:15>
| |   `-ParagraphComment 0x5555d4c14c90 <line:2616:5, line:2617:15>
| |     |-TextComment 0x5555d4c14c40 <line:2616:5, col:61> Text=" An attribute whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c14c60 <line:2617:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b91020 <line:2665:3, col:37> col:3 referenced CXCursor_PreprocessingDirective 'int'
| | |-ConstantExpr 0x5555d4b91000 <col:37> 'int'
| | | |-value: Int 500
| | | `-IntegerLiteral 0x5555d4b90fe0 <col:37> 'int' 500
| | `-FullComment 0x5555d4c14db0 <line:2616:5, line:2617:15>
| |   `-ParagraphComment 0x5555d4c14d80 <line:2616:5, line:2617:15>
| |     |-TextComment 0x5555d4c14d30 <line:2616:5, col:61> Text=" An attribute whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c14d50 <line:2617:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b910b0 <line:2666:3, col:30> col:3 CXCursor_MacroDefinition 'int'
| | |-ConstantExpr 0x5555d4b91090 <col:30> 'int'
| | | |-value: Int 501
| | | `-IntegerLiteral 0x5555d4b91070 <col:30> 'int' 501
| | `-FullComment 0x5555d4c14ea0 <line:2616:5, line:2617:15>
| |   `-ParagraphComment 0x5555d4c14e70 <line:2616:5, line:2617:15>
| |     |-TextComment 0x5555d4c14e20 <line:2616:5, col:61> Text=" An attribute whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c14e40 <line:2617:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b91140 <line:2667:3, col:29> col:3 referenced CXCursor_MacroExpansion 'int'
| | |-ConstantExpr 0x5555d4b91120 <col:29> 'int'
| | | |-value: Int 502
| | | `-IntegerLiteral 0x5555d4b91100 <col:29> 'int' 502
| | `-FullComment 0x5555d4c14f90 <line:2616:5, line:2617:15>
| |   `-ParagraphComment 0x5555d4c14f60 <line:2616:5, line:2617:15>
| |     |-TextComment 0x5555d4c14f10 <line:2616:5, col:61> Text=" An attribute whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c14f30 <line:2617:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b911d0 <line:2668:3, col:33> col:3 CXCursor_MacroInstantiation 'int'
| | |-ConstantExpr 0x5555d4b911b0 <col:33> 'int'
| | | |-value: Int 502
| | | `-DeclRefExpr 0x5555d4b91190 <col:33> 'int' EnumConstant 0x5555d4b91140 'CXCursor_MacroExpansion' 'int'
| | `-FullComment 0x5555d4c15080 <line:2616:5, line:2617:15>
| |   `-ParagraphComment 0x5555d4c15050 <line:2616:5, line:2617:15>
| |     |-TextComment 0x5555d4c15000 <line:2616:5, col:61> Text=" An attribute whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c15020 <line:2617:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b91260 <line:2669:3, col:33> col:3 referenced CXCursor_InclusionDirective 'int'
| | |-ConstantExpr 0x5555d4b91240 <col:33> 'int'
| | | |-value: Int 503
| | | `-IntegerLiteral 0x5555d4b91220 <col:33> 'int' 503
| | `-FullComment 0x5555d4c15170 <line:2616:5, line:2617:15>
| |   `-ParagraphComment 0x5555d4c15140 <line:2616:5, line:2617:15>
| |     |-TextComment 0x5555d4c150f0 <line:2616:5, col:61> Text=" An attribute whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c15110 <line:2617:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b912f0 <line:2670:3, col:33> col:3 CXCursor_FirstPreprocessing 'int'
| | |-ConstantExpr 0x5555d4b912d0 <col:33> 'int'
| | | |-value: Int 500
| | | `-DeclRefExpr 0x5555d4b912b0 <col:33> 'int' EnumConstant 0x5555d4b91020 'CXCursor_PreprocessingDirective' 'int'
| | `-FullComment 0x5555d4c15260 <line:2616:5, line:2617:15>
| |   `-ParagraphComment 0x5555d4c15230 <line:2616:5, line:2617:15>
| |     |-TextComment 0x5555d4c151e0 <line:2616:5, col:61> Text=" An attribute whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c15200 <line:2617:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b91380 <line:2671:3, col:32> col:3 CXCursor_LastPreprocessing 'int'
| | |-ConstantExpr 0x5555d4b91360 <col:32> 'int'
| | | |-value: Int 503
| | | `-DeclRefExpr 0x5555d4b91340 <col:32> 'int' EnumConstant 0x5555d4b91260 'CXCursor_InclusionDirective' 'int'
| | `-FullComment 0x5555d4c15350 <line:2616:5, line:2617:15>
| |   `-ParagraphComment 0x5555d4c15320 <line:2616:5, line:2617:15>
| |     |-TextComment 0x5555d4c152d0 <line:2616:5, col:61> Text=" An attribute whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c152f0 <line:2617:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b91438 <line:2677:3, col:31> col:3 referenced CXCursor_ModuleImportDecl 'int'
| | |-ConstantExpr 0x5555d4b91418 <col:31> 'int'
| | | |-value: Int 600
| | | `-IntegerLiteral 0x5555d4b913f8 <col:31> 'int' 600
| | `-FullComment 0x5555d4c15420 <line:2675:5, col:33>
| |   `-ParagraphComment 0x5555d4c153f0 <col:5, col:33>
| |     `-TextComment 0x5555d4c153c0 <col:5, col:33> Text=" A module import declaration."
| |-EnumConstantDecl 0x5555d4b914c8 <line:2678:3, col:36> col:3 CXCursor_TypeAliasTemplateDecl 'int'
| | |-ConstantExpr 0x5555d4b914a8 <col:36> 'int'
| | | |-value: Int 601
| | | `-IntegerLiteral 0x5555d4b91488 <col:36> 'int' 601
| | `-FullComment 0x5555d4c154f0 <line:2675:5, col:33>
| |   `-ParagraphComment 0x5555d4c154c0 <col:5, col:33>
| |     `-TextComment 0x5555d4c15490 <col:5, col:33> Text=" A module import declaration."
| |-EnumConstantDecl 0x5555d4b91588 <line:2682:3, col:27> col:3 CXCursor_StaticAssert 'int'
| | |-ConstantExpr 0x5555d4b91568 <col:27> 'int'
| | | |-value: Int 602
| | | `-IntegerLiteral 0x5555d4b91548 <col:27> 'int' 602
| | `-FullComment 0x5555d4c155c0 <line:2680:5, col:43>
| |   `-ParagraphComment 0x5555d4c15590 <col:5, col:43>
| |     `-TextComment 0x5555d4c15560 <col:5, col:43> Text=" A static_assert or _Static_assert node"
| |-EnumConstantDecl 0x5555d4b91648 <line:2686:3, col:25> col:3 referenced CXCursor_FriendDecl 'int'
| | |-ConstantExpr 0x5555d4b91628 <col:25> 'int'
| | | |-value: Int 603
| | | `-IntegerLiteral 0x5555d4b91608 <col:25> 'int' 603
| | `-FullComment 0x5555d4c15690 <line:2684:5, col:26>
| |   `-ParagraphComment 0x5555d4c15660 <col:5, col:26>
| |     `-TextComment 0x5555d4c15630 <col:5, col:26> Text=" a friend declaration."
| |-EnumConstantDecl 0x5555d4b92790 <line:2687:3, col:29> col:3 CXCursor_FirstExtraDecl 'int'
| | |-ConstantExpr 0x5555d4b916b8 <col:29> 'int'
| | | |-value: Int 600
| | | `-DeclRefExpr 0x5555d4b91698 <col:29> 'int' EnumConstant 0x5555d4b91438 'CXCursor_ModuleImportDecl' 'int'
| | `-FullComment 0x5555d4c15760 <line:2684:5, col:26>
| |   `-ParagraphComment 0x5555d4c15730 <col:5, col:26>
| |     `-TextComment 0x5555d4c15700 <col:5, col:26> Text=" a friend declaration."
| |-EnumConstantDecl 0x5555d4b92820 <line:2688:3, col:28> col:3 CXCursor_LastExtraDecl 'int'
| | |-ConstantExpr 0x5555d4b92800 <col:28> 'int'
| | | |-value: Int 603
| | | `-DeclRefExpr 0x5555d4b927e0 <col:28> 'int' EnumConstant 0x5555d4b91648 'CXCursor_FriendDecl' 'int'
| | `-FullComment 0x5555d4c15830 <line:2684:5, col:26>
| |   `-ParagraphComment 0x5555d4c15800 <col:5, col:26>
| |     `-TextComment 0x5555d4c157d0 <col:5, col:26> Text=" a friend declaration."
| `-EnumConstantDecl 0x5555d4b928d8 <line:2693:3, col:32> col:3 CXCursor_OverloadCandidate 'int'
|   |-ConstantExpr 0x5555d4b928b8 <col:32> 'int'
|   | |-value: Int 700
|   | `-IntegerLiteral 0x5555d4b92898 <col:32> 'int' 700
|   `-FullComment 0x5555d4c15900 <line:2691:5, col:42>
|     `-ParagraphComment 0x5555d4c158d0 <col:5, col:42>
|       `-TextComment 0x5555d4c158a0 <col:5, col:42> Text=" A code completion overload candidate."
|-RecordDecl 0x5555d4b92958 <line:2714:9, line:2718:1> line:2714:9 struct definition
| |-FullComment 0x5555d4c15c20 <line:2697:3, line:2712:28>
| | |-ParagraphComment 0x5555d4c159c0 <line:2697:3, line:2698:22>
| | | |-TextComment 0x5555d4c15970 <line:2697:3, col:69> Text=" A cursor representing some element in the abstract syntax tree for"
| | | `-TextComment 0x5555d4c15990 <line:2698:3, col:22> Text=" a translation unit."
| | |-ParagraphComment 0x5555d4c15ad0 <line:2700:3, line:2705:77>
| | | |-TextComment 0x5555d4c159e0 <line:2700:3, col:70> Text=" The cursor abstraction unifies the different kinds of entities in a"
| | | |-TextComment 0x5555d4c15a00 <line:2701:3, col:77> Text=" program--declaration, statements, expressions, references to declarations,"
| | | |-TextComment 0x5555d4c15a20 <line:2702:3, col:77> Text=" etc.--under a single "cursor" abstraction with a common set of operations."
| | | |-TextComment 0x5555d4c15a40 <line:2703:3, col:74> Text=" Common operation for a cursor include: getting the physical location in"
| | | |-TextComment 0x5555d4c15a60 <line:2704:3, col:76> Text=" a source file where the cursor points, getting the name associated with a"
| | | `-TextComment 0x5555d4c15a80 <line:2705:3, col:77> Text=" cursor, and retrieving cursors for any child nodes of a particular cursor."
| | `-ParagraphComment 0x5555d4c15be0 <line:2707:3, line:2712:28>
| |   |-TextComment 0x5555d4c15af0 <line:2707:3, col:48> Text=" Cursors can be produced in two specific ways."
| |   |-TextComment 0x5555d4c15b10 <line:2708:3, col:77> Text=" clang_getTranslationUnitCursor() produces a cursor for a translation unit,"
| |   |-TextComment 0x5555d4c15b30 <line:2709:3, col:74> Text=" from which one can use clang_visitChildren() to explore the rest of the"
| |   |-TextComment 0x5555d4c15b50 <line:2710:3, col:75> Text=" translation unit. clang_getCursor() maps from a physical source location"
| |   |-TextComment 0x5555d4c15b70 <line:2711:3, col:76> Text=" to the entity that resides at that location, allowing one to map from the"
| |   `-TextComment 0x5555d4c15b90 <line:2712:3, col:28> Text=" source code into the AST."
| |-FieldDecl 0x5555d4b92a50 <line:2715:3, col:21> col:21 kind 'enum CXCursorKind':'enum CXCursorKind'
| |-FieldDecl 0x5555d4b92ab8 <line:2716:3, col:7> col:7 xdata 'int'
| `-FieldDecl 0x5555d4b92bb0 <line:2717:3, col:21> col:15 data 'const void *[3]'
|-TypedefDecl 0x5555d4b92c58 <line:2714:1, line:2718:3> col:3 referenced CXCursor 'struct CXCursor':'CXCursor'
| |-ElaboratedType 0x5555d4b92c00 'struct CXCursor' sugar
| | `-RecordType 0x5555d4b929e0 'CXCursor'
| |   `-Record 0x5555d4b92958 ''
| `-FullComment 0x5555d4c27fe0 <line:2697:3, line:2712:28>
|   |-ParagraphComment 0x5555d4c27d80 <line:2697:3, line:2698:22>
|   | |-TextComment 0x5555d4c27d30 <line:2697:3, col:69> Text=" A cursor representing some element in the abstract syntax tree for"
|   | `-TextComment 0x5555d4c27d50 <line:2698:3, col:22> Text=" a translation unit."
|   |-ParagraphComment 0x5555d4c27e90 <line:2700:3, line:2705:77>
|   | |-TextComment 0x5555d4c27da0 <line:2700:3, col:70> Text=" The cursor abstraction unifies the different kinds of entities in a"
|   | |-TextComment 0x5555d4c27dc0 <line:2701:3, col:77> Text=" program--declaration, statements, expressions, references to declarations,"
|   | |-TextComment 0x5555d4c27de0 <line:2702:3, col:77> Text=" etc.--under a single "cursor" abstraction with a common set of operations."
|   | |-TextComment 0x5555d4c27e00 <line:2703:3, col:74> Text=" Common operation for a cursor include: getting the physical location in"
|   | |-TextComment 0x5555d4c27e20 <line:2704:3, col:76> Text=" a source file where the cursor points, getting the name associated with a"
|   | `-TextComment 0x5555d4c27e40 <line:2705:3, col:77> Text=" cursor, and retrieving cursors for any child nodes of a particular cursor."
|   `-ParagraphComment 0x5555d4c27fa0 <line:2707:3, line:2712:28>
|     |-TextComment 0x5555d4c27eb0 <line:2707:3, col:48> Text=" Cursors can be produced in two specific ways."
|     |-TextComment 0x5555d4c27ed0 <line:2708:3, col:77> Text=" clang_getTranslationUnitCursor() produces a cursor for a translation unit,"
|     |-TextComment 0x5555d4c27ef0 <line:2709:3, col:74> Text=" from which one can use clang_visitChildren() to explore the rest of the"
|     |-TextComment 0x5555d4c27f10 <line:2710:3, col:75> Text=" translation unit. clang_getCursor() maps from a physical source location"
|     |-TextComment 0x5555d4c27f30 <line:2711:3, col:76> Text=" to the entity that resides at that location, allowing one to map from the"
|     `-TextComment 0x5555d4c27f50 <line:2712:3, col:28> Text=" source code into the AST."
|-FunctionDecl 0x5555d4b92e98 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:2729:49> col:25 clang_getNullCursor 'CXCursor (void)'
| |-VisibilityAttr 0x5555d4b92f40 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c280b0 </workspace/clang-c/Index.h:2727:3, col:56>
|   `-ParagraphComment 0x5555d4c28080 <col:3, col:56>
|     `-TextComment 0x5555d4c28050 <col:3, col:56> Text=" Retrieve the NULL cursor, which represents no entity."
|-FunctionDecl 0x5555d4b930e8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:2737:73> col:25 clang_getTranslationUnitCursor 'CXCursor (CXTranslationUnit)'
| |-ParmVarDecl 0x5555d4b92ff8 <col:56> col:73 'CXTranslationUnit':'struct CXTranslationUnitImpl *'
| |-VisibilityAttr 0x5555d4b93198 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c281f0 </workspace/clang-c/Index.h:2732:3, line:2735:58>
|   |-ParagraphComment 0x5555d4c28150 <line:2732:3, col:66>
|   | `-TextComment 0x5555d4c28120 <col:3, col:66> Text=" Retrieve the cursor that represents the given translation unit."
|   `-ParagraphComment 0x5555d4c281c0 <line:2734:3, line:2735:58>
|     |-TextComment 0x5555d4c28170 <line:2734:3, col:66> Text=" The translation unit cursor can be used to start traversing the"
|     `-TextComment 0x5555d4c28190 <line:2735:3, col:58> Text=" various declarations within the given translation unit."
|-FunctionDecl 0x5555d4b933e0 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:2742:62> col:25 clang_equalCursors 'unsigned int (CXCursor, CXCursor)'
| |-ParmVarDecl 0x5555d4b93248 <col:44> col:52 'CXCursor':'CXCursor'
| |-ParmVarDecl 0x5555d4b932c0 <col:54> col:62 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4b93498 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c282c0 </workspace/clang-c/Index.h:2740:3, col:48>
|   `-ParagraphComment 0x5555d4c28290 <col:3, col:48>
|     `-TextComment 0x5555d4c28260 <col:3, col:48> Text=" Determine whether two cursors are equivalent."
|-FunctionDecl 0x5555d4b93640 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:2747:55> col:20 clang_Cursor_isNull 'int (CXCursor)'
| |-ParmVarDecl 0x5555d4b93548 <col:40, col:49> col:49 cursor 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4b936f0 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c28400 </workspace/clang-c/Index.h:2745:3, col:41>
|   `-ParagraphComment 0x5555d4c283d0 <col:3, col:41>
|     |-TextComment 0x5555d4c28330 <col:3, col:23> Text=" Returns non-zero if "
|     |-InlineCommandComment 0x5555d4c28370 <col:24, col:25> Name="p" RenderMonospaced Arg[0]="cursor"
|     `-TextComment 0x5555d4c28390 <col:33, col:41> Text=" is null."
|-FunctionDecl 0x5555d4b91840 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:2752:50> col:25 clang_hashCursor 'unsigned int (CXCursor)'
| |-ParmVarDecl 0x5555d4b91740 <col:42> col:50 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4b918f0 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c284d0 </workspace/clang-c/Index.h:2750:3, col:45>
|   `-ParagraphComment 0x5555d4c284a0 <col:3, col:45>
|     `-TextComment 0x5555d4c28470 <col:3, col:45> Text=" Compute a hash value for the given cursor."
|-FunctionDecl 0x5555d4b91aa8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:2757:62> col:34 clang_getCursorKind 'enum CXCursorKind (CXCursor)'
| |-ParmVarDecl 0x5555d4b919a8 <col:54> col:62 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4b91b58 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c285a0 </workspace/clang-c/Index.h:2755:3, col:41>
|   `-ParagraphComment 0x5555d4c28570 <col:3, col:41>
|     `-TextComment 0x5555d4c28540 <col:3, col:41> Text=" Retrieve the kind of the given cursor."
|-FunctionDecl 0x5555d4b91d10 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:2762:62> col:25 clang_isDeclaration 'unsigned int (enum CXCursorKind)'
| |-ParmVarDecl 0x5555d4b91c18 <col:45, col:50> col:62 'enum CXCursorKind':'enum CXCursorKind'
| |-VisibilityAttr 0x5555d4b91dc0 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c28670 </workspace/clang-c/Index.h:2760:3, col:68>
|   `-ParagraphComment 0x5555d4c28640 <col:3, col:68>
|     `-TextComment 0x5555d4c28610 <col:3, col:68> Text=" Determine whether the given cursor kind represents a declaration."
|-FunctionDecl 0x5555d4b91f10 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:2772:60> col:25 clang_isInvalidDeclaration 'unsigned int (CXCursor)'
| |-ParmVarDecl 0x5555d4b91e78 <col:52> col:60 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4b91fc0 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c28890 </workspace/clang-c/Index.h:2765:3, line:2770:27>
|   |-ParagraphComment 0x5555d4c28710 <line:2765:3, col:54>
|   | `-TextComment 0x5555d4c286e0 <col:3, col:54> Text=" Determine whether the given declaration is invalid."
|   |-ParagraphComment 0x5555d4c28760 <line:2767:3, col:67>
|   | `-TextComment 0x5555d4c28730 <col:3, col:67> Text=" A declaration is invalid if it could not be parsed successfully."
|   |-ParagraphComment 0x5555d4c287b0 <line:2769:3>
|   | `-TextComment 0x5555d4c28780 <col:3> Text=" "
|   `-BlockCommandComment 0x5555d4c287d0 <col:4, line:2770:27> Name="returns"
|     `-ParagraphComment 0x5555d4c28850 <line:2769:12, line:2770:27>
|       |-TextComment 0x5555d4c28800 <line:2769:12, col:69> Text=" non-zero if the cursor represents a declaration and it is"
|       `-TextComment 0x5555d4c28820 <line:2770:3, col:27> Text=" invalid, otherwise NULL."
|-FunctionDecl 0x5555d4b92120 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:2782:60> col:25 clang_isReference 'unsigned int (enum CXCursorKind)'
| |-ParmVarDecl 0x5555d4b92088 <col:43, col:48> col:60 'enum CXCursorKind':'enum CXCursorKind'
| |-VisibilityAttr 0x5555d4b921d0 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c28a20 </workspace/clang-c/Index.h:2775:3, line:2780:46>
|   |-ParagraphComment 0x5555d4c28950 <line:2775:3, line:2776:13>
|   | |-TextComment 0x5555d4c28900 <line:2775:3, col:62> Text=" Determine whether the given cursor kind represents a simple"
|   | `-TextComment 0x5555d4c28920 <line:2776:3, col:13> Text=" reference."
|   `-ParagraphComment 0x5555d4c289f0 <line:2778:3, line:2780:46>
|     |-TextComment 0x5555d4c28970 <line:2778:3, col:75> Text=" Note that other kinds of cursors (such as expressions) can also refer to"
|     |-TextComment 0x5555d4c28990 <line:2779:3, col:72> Text=" other cursors. Use clang_getCursorReferenced() to determine whether a"
|     `-TextComment 0x5555d4c289b0 <line:2780:3, col:46> Text=" particular cursor refers to another entity."
|-FunctionDecl 0x5555d4b92330 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:2787:61> col:25 clang_isExpression 'unsigned int (enum CXCursorKind)'
| |-ParmVarDecl 0x5555d4b92298 <col:44, col:49> col:61 'enum CXCursorKind':'enum CXCursorKind'
| |-VisibilityAttr 0x5555d4b923e0 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c28af0 </workspace/clang-c/Index.h:2785:3, col:68>
|   `-ParagraphComment 0x5555d4c28ac0 <col:3, col:68>
|     `-TextComment 0x5555d4c28a90 <col:3, col:68> Text=" Determine whether the given cursor kind represents an expression."
|-FunctionDecl 0x5555d4b92540 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:2792:60> col:25 clang_isStatement 'unsigned int (enum CXCursorKind)'
| |-ParmVarDecl 0x5555d4b924a8 <col:43, col:48> col:60 'enum CXCursorKind':'enum CXCursorKind'
| |-VisibilityAttr 0x5555d4b925f0 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c28bc0 </workspace/clang-c/Index.h:2790:3, col:66>
|   `-ParagraphComment 0x5555d4c28b90 <col:3, col:66>
|     `-TextComment 0x5555d4c28b60 <col:3, col:66> Text=" Determine whether the given cursor kind represents a statement."
|-FunctionDecl 0x5555d4b93838 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:2797:60> col:25 clang_isAttribute 'unsigned int (enum CXCursorKind)'
| |-ParmVarDecl 0x5555d4b937a0 <col:43, col:48> col:60 'enum CXCursorKind':'enum CXCursorKind'
| |-VisibilityAttr 0x5555d4b938e8 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c28c90 </workspace/clang-c/Index.h:2795:3, col:67>
|   `-ParagraphComment 0x5555d4c28c60 <col:3, col:67>
|     `-TextComment 0x5555d4c28c30 <col:3, col:67> Text=" Determine whether the given cursor kind represents an attribute."
|-FunctionDecl 0x5555d4b93a30 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:2802:57> col:25 clang_Cursor_hasAttrs 'unsigned int (CXCursor)'
| |-ParmVarDecl 0x5555d4b93998 <col:47, col:56> col:56 C 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4b93ae0 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c28d60 </workspace/clang-c/Index.h:2800:3, col:57>
|   `-ParagraphComment 0x5555d4c28d30 <col:3, col:57>
|     `-TextComment 0x5555d4c28d00 <col:3, col:57> Text=" Determine whether the given cursor has any attributes."
|-FunctionDecl 0x5555d4b93c40 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:2808:58> col:25 clang_isInvalid 'unsigned int (enum CXCursorKind)'
| |-ParmVarDecl 0x5555d4b93ba8 <col:41, col:46> col:58 'enum CXCursorKind':'enum CXCursorKind'
| |-VisibilityAttr 0x5555d4b93cf0 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c28e50 </workspace/clang-c/Index.h:2805:3, line:2806:10>
|   `-ParagraphComment 0x5555d4c28e20 <line:2805:3, line:2806:10>
|     |-TextComment 0x5555d4c28dd0 <line:2805:3, col:64> Text=" Determine whether the given cursor kind represents an invalid"
|     `-TextComment 0x5555d4c28df0 <line:2806:3, col:10> Text=" cursor."
|-FunctionDecl 0x5555d4b93e50 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:2814:66> col:25 clang_isTranslationUnit 'unsigned int (enum CXCursorKind)'
| |-ParmVarDecl 0x5555d4b93db8 <col:49, col:54> col:66 'enum CXCursorKind':'enum CXCursorKind'
| |-VisibilityAttr 0x5555d4b93f00 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c28f40 </workspace/clang-c/Index.h:2811:3, line:2812:8>
|   `-ParagraphComment 0x5555d4c28f10 <line:2811:3, line:2812:8>
|     |-TextComment 0x5555d4c28ec0 <line:2811:3, col:67> Text=" Determine whether the given cursor kind represents a translation"
|     `-TextComment 0x5555d4c28ee0 <line:2812:3, col:8> Text=" unit."
|-FunctionDecl 0x5555d4b94060 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:2820:64> col:25 clang_isPreprocessing 'unsigned int (enum CXCursorKind)'
| |-ParmVarDecl 0x5555d4b93fc8 <col:47, col:52> col:64 'enum CXCursorKind':'enum CXCursorKind'
| |-VisibilityAttr 0x5555d4b94110 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c29060 </workspace/clang-c/Index.h:2816:4, line:2818:68>
|   `-ParagraphComment 0x5555d4c29030 <line:2816:4, line:2818:68>
|     |-TextComment 0x5555d4c28fb0 <line:2816:4> Text="*"
|     |-TextComment 0x5555d4c28fd0 <line:2817:3, col:64> Text=" Determine whether the given cursor represents a preprocessing"
|     `-TextComment 0x5555d4c28ff0 <line:2818:3, col:68> Text=" element, such as a preprocessor directive or macro instantiation."
|-FunctionDecl 0x5555d4b94270 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:2826:60> col:25 clang_isUnexposed 'unsigned int (enum CXCursorKind)'
| |-ParmVarDecl 0x5555d4b941d8 <col:43, col:48> col:60 'enum CXCursorKind':'enum CXCursorKind'
| |-VisibilityAttr 0x5555d4b94320 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c29180 </workspace/clang-c/Index.h:2822:4, line:2824:62>
|   `-ParagraphComment 0x5555d4c29150 <line:2822:4, line:2824:62>
|     |-TextComment 0x5555d4c290d0 <line:2822:4> Text="*"
|     |-TextComment 0x5555d4c290f0 <line:2823:3, col:60> Text=" Determine whether the given cursor represents a currently"
|     `-TextComment 0x5555d4c29110 <line:2824:3, col:62> Text="  unexposed piece of the AST (e.g., CXCursor_UnexposedStmt)."
|-EnumDecl 0x5555d4b943a8 <line:2831:1, line:2847:1> line:2831:6 CXLinkageKind
| |-FullComment 0x5555d4c29250 <line:2829:3, col:62>
| | `-ParagraphComment 0x5555d4c29220 <col:3, col:62>
| |   `-TextComment 0x5555d4c291f0 <col:3, col:62> Text=" Describe the linkage of the entity referred to by a cursor."
| |-EnumConstantDecl 0x5555d4b94498 <line:2834:3> col:3 CXLinkage_Invalid 'int'
| | `-FullComment 0x5555d4c29340 <line:2832:6, line:2833:30>
| |   `-ParagraphComment 0x5555d4c29310 <line:2832:6, line:2833:30>
| |     |-TextComment 0x5555d4c292c0 <line:2832:6, col:67> Text=" This value indicates that no linkage information is available"
| |     `-TextComment 0x5555d4c292e0 <line:2833:5, col:30> Text=" for a provided CXCursor. "
| |-EnumConstantDecl 0x5555d4b94518 <line:2839:3> col:3 CXLinkage_NoLinkage 'int'
| | `-FullComment 0x5555d4c29430 <line:2836:5, line:2837:79>
| |   `-ParagraphComment 0x5555d4c29400 <line:2836:5, line:2837:79>
| |     |-TextComment 0x5555d4c293b0 <line:2836:5, col:66> Text=" This is the linkage for variables, parameters, and so on that"
| |     `-TextComment 0x5555d4c293d0 <line:2837:5, col:79> Text="  have automatic storage.  This covers normal (non-extern) local variables."
| |-EnumConstantDecl 0x5555d4b94598 <line:2841:3> col:3 CXLinkage_Internal 'int'
| | `-FullComment 0x5555d4c29500 <line:2840:6, col:69>
| |   `-ParagraphComment 0x5555d4c294d0 <col:6, col:69>
| |     `-TextComment 0x5555d4c294a0 <col:6, col:69> Text=" This is the linkage for static variables and static functions. "
| |-EnumConstantDecl 0x5555d4b94618 <line:2844:3> col:3 CXLinkage_UniqueExternal 'int'
| | `-FullComment 0x5555d4c295f0 <line:2842:6, line:2843:33>
| |   `-ParagraphComment 0x5555d4c295c0 <line:2842:6, line:2843:33>
| |     |-TextComment 0x5555d4c29570 <line:2842:6, col:70> Text=" This is the linkage for entities with external linkage that live"
| |     `-TextComment 0x5555d4c29590 <line:2843:5, col:33> Text=" in C++ anonymous namespaces."
| `-EnumConstantDecl 0x5555d4b94698 <line:2846:3> col:3 CXLinkage_External 'int'
|   `-FullComment 0x5555d4c296c0 <line:2845:6, col:68>
|     `-ParagraphComment 0x5555d4c29690 <col:6, col:68>
|       `-TextComment 0x5555d4c29660 <col:6, col:68> Text=" This is the linkage for entities with true, external linkage. "
|-FunctionDecl 0x5555d4b97258 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:2852:73> col:35 clang_getCursorLinkage 'enum CXLinkageKind (CXCursor)'
| |-ParmVarDecl 0x5555d4b97120 <col:58, col:67> col:67 cursor 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4b97308 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c29790 </workspace/clang-c/Index.h:2850:3, col:69>
|   `-ParagraphComment 0x5555d4c29760 <col:3, col:69>
|     `-TextComment 0x5555d4c29730 <col:3, col:69> Text=" Determine the linkage of the entity referred to by a given cursor."
|-EnumDecl 0x5555d4b97360 <line:2854:1, line:2865:1> line:2854:6 CXVisibilityKind
| |-EnumConstantDecl 0x5555d4b97448 <line:2857:3> col:3 CXVisibility_Invalid 'int'
| | `-FullComment 0x5555d4c29880 <line:2855:6, line:2856:30>
| |   `-ParagraphComment 0x5555d4c29850 <line:2855:6, line:2856:30>
| |     |-TextComment 0x5555d4c29800 <line:2855:6, col:70> Text=" This value indicates that no visibility information is available"
| |     `-TextComment 0x5555d4c29820 <line:2856:5, col:30> Text=" for a provided CXCursor. "
| |-EnumConstantDecl 0x5555d4b974c8 <line:2860:3> col:3 CXVisibility_Hidden 'int'
| | `-FullComment 0x5555d4c29950 <line:2859:6, col:37>
| |   `-ParagraphComment 0x5555d4c29920 <col:6, col:37>
| |     `-TextComment 0x5555d4c298f0 <col:6, col:37> Text=" Symbol not seen by the linker. "
| |-EnumConstantDecl 0x5555d4b97548 <line:2862:3> col:3 CXVisibility_Protected 'int'
| | `-FullComment 0x5555d4c29a20 <line:2861:6, col:77>
| |   `-ParagraphComment 0x5555d4c299f0 <col:6, col:77>
| |     `-TextComment 0x5555d4c299c0 <col:6, col:77> Text=" Symbol seen by the linker but resolves to a symbol inside this object. "
| `-EnumConstantDecl 0x5555d4b975c8 <line:2864:3> col:3 CXVisibility_Default 'int'
|   `-FullComment 0x5555d4c29af0 <line:2863:6, col:63>
|     `-ParagraphComment 0x5555d4c29ac0 <col:6, col:63>
|       `-TextComment 0x5555d4c29a90 <col:6, col:63> Text=" Symbol seen by the linker and acts like a normal symbol. "
|-FunctionDecl 0x5555d4b977a8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:2878:79> col:38 clang_getCursorVisibility 'enum CXVisibilityKind (CXCursor)'
| |-ParmVarDecl 0x5555d4b97678 <col:64, col:73> col:73 cursor 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4b97858 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c29e60 </workspace/clang-c/Index.h:2868:3, line:2876:41>
|   |-ParagraphComment 0x5555d4c29b90 <line:2868:3, col:65>
|   | `-TextComment 0x5555d4c29b60 <col:3, col:65> Text=" Describe the visibility of the entity referred to by a cursor."
|   |-ParagraphComment 0x5555d4c29c30 <line:2870:3, line:2872:25>
|   | |-TextComment 0x5555d4c29bb0 <line:2870:3, col:69> Text=" This returns the default visibility if not explicitly specified by"
|   | |-TextComment 0x5555d4c29bd0 <line:2871:3, col:67> Text=" a visibility attribute. The default visibility may be changed by"
|   | `-TextComment 0x5555d4c29bf0 <line:2872:3, col:25> Text=" commandline arguments."
|   |-ParagraphComment 0x5555d4c29c80 <line:2874:3>
|   | `-TextComment 0x5555d4c29c50 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c29ca0 <col:4, col:37> [in] implicitly Param="cursor" ParamIndex=0
|   | `-ParagraphComment 0x5555d4c29d40 <col:17, col:37>
|   |   `-TextComment 0x5555d4c29d00 <col:17, col:37> Text=" The cursor to query."
|   |-ParagraphComment 0x5555d4c29d90 <line:2876:3>
|   | `-TextComment 0x5555d4c29d60 <col:3> Text=" "
|   `-BlockCommandComment 0x5555d4c29db0 <col:4, col:41> Name="returns"
|     `-ParagraphComment 0x5555d4c29e10 <col:12, col:41>
|       `-TextComment 0x5555d4c29de0 <col:12, col:41> Text=" The visibility of the cursor."
|-FunctionDecl 0x5555d4b97a38 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:2889:44> col:1 clang_getCursorAvailability 'enum CXAvailabilityKind (CXCursor)'
| |-ParmVarDecl 0x5555d4b97908 <col:29, col:38> col:38 cursor 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4b97ae8 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c2a140 </workspace/clang-c/Index.h:2881:3, line:2886:43>
|   |-ParagraphComment 0x5555d4c29f20 <line:2881:3, line:2882:51>
|   | |-TextComment 0x5555d4c29ed0 <line:2881:3, col:71> Text=" Determine the availability of the entity that this cursor refers to,"
|   | `-TextComment 0x5555d4c29ef0 <line:2882:3, col:51> Text=" taking the current target platform into account."
|   |-ParagraphComment 0x5555d4c29f70 <line:2884:3>
|   | `-TextComment 0x5555d4c29f40 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c29f90 <col:4, col:37> [in] implicitly Param="cursor" ParamIndex=0
|   | `-ParagraphComment 0x5555d4c2a020 <col:17, col:37>
|   |   `-TextComment 0x5555d4c29ff0 <col:17, col:37> Text=" The cursor to query."
|   |-ParagraphComment 0x5555d4c2a070 <line:2886:3>
|   | `-TextComment 0x5555d4c2a040 <col:3> Text=" "
|   `-BlockCommandComment 0x5555d4c2a090 <col:4, col:43> Name="returns"
|     `-ParagraphComment 0x5555d4c2a0f0 <col:12, col:43>
|       `-TextComment 0x5555d4c2a0c0 <col:12, col:43> Text=" The availability of the cursor."
|-RecordDecl 0x5555d4b97b68 <line:2895:9, line:2926:1> line:2895:16 struct CXPlatformAvailability definition
| |-FullComment 0x5555d4c2a230 <line:2892:3, line:2893:70>
| | `-ParagraphComment 0x5555d4c2a200 <line:2892:3, line:2893:70>
| |   |-TextComment 0x5555d4c2a1b0 <line:2892:3, col:79> Text=" Describes the availability of a given entity on a particular platform, e.g.,"
| |   `-TextComment 0x5555d4c2a1d0 <line:2893:3, col:70> Text=" a particular class might only be available on Mac OS 10.7 or newer."
| |-FieldDecl 0x5555d4b97c48 <line:2902:3, col:12> col:12 Platform 'CXString':'CXString'
| | `-FullComment 0x5555d4c2a370 <line:2897:5, line:2900:42>
| |   |-ParagraphComment 0x5555d4c2a2f0 <line:2897:5, line:2898:39>
| |   | |-TextComment 0x5555d4c2a2a0 <line:2897:5, col:66> Text=" A string that describes the platform for which this structure"
| |   | `-TextComment 0x5555d4c2a2c0 <line:2898:5, col:39> Text=" provides availability information."
| |   `-ParagraphComment 0x5555d4c2a340 <line:2900:5, col:42>
| |     `-TextComment 0x5555d4c2a310 <col:5, col:42> Text=" Possible values are "ios" or "macos"."
| |-FieldDecl 0x5555d4b97d40 <line:2906:3, col:13> col:13 Introduced 'CXVersion':'struct CXVersion'
| | `-FullComment 0x5555d4c2a440 <line:2904:5, col:60>
| |   `-ParagraphComment 0x5555d4c2a410 <col:5, col:60>
| |     `-TextComment 0x5555d4c2a3e0 <col:5, col:60> Text=" The version number in which this entity was introduced."
| |-FieldDecl 0x5555d4b97dc8 <line:2911:3, col:13> col:13 Deprecated 'CXVersion':'struct CXVersion'
| | `-FullComment 0x5555d4c2a530 <line:2908:5, line:2909:22>
| |   `-ParagraphComment 0x5555d4c2a500 <line:2908:5, line:2909:22>
| |     |-TextComment 0x5555d4c2a4b0 <line:2908:5, col:67> Text=" The version number in which this entity was deprecated (but is"
| |     `-TextComment 0x5555d4c2a4d0 <line:2909:5, col:22> Text=" still available)."
| |-FieldDecl 0x5555d4b97e58 <line:2916:3, col:13> col:13 Obsoleted 'CXVersion':'struct CXVersion'
| | `-FullComment 0x5555d4c2a620 <line:2913:5, line:2914:28>
| |   `-ParagraphComment 0x5555d4c2a5f0 <line:2913:5, line:2914:28>
| |     |-TextComment 0x5555d4c2a5a0 <line:2913:5, col:73> Text=" The version number in which this entity was obsoleted, and therefore"
| |     `-TextComment 0x5555d4c2a5c0 <line:2914:5, col:28> Text=" is no longer available."
| |-FieldDecl 0x5555d4b97ef0 <line:2920:3, col:7> col:7 Unavailable 'int'
| | `-FullComment 0x5555d4c2a6f0 <line:2918:5, col:72>
| |   `-ParagraphComment 0x5555d4c2a6c0 <col:5, col:72>
| |     `-TextComment 0x5555d4c2a690 <col:5, col:72> Text=" Whether the entity is unconditionally unavailable on this platform."
| `-FieldDecl 0x5555d4b97f78 <line:2925:3, col:12> col:12 Message 'CXString':'CXString'
|   `-FullComment 0x5555d4c2a7e0 <line:2922:5, line:2923:30>
|     `-ParagraphComment 0x5555d4c2a7b0 <line:2922:5, line:2923:30>
|       |-TextComment 0x5555d4c2a760 <line:2922:5, col:67> Text=" An optional message to provide to a user of this API, e.g., to"
|       `-TextComment 0x5555d4c2a780 <line:2923:5, col:30> Text=" suggest replacement APIs."
|-TypedefDecl 0x5555d4b98088 <line:2895:1, line:2926:3> col:3 referenced CXPlatformAvailability 'struct CXPlatformAvailability':'struct CXPlatformAvailability'
| |-ElaboratedType 0x5555d4b98030 'struct CXPlatformAvailability' sugar
| | `-RecordType 0x5555d4b97bf0 'struct CXPlatformAvailability'
| |   `-Record 0x5555d4b97b68 'CXPlatformAvailability'
| `-FullComment 0x5555d4c2a8d0 <line:2892:3, line:2893:70>
|   `-ParagraphComment 0x5555d4c2a8a0 <line:2892:3, line:2893:70>
|     |-TextComment 0x5555d4c2a850 <line:2892:3, col:79> Text=" Describes the availability of a given entity on a particular platform, e.g.,"
|     `-TextComment 0x5555d4c2a870 <line:2893:3, col:70> Text=" a particular class might only be available on Mac OS 10.7 or newer."
|-FunctionDecl 0x5555d4b986b0 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:2967:64> line:2964:20 clang_getCursorPlatformAvailability 'int (CXCursor, int *, CXString *, int *, CXString *, CXPlatformAvailability *, int)'
| |-ParmVarDecl 0x5555d4b98160 <line:2965:5, col:14> col:14 cursor 'CXCursor':'CXCursor'
| |-ParmVarDecl 0x5555d4b981e0 <col:22, col:27> col:27 always_deprecated 'int *'
| |-ParmVarDecl 0x5555d4b98260 <col:46, col:56> col:56 deprecated_message 'CXString *'
| |-ParmVarDecl 0x5555d4b982e0 <line:2966:5, col:10> col:10 always_unavailable 'int *'
| |-ParmVarDecl 0x5555d4b98360 <col:30, col:40> col:40 unavailable_message 'CXString *'
| |-ParmVarDecl 0x5555d4b984a0 <line:2967:5, col:29> col:29 availability 'CXPlatformAvailability *'
| |-ParmVarDecl 0x5555d4b98520 <col:43, col:47> col:47 availability_size 'int'
| |-VisibilityAttr 0x5555d4b98790 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c2b710 </workspace/clang-c/Index.h:2929:3, line:2962:48>
|   |-ParagraphComment 0x5555d4c2a990 <line:2929:3, line:2930:64>
|   | |-TextComment 0x5555d4c2a940 <line:2929:3, col:70> Text=" Determine the availability of the entity that this cursor refers to"
|   | `-TextComment 0x5555d4c2a960 <line:2930:3, col:64> Text=" on any platforms for which availability information is known."
|   |-ParagraphComment 0x5555d4c2a9e0 <line:2932:3>
|   | `-TextComment 0x5555d4c2a9b0 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c2aa00 <col:4, col:37> [in] implicitly Param="cursor" ParamIndex=0
|   | `-ParagraphComment 0x5555d4c2aa90 <col:17, col:37>
|   |   `-TextComment 0x5555d4c2aa60 <col:17, col:37> Text=" The cursor to query."
|   |-ParagraphComment 0x5555d4c2aae0 <line:2934:3>
|   | `-TextComment 0x5555d4c2aab0 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c2ab00 <col:4, line:2935:41> [in] implicitly Param="always_deprecated" ParamIndex=1
|   | `-ParagraphComment 0x5555d4c2abc0 <line:2934:28, line:2935:41>
|   |   |-TextComment 0x5555d4c2ab70 <line:2934:28, col:76> Text=" If non-NULL, will be set to indicate whether the"
|   |   `-TextComment 0x5555d4c2ab90 <line:2935:3, col:41> Text=" entity is deprecated on all platforms."
|   |-ParagraphComment 0x5555d4c2ac10 <line:2937:3>
|   | `-TextComment 0x5555d4c2abe0 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c2ac30 <col:4, line:2939:47> [in] implicitly Param="deprecated_message" ParamIndex=2
|   | `-ParagraphComment 0x5555d4c2ad20 <line:2937:29, line:2939:47>
|   |   |-TextComment 0x5555d4c2aca0 <line:2937:29, col:73> Text=" If non-NULL, will be set to the message text"
|   |   |-TextComment 0x5555d4c2acc0 <line:2938:3, col:79> Text=" provided along with the unconditional deprecation of this entity. The client"
|   |   `-TextComment 0x5555d4c2ace0 <line:2939:3, col:47> Text=" is responsible for deallocating this string."
|   |-ParagraphComment 0x5555d4c2ad70 <line:2941:3>
|   | `-TextComment 0x5555d4c2ad40 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c2ad90 <col:4, line:2942:42> [in] implicitly Param="always_unavailable" ParamIndex=3
|   | `-ParagraphComment 0x5555d4c2ae50 <line:2941:29, line:2942:42>
|   |   |-TextComment 0x5555d4c2ae00 <line:2941:29, col:77> Text=" If non-NULL, will be set to indicate whether the"
|   |   `-TextComment 0x5555d4c2ae20 <line:2942:3, col:42> Text=" entity is unavailable on all platforms."
|   |-ParagraphComment 0x5555d4c2aea0 <line:2944:3>
|   | `-TextComment 0x5555d4c2ae70 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c2aec0 <col:4, line:2946:54> [in] implicitly Param="unavailable_message" ParamIndex=4
|   | `-ParagraphComment 0x5555d4c2afb0 <line:2944:30, line:2946:54>
|   |   |-TextComment 0x5555d4c2af30 <line:2944:30, col:74> Text=" If non-NULL, will be set to the message text"
|   |   |-TextComment 0x5555d4c2af50 <line:2945:3, col:75> Text=" provided along with the unconditional unavailability of this entity. The"
|   |   `-TextComment 0x5555d4c2af70 <line:2946:3, col:54> Text=" client is responsible for deallocating this string."
|   |-ParagraphComment 0x5555d4c2b000 <line:2948:3>
|   | `-TextComment 0x5555d4c2afd0 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c2b020 <col:4, line:2951:76> [in] implicitly Param="availability" ParamIndex=5
|   | `-ParagraphComment 0x5555d4c2b1a0 <line:2948:23, line:2951:76>
|   |   |-TextComment 0x5555d4c2b080 <line:2948:23, col:80> Text=" If non-NULL, an array of CXPlatformAvailability instances"
|   |   |-TextComment 0x5555d4c2b0a0 <line:2949:3, col:78> Text=" that will be populated with platform availability information, up to either"
|   |   |-TextComment 0x5555d4c2b0c0 <line:2950:3, col:78> Text=" the number of platforms for which availability information is available (as"
|   |   |-TextComment 0x5555d4c2b0e0 <line:2951:3, col:33> Text=" returned by this function) or "
|   |   |-InlineCommandComment 0x5555d4c2b130 <col:34, col:35> Name="c" RenderMonospaced Arg[0]="availability_size,"
|   |   `-TextComment 0x5555d4c2b150 <col:55, col:76> Text=" whichever is smaller."
|   |-ParagraphComment 0x5555d4c2b1f0 <line:2953:3>
|   | `-TextComment 0x5555d4c2b1c0 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c2b210 <col:4, line:2954:25> [in] implicitly Param="availability_size" ParamIndex=6
|   | `-ParagraphComment 0x5555d4c2b350 <line:2953:28, line:2954:25>
|   |   |-TextComment 0x5555d4c2b280 <line:2953:28, col:67> Text=" The number of elements available in the"
|   |   |-TextComment 0x5555d4c2b2a0 <line:2954:3> Text=" "
|   |   |-InlineCommandComment 0x5555d4c2b2f0 <col:4, col:5> Name="c" RenderMonospaced Arg[0]="availability"
|   |   `-TextComment 0x5555d4c2b310 <col:19, col:25> Text=" array."
|   |-ParagraphComment 0x5555d4c2b3a0 <line:2956:3>
|   | `-TextComment 0x5555d4c2b370 <col:3> Text=" "
|   |-BlockCommandComment 0x5555d4c2b3c0 <col:4, line:2957:38> Name="returns"
|   | `-ParagraphComment 0x5555d4c2b4a0 <line:2956:12, line:2957:38>
|   |   |-TextComment 0x5555d4c2b3f0 <line:2956:12, col:77> Text=" The number of platforms (N) for which availability information is"
|   |   |-TextComment 0x5555d4c2b410 <line:2957:3, col:36> Text=" available (which is unrelated to "
|   |   `-InlineCommandComment 0x5555d4c2b460 <col:37, col:38> Name="c" RenderMonospaced Arg[0]="availability_size)."
|   `-ParagraphComment 0x5555d4c2b660 <line:2959:3, line:2962:48>
|     |-TextComment 0x5555d4c2b4c0 <line:2959:3, col:50> Text=" Note that the client is responsible for calling"
|     |-TextComment 0x5555d4c2b4e0 <line:2960:3> Text=" "
|     |-InlineCommandComment 0x5555d4c2b540 <col:4, col:5> Name="c" RenderMonospaced Arg[0]="clang_disposeCXPlatformAvailability"
|     |-TextComment 0x5555d4c2b560 <col:42, col:61> Text=" to free each of the"
|     |-TextComment 0x5555d4c2b580 <line:2961:3, col:55> Text=" platform-availability structures returned. There are"
|     |-TextComment 0x5555d4c2b5a0 <line:2962:3> Text=" "
|     |-InlineCommandComment 0x5555d4c2b5e0 <col:4, col:5> Name="c" RenderMonospaced Arg[0]="min(N,"
|     `-TextComment 0x5555d4c2b600 <col:13, col:48> Text=" availability_size) such structures."
|-FunctionDecl 0x5555d4b98948 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:2973:73> col:1 clang_disposeCXPlatformAvailability 'void (CXPlatformAvailability *)'
| |-ParmVarDecl 0x5555d4b98850 <col:37, col:61> col:61 availability 'CXPlatformAvailability *'
| |-VisibilityAttr 0x5555d4b989f8 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c2b860 </workspace/clang-c/Index.h:2970:3, col:73>
|   `-ParagraphComment 0x5555d4c2b830 <col:3, col:73>
|     |-TextComment 0x5555d4c2b780 <col:3, col:37> Text=" Free the memory associated with a "
|     |-InlineCommandComment 0x5555d4c2b7d0 <col:38, col:39> Name="c" RenderMonospaced Arg[0]="CXPlatformAvailability"
|     `-TextComment 0x5555d4c2b7f0 <col:63, col:73> Text=" structure."
|-FunctionDecl 0x5555d4b98b98 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:2979:75> col:25 clang_Cursor_getVarDeclInitializer 'CXCursor (CXCursor)'
| |-ParmVarDecl 0x5555d4b98aa8 <col:60, col:69> col:69 cursor 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4b98c48 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c2b950 </workspace/clang-c/Index.h:2976:3, line:2977:68>
|   `-ParagraphComment 0x5555d4c2b920 <line:2976:3, line:2977:68>
|     |-TextComment 0x5555d4c2b8d0 <line:2976:3, col:76> Text=" If cursor refers to a variable declaration and it has initializer returns"
|     `-TextComment 0x5555d4c2b8f0 <line:2977:3, col:68> Text=" cursor referring to the initializer otherwise return null cursor."
|-FunctionDecl 0x5555d4b98d90 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:2986:72> col:20 clang_Cursor_hasVarDeclGlobalStorage 'int (CXCursor)'
| |-ParmVarDecl 0x5555d4b98cf8 <col:57, col:66> col:66 cursor 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4b98e40 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c2ba70 </workspace/clang-c/Index.h:2982:3, line:2984:35>
|   `-ParagraphComment 0x5555d4c2ba40 <line:2982:3, line:2984:35>
|     |-TextComment 0x5555d4c2b9c0 <line:2982:3, col:80> Text=" If cursor refers to a variable declaration that has global storage returns 1."
|     |-TextComment 0x5555d4c2b9e0 <line:2983:3, col:78> Text=" If cursor refers to a variable declaration that doesn't have global storage"
|     `-TextComment 0x5555d4c2ba00 <line:2984:3, col:35> Text=" returns 0. Otherwise returns -1."
|-FunctionDecl 0x5555d4b98f90 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:2993:74> col:20 clang_Cursor_hasVarDeclExternalStorage 'int (CXCursor)'
| |-ParmVarDecl 0x5555d4b98ef8 <col:59, col:68> col:68 cursor 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4b99040 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c2bb90 </workspace/clang-c/Index.h:2989:3, line:2991:52>
|   `-ParagraphComment 0x5555d4c2bb60 <line:2989:3, line:2991:52>
|     |-TextComment 0x5555d4c2bae0 <line:2989:3, col:71> Text=" If cursor refers to a variable declaration that has external storage"
|     |-TextComment 0x5555d4c2bb00 <line:2990:3, col:74> Text=" returns 1. If cursor refers to a variable declaration that doesn't have"
|     `-TextComment 0x5555d4c2bb20 <line:2991:3, col:52> Text=" external storage returns 0. Otherwise returns -1."
|-EnumDecl 0x5555d4b99140 <line:2998:1, line:3003:1> line:2998:6 CXLanguageKind
| |-FullComment 0x5555d4c2bc60 <line:2996:3, col:65>
| | `-ParagraphComment 0x5555d4c2bc30 <col:3, col:65>
| |   `-TextComment 0x5555d4c2bc00 <col:3, col:65> Text=" Describe the "language" of the entity referred to by a cursor."
| |-EnumConstantDecl 0x5555d4b99240 <line:2999:3, col:24> col:3 CXLanguage_Invalid 'int'
| | `-ConstantExpr 0x5555d4b99220 <col:24> 'int'
| |   |-value: Int 0
| |   `-IntegerLiteral 0x5555d4b99200 <col:24> 'int' 0
| |-EnumConstantDecl 0x5555d4b99290 <line:3000:3> col:3 CXLanguage_C 'int'
| |-EnumConstantDecl 0x5555d4b992e0 <line:3001:3> col:3 CXLanguage_ObjC 'int'
| `-EnumConstantDecl 0x5555d4b99330 <line:3002:3> col:3 CXLanguage_CPlusPlus 'int'
|-FunctionDecl 0x5555d4b99508 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:3008:75> col:36 clang_getCursorLanguage 'enum CXLanguageKind (CXCursor)'
| |-ParmVarDecl 0x5555d4b993d8 <col:60, col:69> col:69 cursor 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4b995b8 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c2bd50 </workspace/clang-c/Index.h:3006:3, col:72>
|   `-ParagraphComment 0x5555d4c2bd00 <col:3, col:72>
|     `-TextComment 0x5555d4c2bcd0 <col:3, col:72> Text=" Determine the "language" of the entity referred to by a given cursor."
|-EnumDecl 0x5555d4b99638 <line:3014:1, col:62> col:6 CXTLSKind
| |-FullComment 0x5555d4c2be40 <line:3011:3, line:3012:27>
| | `-ParagraphComment 0x5555d4c2be10 <line:3011:3, line:3012:27>
| |   |-TextComment 0x5555d4c2bdc0 <line:3011:3, col:68> Text=" Describe the "thread-local storage (TLS) kind" of the declaration"
| |   `-TextComment 0x5555d4c2bde0 <line:3012:3, col:27> Text=" referred to by a cursor."
| |-EnumConstantDecl 0x5555d4b99740 <line:3014:18, col:31> col:18 CXTLS_None 'int'
| | `-ConstantExpr 0x5555d4b99720 <col:31> 'int'
| |   |-value: Int 0
| |   `-IntegerLiteral 0x5555d4b99700 <col:31> 'int' 0
| |-EnumConstantDecl 0x5555d4b99790 <col:34> col:34 CXTLS_Dynamic 'int'
| `-EnumConstantDecl 0x5555d4b997e0 <col:49> col:49 CXTLS_Static 'int'
|-FunctionDecl 0x5555d4b999b8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:3020:69> col:31 clang_getCursorTLSKind 'enum CXTLSKind (CXCursor)'
| |-ParmVarDecl 0x5555d4b99888 <col:54, col:63> col:63 cursor 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4b99a68 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c2bf30 </workspace/clang-c/Index.h:3017:3, line:3018:27>
|   `-ParagraphComment 0x5555d4c2bf00 <line:3017:3, line:3018:27>
|     |-TextComment 0x5555d4c2beb0 <line:3017:3, col:69> Text=" Determine the "thread-local storage (TLS) kind" of the declaration"
|     `-TextComment 0x5555d4c2bed0 <line:3018:3, col:27> Text=" referred to by a cursor."
|-FunctionDecl 0x5555d4b99c08 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:3025:74> col:34 clang_Cursor_getTranslationUnit 'CXTranslationUnit (CXCursor)'
| |-ParmVarDecl 0x5555d4b99b18 <col:66> col:74 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4b99cb8 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c2c000 </workspace/clang-c/Index.h:3023:3, col:62>
|   `-ParagraphComment 0x5555d4c2bfd0 <col:3, col:62>
|     `-TextComment 0x5555d4c2bfa0 <col:3, col:62> Text=" Returns the translation unit that a cursor originated from."
|-RecordDecl 0x5555d4b99d38 <line:3030:9, col:16> col:16 struct CXCursorSetImpl
|-TypedefDecl 0x5555d4b99ea0 <col:1, col:33> col:33 referenced CXCursorSet 'struct CXCursorSetImpl *'
| |-PointerType 0x5555d4b99e50 'struct CXCursorSetImpl *'
| | `-ElaboratedType 0x5555d4b99de0 'struct CXCursorSetImpl' sugar
| |   `-RecordType 0x5555d4b99dc0 'struct CXCursorSetImpl'
| |     `-Record 0x5555d4b99d38 'CXCursorSetImpl'
| `-FullComment 0x5555d4c2c0d0 <line:3028:3, col:52>
|   `-ParagraphComment 0x5555d4c2c0a0 <col:3, col:52>
|     `-TextComment 0x5555d4c2c070 <col:3, col:52> Text=" A fast container representing a set of CXCursors."
|-FunctionDecl 0x5555d4b9c150 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:3035:56> col:28 clang_createCXCursorSet 'CXCursorSet (void)'
| |-VisibilityAttr 0x5555d4b9c1f8 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c2c1a0 </workspace/clang-c/Index.h:3033:3, col:32>
|   `-ParagraphComment 0x5555d4c2c170 <col:3, col:32>
|     `-TextComment 0x5555d4c2c140 <col:3, col:32> Text=" Creates an empty CXCursorSet."
|-FunctionDecl 0x5555d4b9c398 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:3040:62> col:21 clang_disposeCXCursorSet 'void (CXCursorSet)'
| |-ParmVarDecl 0x5555d4b9c2a8 <col:46, col:58> col:58 cset 'CXCursorSet':'struct CXCursorSetImpl *'
| |-VisibilityAttr 0x5555d4b9c448 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c2c270 </workspace/clang-c/Index.h:3038:3, col:61>
|   `-ParagraphComment 0x5555d4c2c240 <col:3, col:61>
|     `-TextComment 0x5555d4c2c210 <col:3, col:61> Text=" Disposes a CXCursorSet and releases its associated memory."
|-FunctionDecl 0x5555d4b9c690 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:3048:67> line:3047:25 clang_CXCursorSet_contains 'unsigned int (CXCursorSet, CXCursor)'
| |-ParmVarDecl 0x5555d4b9c4f8 <col:52, col:64> col:64 cset 'CXCursorSet':'struct CXCursorSetImpl *'
| |-ParmVarDecl 0x5555d4b9c570 <line:3048:52, col:61> col:61 cursor 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4b9c748 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c2c420 </workspace/clang-c/Index.h:3043:3, line:3045:62>
|   |-ParagraphComment 0x5555d4c2c310 <line:3043:3, col:67>
|   | `-TextComment 0x5555d4c2c2e0 <col:3, col:67> Text=" Queries a CXCursorSet to see if it contains a specific CXCursor."
|   |-ParagraphComment 0x5555d4c2c360 <line:3045:3>
|   | `-TextComment 0x5555d4c2c330 <col:3> Text=" "
|   `-BlockCommandComment 0x5555d4c2c380 <col:4, col:62> Name="returns"
|     `-ParagraphComment 0x5555d4c2c3e0 <col:12, col:62>
|       `-TextComment 0x5555d4c2c3b0 <col:12, col:62> Text=" non-zero if the set contains the specified cursor."
|-FunctionDecl 0x5555d4b9c910 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:3056:65> line:3055:25 clang_CXCursorSet_insert 'unsigned int (CXCursorSet, CXCursor)'
| |-ParmVarDecl 0x5555d4b9c7f8 <col:50, col:62> col:62 cset 'CXCursorSet':'struct CXCursorSetImpl *'
| |-ParmVarDecl 0x5555d4b9c870 <line:3056:50, col:59> col:59 cursor 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4b9c9c8 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c2c5d0 </workspace/clang-c/Index.h:3051:3, line:3053:80>
|   |-ParagraphComment 0x5555d4c2c4c0 <line:3051:3, col:41>
|   | `-TextComment 0x5555d4c2c490 <col:3, col:41> Text=" Inserts a CXCursor into a CXCursorSet."
|   |-ParagraphComment 0x5555d4c2c510 <line:3053:3>
|   | `-TextComment 0x5555d4c2c4e0 <col:3> Text=" "
|   `-BlockCommandComment 0x5555d4c2c530 <col:4, col:80> Name="returns"
|     `-ParagraphComment 0x5555d4c2c590 <col:12, col:80>
|       `-TextComment 0x5555d4c2c560 <col:12, col:80> Text=" zero if the CXCursor was already in the set, and non-zero otherwise."
|-FunctionDecl 0x5555d4b9cb08 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:3091:70> col:25 clang_getCursorSemanticParent 'CXCursor (CXCursor)'
| |-ParmVarDecl 0x5555d4b9ca78 <col:55, col:64> col:64 cursor 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4b9cbb8 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c2cf90 </workspace/clang-c/Index.h:3059:3, line:3089:72>
|   |-ParagraphComment 0x5555d4c2c670 <line:3059:3, col:53>
|   | `-TextComment 0x5555d4c2c640 <col:3, col:53> Text=" Determine the semantic parent of the given cursor."
|   |-ParagraphComment 0x5555d4c2c860 <line:3061:3, line:3065:53>
|   | |-TextComment 0x5555d4c2c690 <line:3061:3, col:75> Text=" The semantic parent of a cursor is the cursor that semantically contains"
|   | |-TextComment 0x5555d4c2c6b0 <line:3062:3, col:13> Text=" the given "
|   | |-InlineCommandComment 0x5555d4c2c6f0 <col:14, col:15> Name="p" RenderMonospaced Arg[0]="cursor."
|   | |-TextComment 0x5555d4c2c710 <col:24, col:79> Text=" For many declarations, the lexical and semantic parents"
|   | |-TextComment 0x5555d4c2c730 <line:3063:3, col:52> Text=" are equivalent (the lexical parent is returned by"
|   | |-TextComment 0x5555d4c2c750 <line:3064:3> Text=" "
|   | |-InlineCommandComment 0x5555d4c2c7b0 <col:4, col:5> Name="c" RenderMonospaced Arg[0]="clang_getCursorLexicalParent())."
|   | |-TextComment 0x5555d4c2c7d0 <col:39, col:72> Text=" They diverge when declarations or"
|   | `-TextComment 0x5555d4c2c7f0 <line:3065:3, col:53> Text=" definitions are provided out-of-line. For example:"
|   |-ParagraphComment 0x5555d4c2c8b0 <line:3067:3>
|   | `-TextComment 0x5555d4c2c880 <col:3> Text=" "
|   |-VerbatimBlockComment 0x5555d4c2c8d0 <col:4, col:9> Name="code" CloseName="endcode"
|   | |-VerbatimBlockLineComment 0x5555d4c2c920 <line:3068:3, col:13> Text=" class C {"
|   | |-VerbatimBlockLineComment 0x5555d4c2c940 <line:3069:3, col:14> Text="  void f();"
|   | |-VerbatimBlockLineComment 0x5555d4c2c960 <line:3070:3, col:6> Text=" };"
|   | |-VerbatimBlockLineComment 0x5555d4c2c980 <line:3071:3> Text=""
|   | `-VerbatimBlockLineComment 0x5555d4c2c9a0 <line:3072:3, col:19> Text=" void C::f() { }"
|   |-ParagraphComment 0x5555d4c2cc40 <line:3075:3, line:3083:68>
|   | |-TextComment 0x5555d4c2c9f0 <line:3075:3, col:36> Text=" In the out-of-line definition of "
|   | |-InlineCommandComment 0x5555d4c2ca30 <col:37, col:38> Name="c" RenderMonospaced Arg[0]="C::f,"
|   | |-TextComment 0x5555d4c2ca50 <col:45, col:67> Text=" the semantic parent is"
|   | |-TextComment 0x5555d4c2ca70 <line:3076:3, col:13> Text=" the class "
|   | |-InlineCommandComment 0x5555d4c2cab0 <col:14, col:15> Name="c" RenderMonospaced Arg[0]="C,"
|   | |-TextComment 0x5555d4c2cad0 <col:19, col:76> Text=" of which this function is a member. The lexical parent is"
|   | |-TextComment 0x5555d4c2caf0 <line:3077:3, col:78> Text=" the place where the declaration actually occurs in the source code; in this"
|   | |-TextComment 0x5555d4c2cb10 <line:3078:3, col:71> Text=" case, the definition occurs in the translation unit. In general, the"
|   | |-TextComment 0x5555d4c2cb30 <line:3079:3, col:79> Text=" lexical parent for a given entity can change without affecting the semantics"
|   | |-TextComment 0x5555d4c2cb50 <line:3080:3, col:74> Text=" of the program, and the lexical parent of different declarations of the"
|   | |-TextComment 0x5555d4c2cb70 <line:3081:3, col:79> Text=" same entity may be different. Changing the semantic parent of a declaration,"
|   | |-TextComment 0x5555d4c2cb90 <line:3082:3, col:78> Text=" on the other hand, can have a major impact on semantics, and redeclarations"
|   | `-TextComment 0x5555d4c2cbb0 <line:3083:3, col:68> Text=" of a particular entity should all have the same semantic context."
|   |-ParagraphComment 0x5555d4c2cee0 <line:3085:3, line:3087:73>
|   | |-TextComment 0x5555d4c2cc60 <line:3085:3, col:46> Text=" In the example above, both declarations of "
|   | |-InlineCommandComment 0x5555d4c2cca0 <col:47, col:48> Name="c" RenderMonospaced Arg[0]="C::f"
|   | |-TextComment 0x5555d4c2ccc0 <col:54, col:59> Text=" have "
|   | |-InlineCommandComment 0x5555d4c2cd00 <col:60, col:61> Name="c" RenderMonospaced Arg[0]="C"
|   | |-TextComment 0x5555d4c2cd20 <col:64, col:72> Text=" as their"
|   | |-TextComment 0x5555d4c2cd40 <line:3086:3, col:60> Text=" semantic context, while the lexical context of the first "
|   | |-InlineCommandComment 0x5555d4c2cd80 <col:61, col:62> Name="c" RenderMonospaced Arg[0]="C::f"
|   | |-TextComment 0x5555d4c2cda0 <col:68, col:71> Text=" is "
|   | |-InlineCommandComment 0x5555d4c2cde0 <col:72, col:73> Name="c" RenderMonospaced Arg[0]="C"
|   | |-TextComment 0x5555d4c2ce00 <line:3087:3, col:41> Text=" and the lexical context of the second "
|   | |-InlineCommandComment 0x5555d4c2ce40 <col:42, col:43> Name="c" RenderMonospaced Arg[0]="C::f"
|   | `-TextComment 0x5555d4c2ce60 <col:49, col:73> Text=" is the translation unit."
|   `-ParagraphComment 0x5555d4c2cf30 <line:3089:3, col:72>
|     `-TextComment 0x5555d4c2cf00 <col:3, col:72> Text=" For global declarations, the semantic parent is the translation unit."
|-FunctionDecl 0x5555d4b9ccf8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:3127:69> col:25 clang_getCursorLexicalParent 'CXCursor (CXCursor)'
| |-ParmVarDecl 0x5555d4b9cc68 <col:54, col:63> col:63 cursor 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4b9cda8 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c2d940 </workspace/clang-c/Index.h:3094:3, line:3125:24>
|   |-ParagraphComment 0x5555d4c2d030 <line:3094:3, col:52>
|   | `-TextComment 0x5555d4c2d000 <col:3, col:52> Text=" Determine the lexical parent of the given cursor."
|   |-ParagraphComment 0x5555d4c2d1f0 <line:3096:3, line:3100:53>
|   | |-TextComment 0x5555d4c2d050 <line:3096:3, col:67> Text=" The lexical parent of a cursor is the cursor in which the given "
|   | |-InlineCommandComment 0x5555d4c2d090 <col:68, col:69> Name="p" RenderMonospaced Arg[0]="cursor"
|   | |-TextComment 0x5555d4c2d0b0 <line:3097:3, col:80> Text=" was actually written. For many declarations, the lexical and semantic parents"
|   | |-TextComment 0x5555d4c2d0d0 <line:3098:3, col:53> Text=" are equivalent (the semantic parent is returned by"
|   | |-TextComment 0x5555d4c2d0f0 <line:3099:3> Text=" "
|   | |-InlineCommandComment 0x5555d4c2d150 <col:4, col:5> Name="c" RenderMonospaced Arg[0]="clang_getCursorSemanticParent())."
|   | |-TextComment 0x5555d4c2d170 <col:40, col:73> Text=" They diverge when declarations or"
|   | `-TextComment 0x5555d4c2d190 <line:3100:3, col:53> Text=" definitions are provided out-of-line. For example:"
|   |-ParagraphComment 0x5555d4c2d240 <line:3102:3>
|   | `-TextComment 0x5555d4c2d210 <col:3> Text=" "
|   |-VerbatimBlockComment 0x5555d4c2d260 <col:4, col:9> Name="code" CloseName="endcode"
|   | |-VerbatimBlockLineComment 0x5555d4c2d2b0 <line:3103:3, col:13> Text=" class C {"
|   | |-VerbatimBlockLineComment 0x5555d4c2d2d0 <line:3104:3, col:14> Text="  void f();"
|   | |-VerbatimBlockLineComment 0x5555d4c2d2f0 <line:3105:3, col:6> Text=" };"
|   | |-VerbatimBlockLineComment 0x5555d4c2d310 <line:3106:3> Text=""
|   | `-VerbatimBlockLineComment 0x5555d4c2d330 <line:3107:3, col:19> Text=" void C::f() { }"
|   |-ParagraphComment 0x5555d4c2d5d0 <line:3110:3, line:3118:68>
|   | |-TextComment 0x5555d4c2d380 <line:3110:3, col:36> Text=" In the out-of-line definition of "
|   | |-InlineCommandComment 0x5555d4c2d3c0 <col:37, col:38> Name="c" RenderMonospaced Arg[0]="C::f,"
|   | |-TextComment 0x5555d4c2d3e0 <col:45, col:67> Text=" the semantic parent is"
|   | |-TextComment 0x5555d4c2d400 <line:3111:3, col:13> Text=" the class "
|   | |-InlineCommandComment 0x5555d4c2d440 <col:14, col:15> Name="c" RenderMonospaced Arg[0]="C,"
|   | |-TextComment 0x5555d4c2d460 <col:19, col:76> Text=" of which this function is a member. The lexical parent is"
|   | |-TextComment 0x5555d4c2d480 <line:3112:3, col:78> Text=" the place where the declaration actually occurs in the source code; in this"
|   | |-TextComment 0x5555d4c2d4a0 <line:3113:3, col:71> Text=" case, the definition occurs in the translation unit. In general, the"
|   | |-TextComment 0x5555d4c2d4c0 <line:3114:3, col:79> Text=" lexical parent for a given entity can change without affecting the semantics"
|   | |-TextComment 0x5555d4c2d4e0 <line:3115:3, col:74> Text=" of the program, and the lexical parent of different declarations of the"
|   | |-TextComment 0x5555d4c2d500 <line:3116:3, col:79> Text=" same entity may be different. Changing the semantic parent of a declaration,"
|   | |-TextComment 0x5555d4c2d520 <line:3117:3, col:78> Text=" on the other hand, can have a major impact on semantics, and redeclarations"
|   | `-TextComment 0x5555d4c2d540 <line:3118:3, col:68> Text=" of a particular entity should all have the same semantic context."
|   |-ParagraphComment 0x5555d4c2d870 <line:3120:3, line:3122:73>
|   | |-TextComment 0x5555d4c2d5f0 <line:3120:3, col:46> Text=" In the example above, both declarations of "
|   | |-InlineCommandComment 0x5555d4c2d630 <col:47, col:48> Name="c" RenderMonospaced Arg[0]="C::f"
|   | |-TextComment 0x5555d4c2d650 <col:54, col:59> Text=" have "
|   | |-InlineCommandComment 0x5555d4c2d690 <col:60, col:61> Name="c" RenderMonospaced Arg[0]="C"
|   | |-TextComment 0x5555d4c2d6b0 <col:64, col:72> Text=" as their"
|   | |-TextComment 0x5555d4c2d6d0 <line:3121:3, col:60> Text=" semantic context, while the lexical context of the first "
|   | |-InlineCommandComment 0x5555d4c2d710 <col:61, col:62> Name="c" RenderMonospaced Arg[0]="C::f"
|   | |-TextComment 0x5555d4c2d730 <col:68, col:71> Text=" is "
|   | |-InlineCommandComment 0x5555d4c2d770 <col:72, col:73> Name="c" RenderMonospaced Arg[0]="C"
|   | |-TextComment 0x5555d4c2d790 <line:3122:3, col:41> Text=" and the lexical context of the second "
|   | |-InlineCommandComment 0x5555d4c2d7d0 <col:42, col:43> Name="c" RenderMonospaced Arg[0]="C::f"
|   | `-TextComment 0x5555d4c2d7f0 <col:49, col:73> Text=" is the translation unit."
|   `-ParagraphComment 0x5555d4c2d8e0 <line:3124:3, line:3125:24>
|     |-TextComment 0x5555d4c2d890 <line:3124:3, col:70> Text=" For declarations written in the global scope, the lexical parent is"
|     `-TextComment 0x5555d4c2d8b0 <line:3125:3, col:24> Text=" the translation unit."
|-FunctionDecl 0x5555d4b9d160 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:3174:72> line:3172:21 clang_getOverriddenCursors 'void (CXCursor, CXCursor **, unsigned int *)'
| |-ParmVarDecl 0x5555d4b9ce58 <col:48, col:57> col:57 cursor 'CXCursor':'CXCursor'
| |-ParmVarDecl 0x5555d4b9cf90 <line:3173:48, col:59> col:59 overridden 'CXCursor **'
| |-ParmVarDecl 0x5555d4b9d010 <line:3174:48, col:58> col:58 num_overridden 'unsigned int *'
| |-VisibilityAttr 0x5555d4b9d220 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c2e390 </workspace/clang-c/Index.h:3130:3, line:3171:1>
|   |-ParagraphComment 0x5555d4c2da00 <line:3130:3, line:3131:10>
|   | |-TextComment 0x5555d4c2d9b0 <line:3130:3, col:64> Text=" Determine the set of methods that are overridden by the given"
|   | `-TextComment 0x5555d4c2d9d0 <line:3131:3, col:10> Text=" method."
|   |-ParagraphComment 0x5555d4c2db90 <line:3133:3, line:3141:41>
|   | |-TextComment 0x5555d4c2da20 <line:3133:3, col:70> Text=" In both Objective-C and C++, a method (aka virtual member function,"
|   | |-TextComment 0x5555d4c2da40 <line:3134:3, col:61> Text=" in C++) can override a virtual method in a base class. For"
|   | |-TextComment 0x5555d4c2da60 <line:3135:3, col:70> Text=" Objective-C, a method is said to override any method in the class's"
|   | |-TextComment 0x5555d4c2da80 <line:3136:3, col:77> Text=" base class, its protocols, or its categories' protocols, that has the same"
|   | |-TextComment 0x5555d4c2daa0 <line:3137:3, col:56> Text=" selector and is of the same kind (class or instance)."
|   | |-TextComment 0x5555d4c2dac0 <line:3138:3, col:76> Text=" If no such method exists, the search continues to the class's superclass,"
|   | |-TextComment 0x5555d4c2dae0 <line:3139:3, col:77> Text=" its protocols, and its categories, and so on. A method from an Objective-C"
|   | |-TextComment 0x5555d4c2db00 <line:3140:3, col:67> Text=" implementation is considered to override the same methods as its"
|   | `-TextComment 0x5555d4c2db20 <line:3141:3, col:41> Text=" corresponding method in the interface."
|   |-ParagraphComment 0x5555d4c2dc80 <line:3143:3, line:3147:16>
|   | |-TextComment 0x5555d4c2dbb0 <line:3143:3, col:66> Text=" For C++, a virtual member function overrides any virtual member"
|   | |-TextComment 0x5555d4c2dbd0 <line:3144:3, col:59> Text=" function with the same signature that occurs in its base"
|   | |-TextComment 0x5555d4c2dbf0 <line:3145:3, col:68> Text=" classes. With multiple inheritance, a virtual member function can"
|   | |-TextComment 0x5555d4c2dc10 <line:3146:3, col:66> Text=" override several virtual member functions coming from different"
|   | `-TextComment 0x5555d4c2dc30 <line:3147:3, col:16> Text=" base classes."
|   |-ParagraphComment 0x5555d4c2de00 <line:3149:3, line:3156:56>
|   | |-TextComment 0x5555d4c2dca0 <line:3149:3, col:66> Text=" In all cases, this function determines the immediate overridden"
|   | |-TextComment 0x5555d4c2dcc0 <line:3150:3, col:69> Text=" method, rather than all of the overridden methods. For example, if"
|   | |-TextComment 0x5555d4c2dce0 <line:3151:3, col:69> Text=" a method is originally declared in a class A, then overridden in B"
|   | |-TextComment 0x5555d4c2dd00 <line:3152:3, col:69> Text=" (which in inherits from A) and also in C (which inherited from B),"
|   | |-TextComment 0x5555d4c2dd20 <line:3153:3, col:67> Text=" then the only overridden method returned from this function when"
|   | |-TextComment 0x5555d4c2dd60 <line:3154:3, col:64> Text=" invoked on C's method will be B's method. The client may then"
|   | |-TextComment 0x5555d4c2dd80 <line:3155:3, col:68> Text=" invoke this function again, given the previously-found overridden"
|   | `-TextComment 0x5555d4c2dda0 <line:3156:3, col:56> Text=" methods, to map out the complete method-override set."
|   |-ParagraphComment 0x5555d4c2de50 <line:3158:3>
|   | `-TextComment 0x5555d4c2de20 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c2de70 <col:4, line:3160:20> [in] implicitly Param="cursor" ParamIndex=0
|   | `-ParagraphComment 0x5555d4c2df50 <line:3158:17, line:3160:20>
|   |   |-TextComment 0x5555d4c2ded0 <line:3158:17, col:60> Text=" A cursor representing an Objective-C or C++"
|   |   |-TextComment 0x5555d4c2def0 <line:3159:3, col:65> Text=" method. This routine will compute the set of methods that this"
|   |   `-TextComment 0x5555d4c2df10 <line:3160:3, col:20> Text=" method overrides."
|   |-ParagraphComment 0x5555d4c2dfa0 <line:3162:3>
|   | `-TextComment 0x5555d4c2df70 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c2dfc0 <col:4, line:3166:5> [in] implicitly Param="overridden" ParamIndex=1
|   | `-ParagraphComment 0x5555d4c2e150 <line:3162:21, line:3166:5>
|   |   |-TextComment 0x5555d4c2e020 <line:3162:21, col:68> Text=" A pointer whose pointee will be replaced with a"
|   |   |-TextComment 0x5555d4c2e040 <line:3163:3, col:69> Text=" pointer to an array of cursors, representing the set of overridden"
|   |   |-TextComment 0x5555d4c2e060 <line:3164:3, col:67> Text=" methods. If there are no overridden methods, the pointee will be"
|   |   |-TextComment 0x5555d4c2e080 <line:3165:3, col:55> Text=" set to NULL. The pointee must be freed via a call to"
|   |   |-TextComment 0x5555d4c2e0a0 <line:3166:3> Text=" "
|   |   `-InlineCommandComment 0x5555d4c2e100 <col:4, col:5> Name="c" RenderMonospaced Arg[0]="clang_disposeOverriddenCursors()."
|   |-ParagraphComment 0x5555d4c2e1a0 <line:3168:3>
|   | `-TextComment 0x5555d4c2e170 <col:3> Text=" "
|   `-ParamCommandComment 0x5555d4c2e1c0 <col:4, line:3171:1> [in] implicitly Param="num_overridden" ParamIndex=2
|     `-ParagraphComment 0x5555d4c2e320 <line:3168:25, line:3171:1>
|       |-TextComment 0x5555d4c2e220 <line:3168:25, col:62> Text=" A pointer to the number of overridden"
|       |-TextComment 0x5555d4c2e240 <line:3169:3, col:70> Text=" functions, will be set to the number of overridden functions in the"
|       |-TextComment 0x5555d4c2e260 <line:3170:3, col:23> Text=" array pointed to by "
|       |-InlineCommandComment 0x5555d4c2e2b0 <col:24, col:25> Name="p" RenderMonospaced Arg[0]="overridden."
|       `-TextComment 0x5555d4c2e2d0 <line:3171:1> Text=" "
|-FunctionDecl 0x5555d4b9d3d8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:3180:72> col:21 clang_disposeOverriddenCursors 'void (CXCursor *)'
| |-ParmVarDecl 0x5555d4b9d2e0 <col:52, col:62> col:62 overridden 'CXCursor *'
| |-VisibilityAttr 0x5555d4b9d488 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c2e4f0 </workspace/clang-c/Index.h:3177:3, line:3179:1>
|   `-ParagraphComment 0x5555d4c2e4c0 <line:3177:3, line:3179:1>
|     |-TextComment 0x5555d4c2e400 <line:3177:3, col:50> Text=" Free the set of overridden cursors returned by "
|     |-InlineCommandComment 0x5555d4c2e460 <col:51, col:52> Name="c" RenderMonospaced Arg[0]="clang_getOverriddenCursors()."
|     `-TextComment 0x5555d4c2e480 <line:3179:1> Text=" "
|-FunctionDecl 0x5555d4b9d628 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:3186:60> col:23 clang_getIncludedFile 'CXFile (CXCursor)'
| |-ParmVarDecl 0x5555d4b9d538 <col:45, col:54> col:54 cursor 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4b9d6d8 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c2e5e0 </workspace/clang-c/Index.h:3183:3, line:3184:10>
|   `-ParagraphComment 0x5555d4c2e5b0 <line:3183:3, line:3184:10>
|     |-TextComment 0x5555d4c2e560 <line:3183:3, col:70> Text=" Retrieve the file that is included by the given inclusion directive"
|     `-TextComment 0x5555d4c2e580 <line:3184:3, col:10> Text=" cursor."
|-FunctionDecl 0x5555d4b9d978 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:3218:76> col:25 clang_getCursor 'CXCursor (CXTranslationUnit, CXSourceLocation)'
| |-ParmVarDecl 0x5555d4b9d7e8 <col:41> col:58 'CXTranslationUnit':'struct CXTranslationUnitImpl *'
| |-ParmVarDecl 0x5555d4b9d860 <col:60> col:76 'CXSourceLocation':'CXSourceLocation'
| |-VisibilityAttr 0x5555d4b9da30 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c2e980 </workspace/clang-c/Index.h:3204:3, line:3216:48>
|   |-ParagraphComment 0x5555d4c2e6a0 <line:3204:3, line:3205:31>
|   | |-TextComment 0x5555d4c2e650 <line:3204:3, col:72> Text=" Map a source location to the cursor that describes the entity at that"
|   | `-TextComment 0x5555d4c2e670 <line:3205:3, col:31> Text=" location in the source code."
|   |-ParagraphComment 0x5555d4c2e850 <line:3207:3, line:3213:56>
|   | |-TextComment 0x5555d4c2e6c0 <line:3207:3, col:75> Text=" clang_getCursor() maps an arbitrary source location within a translation"
|   | |-TextComment 0x5555d4c2e6e0 <line:3208:3, col:74> Text=" unit down to the most specific cursor that describes the entity at that"
|   | |-TextComment 0x5555d4c2e700 <line:3209:3, col:46> Text=" location. For example, given an expression "
|   | |-InlineCommandComment 0x5555d4c2e740 <col:47, col:48> Name="c" RenderMonospaced Arg[0]="x"
|   | |-TextComment 0x5555d4c2e760 <col:51, col:64> Text=" + y, invoking"
|   | |-TextComment 0x5555d4c2e780 <line:3210:3, col:75> Text=" clang_getCursor() with a source location pointing to "x" will return the"
|   | |-TextComment 0x5555d4c2e7a0 <line:3211:3, col:75> Text=" cursor for "x"; similarly for "y". If the cursor points anywhere between"
|   | |-TextComment 0x5555d4c2e7c0 <line:3212:3, col:77> Text=" "x" or "y" (e.g., on the + or the whitespace around it), clang_getCursor()"
|   | `-TextComment 0x5555d4c2e7e0 <line:3213:3, col:56> Text=" will return a cursor referring to the "+" expression."
|   |-ParagraphComment 0x5555d4c2e8a0 <line:3215:3>
|   | `-TextComment 0x5555d4c2e870 <col:3> Text=" "
|   `-BlockCommandComment 0x5555d4c2e8c0 <col:4, line:3216:48> Name="returns"
|     `-ParagraphComment 0x5555d4c2e940 <line:3215:12, line:3216:48>
|       |-TextComment 0x5555d4c2e8f0 <line:3215:12, col:77> Text=" a cursor representing the entity at the given source location, or"
|       `-TextComment 0x5555d4c2e910 <line:3216:3, col:48> Text=" a NULL cursor if no such entity can be found."
|-FunctionDecl 0x5555d4b9dbd8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:3230:65> col:33 clang_getCursorLocation 'CXSourceLocation (CXCursor)'
| |-ParmVarDecl 0x5555d4b9dae8 <col:57> col:65 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4b9dc88 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c2eb60 </workspace/clang-c/Index.h:3221:3, line:3228:15>
|   |-ParagraphComment 0x5555d4c2ea40 <line:3221:3, line:3222:23>
|   | |-TextComment 0x5555d4c2e9f0 <line:3221:3, col:70> Text=" Retrieve the physical location of the source constructor referenced"
|   | `-TextComment 0x5555d4c2ea10 <line:3222:3, col:23> Text=" by the given cursor."
|   `-ParagraphComment 0x5555d4c2eb30 <line:3224:3, line:3228:15>
|     |-TextComment 0x5555d4c2ea60 <line:3224:3, col:78> Text=" The location of a declaration is typically the location of the name of that"
|     |-TextComment 0x5555d4c2ea80 <line:3225:3, col:71> Text=" declaration, where the name of that declaration would occur if it is"
|     |-TextComment 0x5555d4c2eaa0 <line:3226:3, col:72> Text=" unnamed, or some keyword that introduces that particular declaration."
|     |-TextComment 0x5555d4c2eac0 <line:3227:3, col:72> Text=" The location of a reference is where that reference occurs within the"
|     `-TextComment 0x5555d4c2eae0 <line:3228:3, col:15> Text=" source code."
|-FunctionDecl 0x5555d4b9de28 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:3243:60> col:30 clang_getCursorExtent 'CXSourceRange (CXCursor)'
| |-ParmVarDecl 0x5555d4b9dd38 <col:52> col:60 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4b9ded8 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c2ed60 </workspace/clang-c/Index.h:3233:3, line:3241:29>
|   |-ParagraphComment 0x5555d4c2ec20 <line:3233:3, line:3234:20>
|   | |-TextComment 0x5555d4c2ebd0 <line:3233:3, col:69> Text=" Retrieve the physical extent of the source construct referenced by"
|   | `-TextComment 0x5555d4c2ebf0 <line:3234:3, col:20> Text=" the given cursor."
|   `-ParagraphComment 0x5555d4c2ed30 <line:3236:3, line:3241:29>
|     |-TextComment 0x5555d4c2ec40 <line:3236:3, col:74> Text=" The extent of a cursor starts with the file/line/column pointing at the"
|     |-TextComment 0x5555d4c2ec60 <line:3237:3, col:76> Text=" first character within the source construct that the cursor refers to and"
|     |-TextComment 0x5555d4c2ec80 <line:3238:3, col:67> Text=" ends with the last character within that source construct. For a"
|     |-TextComment 0x5555d4c2eca0 <line:3239:3, col:74> Text=" declaration, the extent covers the declaration itself. For a reference,"
|     |-TextComment 0x5555d4c2ecc0 <line:3240:3, col:78> Text=" the extent covers the location of the reference (e.g., where the referenced"
|     `-TextComment 0x5555d4c2ece0 <line:3241:3, col:29> Text=" entity was actually used)."
|-EnumDecl 0x5555d4b9dfb8 <line:3258:1, line:3405:1> line:3258:6 CXTypeKind
| |-FullComment 0x5555d4c2ee30 <line:3256:3, col:29>
| | `-ParagraphComment 0x5555d4c2ee00 <col:3, col:29>
| |   `-TextComment 0x5555d4c2edd0 <col:3, col:29> Text=" Describes the kind of type"
| |-EnumConstantDecl 0x5555d4b9e0e8 <line:3262:3, col:20> col:3 CXType_Invalid 'int'
| | |-ConstantExpr 0x5555d4b9e0c8 <col:20> 'int'
| | | |-value: Int 0
| | | `-IntegerLiteral 0x5555d4b9e0a8 <col:20> 'int' 0
| | `-FullComment 0x5555d4c2ef00 <line:3260:5, col:67>
| |   `-ParagraphComment 0x5555d4c2eed0 <col:5, col:67>
| |     `-TextComment 0x5555d4c2eea0 <col:5, col:67> Text=" Represents an invalid type (e.g., where no type is available)."
| |-EnumConstantDecl 0x5555d4b9f1e8 <line:3268:3, col:22> col:3 CXType_Unexposed 'int'
| | |-ConstantExpr 0x5555d4b9f1c8 <col:22> 'int'
| | | |-value: Int 1
| | | `-IntegerLiteral 0x5555d4b9f1a8 <col:22> 'int' 1
| | `-FullComment 0x5555d4c2eff0 <line:3265:5, line:3266:15>
| |   `-ParagraphComment 0x5555d4c2efc0 <line:3265:5, line:3266:15>
| |     |-TextComment 0x5555d4c2ef70 <line:3265:5, col:55> Text=" A type whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c2ef90 <line:3266:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b9f278 <line:3271:3, col:17> col:3 referenced CXType_Void 'int'
| | |-ConstantExpr 0x5555d4b9f258 <col:17> 'int'
| | | |-value: Int 2
| | | `-IntegerLiteral 0x5555d4b9f238 <col:17> 'int' 2
| | `-FullComment 0x5555d4c2f0e0 <line:3265:5, line:3266:15>
| |   `-ParagraphComment 0x5555d4c2f0b0 <line:3265:5, line:3266:15>
| |     |-TextComment 0x5555d4c2f060 <line:3265:5, col:55> Text=" A type whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c2f080 <line:3266:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b9f308 <line:3272:3, col:17> col:3 CXType_Bool 'int'
| | |-ConstantExpr 0x5555d4b9f2e8 <col:17> 'int'
| | | |-value: Int 3
| | | `-IntegerLiteral 0x5555d4b9f2c8 <col:17> 'int' 3
| | `-FullComment 0x5555d4c2f1d0 <line:3265:5, line:3266:15>
| |   `-ParagraphComment 0x5555d4c2f1a0 <line:3265:5, line:3266:15>
| |     |-TextComment 0x5555d4c2f150 <line:3265:5, col:55> Text=" A type whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c2f170 <line:3266:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b9f398 <line:3273:3, col:19> col:3 CXType_Char_U 'int'
| | |-ConstantExpr 0x5555d4b9f378 <col:19> 'int'
| | | |-value: Int 4
| | | `-IntegerLiteral 0x5555d4b9f358 <col:19> 'int' 4
| | `-FullComment 0x5555d4c2f2c0 <line:3265:5, line:3266:15>
| |   `-ParagraphComment 0x5555d4c2f290 <line:3265:5, line:3266:15>
| |     |-TextComment 0x5555d4c2f240 <line:3265:5, col:55> Text=" A type whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c2f260 <line:3266:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b9f428 <line:3274:3, col:18> col:3 CXType_UChar 'int'
| | |-ConstantExpr 0x5555d4b9f408 <col:18> 'int'
| | | |-value: Int 5
| | | `-IntegerLiteral 0x5555d4b9f3e8 <col:18> 'int' 5
| | `-FullComment 0x5555d4c2f3b0 <line:3265:5, line:3266:15>
| |   `-ParagraphComment 0x5555d4c2f380 <line:3265:5, line:3266:15>
| |     |-TextComment 0x5555d4c2f330 <line:3265:5, col:55> Text=" A type whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c2f350 <line:3266:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b9f4b8 <line:3275:3, col:19> col:3 CXType_Char16 'int'
| | |-ConstantExpr 0x5555d4b9f498 <col:19> 'int'
| | | |-value: Int 6
| | | `-IntegerLiteral 0x5555d4b9f478 <col:19> 'int' 6
| | `-FullComment 0x5555d4c2f4a0 <line:3265:5, line:3266:15>
| |   `-ParagraphComment 0x5555d4c2f470 <line:3265:5, line:3266:15>
| |     |-TextComment 0x5555d4c2f420 <line:3265:5, col:55> Text=" A type whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c2f440 <line:3266:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b9f548 <line:3276:3, col:19> col:3 CXType_Char32 'int'
| | |-ConstantExpr 0x5555d4b9f528 <col:19> 'int'
| | | |-value: Int 7
| | | `-IntegerLiteral 0x5555d4b9f508 <col:19> 'int' 7
| | `-FullComment 0x5555d4c2f590 <line:3265:5, line:3266:15>
| |   `-ParagraphComment 0x5555d4c2f560 <line:3265:5, line:3266:15>
| |     |-TextComment 0x5555d4c2f510 <line:3265:5, col:55> Text=" A type whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c2f530 <line:3266:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b9f5d8 <line:3277:3, col:19> col:3 CXType_UShort 'int'
| | |-ConstantExpr 0x5555d4b9f5b8 <col:19> 'int'
| | | |-value: Int 8
| | | `-IntegerLiteral 0x5555d4b9f598 <col:19> 'int' 8
| | `-FullComment 0x5555d4c2f680 <line:3265:5, line:3266:15>
| |   `-ParagraphComment 0x5555d4c2f650 <line:3265:5, line:3266:15>
| |     |-TextComment 0x5555d4c2f600 <line:3265:5, col:55> Text=" A type whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c2f620 <line:3266:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b9f668 <line:3278:3, col:17> col:3 CXType_UInt 'int'
| | |-ConstantExpr 0x5555d4b9f648 <col:17> 'int'
| | | |-value: Int 9
| | | `-IntegerLiteral 0x5555d4b9f628 <col:17> 'int' 9
| | `-FullComment 0x5555d4c2f770 <line:3265:5, line:3266:15>
| |   `-ParagraphComment 0x5555d4c2f740 <line:3265:5, line:3266:15>
| |     |-TextComment 0x5555d4c2f6f0 <line:3265:5, col:55> Text=" A type whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c2f710 <line:3266:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b9f6f8 <line:3279:3, col:18> col:3 CXType_ULong 'int'
| | |-ConstantExpr 0x5555d4b9f6d8 <col:18> 'int'
| | | |-value: Int 10
| | | `-IntegerLiteral 0x5555d4b9f6b8 <col:18> 'int' 10
| | `-FullComment 0x5555d4c2f860 <line:3265:5, line:3266:15>
| |   `-ParagraphComment 0x5555d4c2f830 <line:3265:5, line:3266:15>
| |     |-TextComment 0x5555d4c2f7e0 <line:3265:5, col:55> Text=" A type whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c2f800 <line:3266:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b9f788 <line:3280:3, col:22> col:3 CXType_ULongLong 'int'
| | |-ConstantExpr 0x5555d4b9f768 <col:22> 'int'
| | | |-value: Int 11
| | | `-IntegerLiteral 0x5555d4b9f748 <col:22> 'int' 11
| | `-FullComment 0x5555d4c2f950 <line:3265:5, line:3266:15>
| |   `-ParagraphComment 0x5555d4c2f920 <line:3265:5, line:3266:15>
| |     |-TextComment 0x5555d4c2f8d0 <line:3265:5, col:55> Text=" A type whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c2f8f0 <line:3266:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b9f818 <line:3281:3, col:20> col:3 CXType_UInt128 'int'
| | |-ConstantExpr 0x5555d4b9f7f8 <col:20> 'int'
| | | |-value: Int 12
| | | `-IntegerLiteral 0x5555d4b9f7d8 <col:20> 'int' 12
| | `-FullComment 0x5555d4c2fa40 <line:3265:5, line:3266:15>
| |   `-ParagraphComment 0x5555d4c2fa10 <line:3265:5, line:3266:15>
| |     |-TextComment 0x5555d4c2f9c0 <line:3265:5, col:55> Text=" A type whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c2f9e0 <line:3266:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b9f8a8 <line:3282:3, col:19> col:3 CXType_Char_S 'int'
| | |-ConstantExpr 0x5555d4b9f888 <col:19> 'int'
| | | |-value: Int 13
| | | `-IntegerLiteral 0x5555d4b9f868 <col:19> 'int' 13
| | `-FullComment 0x5555d4c2fb30 <line:3265:5, line:3266:15>
| |   `-ParagraphComment 0x5555d4c2fb00 <line:3265:5, line:3266:15>
| |     |-TextComment 0x5555d4c2fab0 <line:3265:5, col:55> Text=" A type whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c2fad0 <line:3266:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b9f938 <line:3283:3, col:18> col:3 CXType_SChar 'int'
| | |-ConstantExpr 0x5555d4b9f918 <col:18> 'int'
| | | |-value: Int 14
| | | `-IntegerLiteral 0x5555d4b9f8f8 <col:18> 'int' 14
| | `-FullComment 0x5555d4c2fc20 <line:3265:5, line:3266:15>
| |   `-ParagraphComment 0x5555d4c2fbf0 <line:3265:5, line:3266:15>
| |     |-TextComment 0x5555d4c2fba0 <line:3265:5, col:55> Text=" A type whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c2fbc0 <line:3266:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b9f9c8 <line:3284:3, col:18> col:3 CXType_WChar 'int'
| | |-ConstantExpr 0x5555d4b9f9a8 <col:18> 'int'
| | | |-value: Int 15
| | | `-IntegerLiteral 0x5555d4b9f988 <col:18> 'int' 15
| | `-FullComment 0x5555d4c2fd10 <line:3265:5, line:3266:15>
| |   `-ParagraphComment 0x5555d4c2fce0 <line:3265:5, line:3266:15>
| |     |-TextComment 0x5555d4c2fc90 <line:3265:5, col:55> Text=" A type whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c2fcb0 <line:3266:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b9fa58 <line:3285:3, col:18> col:3 CXType_Short 'int'
| | |-ConstantExpr 0x5555d4b9fa38 <col:18> 'int'
| | | |-value: Int 16
| | | `-IntegerLiteral 0x5555d4b9fa18 <col:18> 'int' 16
| | `-FullComment 0x5555d4c2fe30 <line:3265:5, line:3266:15>
| |   `-ParagraphComment 0x5555d4c2fe00 <line:3265:5, line:3266:15>
| |     |-TextComment 0x5555d4c2fdb0 <line:3265:5, col:55> Text=" A type whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c2fdd0 <line:3266:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b9fae8 <line:3286:3, col:16> col:3 CXType_Int 'int'
| | |-ConstantExpr 0x5555d4b9fac8 <col:16> 'int'
| | | |-value: Int 17
| | | `-IntegerLiteral 0x5555d4b9faa8 <col:16> 'int' 17
| | `-FullComment 0x5555d4c2ff20 <line:3265:5, line:3266:15>
| |   `-ParagraphComment 0x5555d4c2fef0 <line:3265:5, line:3266:15>
| |     |-TextComment 0x5555d4c2fea0 <line:3265:5, col:55> Text=" A type whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c2fec0 <line:3266:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b9fb78 <line:3287:3, col:17> col:3 CXType_Long 'int'
| | |-ConstantExpr 0x5555d4b9fb58 <col:17> 'int'
| | | |-value: Int 18
| | | `-IntegerLiteral 0x5555d4b9fb38 <col:17> 'int' 18
| | `-FullComment 0x5555d4c30010 <line:3265:5, line:3266:15>
| |   `-ParagraphComment 0x5555d4c2ffe0 <line:3265:5, line:3266:15>
| |     |-TextComment 0x5555d4c2ff90 <line:3265:5, col:55> Text=" A type whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c2ffb0 <line:3266:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b9fc08 <line:3288:3, col:21> col:3 CXType_LongLong 'int'
| | |-ConstantExpr 0x5555d4b9fbe8 <col:21> 'int'
| | | |-value: Int 19
| | | `-IntegerLiteral 0x5555d4b9fbc8 <col:21> 'int' 19
| | `-FullComment 0x5555d4c30100 <line:3265:5, line:3266:15>
| |   `-ParagraphComment 0x5555d4c300d0 <line:3265:5, line:3266:15>
| |     |-TextComment 0x5555d4c30080 <line:3265:5, col:55> Text=" A type whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c300a0 <line:3266:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b9fc98 <line:3289:3, col:19> col:3 CXType_Int128 'int'
| | |-ConstantExpr 0x5555d4b9fc78 <col:19> 'int'
| | | |-value: Int 20
| | | `-IntegerLiteral 0x5555d4b9fc58 <col:19> 'int' 20
| | `-FullComment 0x5555d4c301f0 <line:3265:5, line:3266:15>
| |   `-ParagraphComment 0x5555d4c301c0 <line:3265:5, line:3266:15>
| |     |-TextComment 0x5555d4c30170 <line:3265:5, col:55> Text=" A type whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c30190 <line:3266:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b9fd28 <line:3290:3, col:18> col:3 CXType_Float 'int'
| | |-ConstantExpr 0x5555d4b9fd08 <col:18> 'int'
| | | |-value: Int 21
| | | `-IntegerLiteral 0x5555d4b9fce8 <col:18> 'int' 21
| | `-FullComment 0x5555d4c302e0 <line:3265:5, line:3266:15>
| |   `-ParagraphComment 0x5555d4c302b0 <line:3265:5, line:3266:15>
| |     |-TextComment 0x5555d4c30260 <line:3265:5, col:55> Text=" A type whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c30280 <line:3266:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b9fdb8 <line:3291:3, col:19> col:3 CXType_Double 'int'
| | |-ConstantExpr 0x5555d4b9fd98 <col:19> 'int'
| | | |-value: Int 22
| | | `-IntegerLiteral 0x5555d4b9fd78 <col:19> 'int' 22
| | `-FullComment 0x5555d4c303d0 <line:3265:5, line:3266:15>
| |   `-ParagraphComment 0x5555d4c303a0 <line:3265:5, line:3266:15>
| |     |-TextComment 0x5555d4c30350 <line:3265:5, col:55> Text=" A type whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c30370 <line:3266:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b9fe48 <line:3292:3, col:23> col:3 CXType_LongDouble 'int'
| | |-ConstantExpr 0x5555d4b9fe28 <col:23> 'int'
| | | |-value: Int 23
| | | `-IntegerLiteral 0x5555d4b9fe08 <col:23> 'int' 23
| | `-FullComment 0x5555d4c304c0 <line:3265:5, line:3266:15>
| |   `-ParagraphComment 0x5555d4c30490 <line:3265:5, line:3266:15>
| |     |-TextComment 0x5555d4c30440 <line:3265:5, col:55> Text=" A type whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c30460 <line:3266:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b9fed8 <line:3293:3, col:20> col:3 CXType_NullPtr 'int'
| | |-ConstantExpr 0x5555d4b9feb8 <col:20> 'int'
| | | |-value: Int 24
| | | `-IntegerLiteral 0x5555d4b9fe98 <col:20> 'int' 24
| | `-FullComment 0x5555d4c305b0 <line:3265:5, line:3266:15>
| |   `-ParagraphComment 0x5555d4c30580 <line:3265:5, line:3266:15>
| |     |-TextComment 0x5555d4c30530 <line:3265:5, col:55> Text=" A type whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c30550 <line:3266:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b9ff68 <line:3294:3, col:21> col:3 CXType_Overload 'int'
| | |-ConstantExpr 0x5555d4b9ff48 <col:21> 'int'
| | | |-value: Int 25
| | | `-IntegerLiteral 0x5555d4b9ff28 <col:21> 'int' 25
| | `-FullComment 0x5555d4c306a0 <line:3265:5, line:3266:15>
| |   `-ParagraphComment 0x5555d4c30670 <line:3265:5, line:3266:15>
| |     |-TextComment 0x5555d4c30620 <line:3265:5, col:55> Text=" A type whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c30640 <line:3266:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4b9fff8 <line:3295:3, col:22> col:3 CXType_Dependent 'int'
| | |-ConstantExpr 0x5555d4b9ffd8 <col:22> 'int'
| | | |-value: Int 26
| | | `-IntegerLiteral 0x5555d4b9ffb8 <col:22> 'int' 26
| | `-FullComment 0x5555d4c30790 <line:3265:5, line:3266:15>
| |   `-ParagraphComment 0x5555d4c30760 <line:3265:5, line:3266:15>
| |     |-TextComment 0x5555d4c30710 <line:3265:5, col:55> Text=" A type whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c30730 <line:3266:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4ba0088 <line:3296:3, col:19> col:3 CXType_ObjCId 'int'
| | |-ConstantExpr 0x5555d4ba0068 <col:19> 'int'
| | | |-value: Int 27
| | | `-IntegerLiteral 0x5555d4ba0048 <col:19> 'int' 27
| | `-FullComment 0x5555d4c30880 <line:3265:5, line:3266:15>
| |   `-ParagraphComment 0x5555d4c30850 <line:3265:5, line:3266:15>
| |     |-TextComment 0x5555d4c30800 <line:3265:5, col:55> Text=" A type whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c30820 <line:3266:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4ba0118 <line:3297:3, col:22> col:3 CXType_ObjCClass 'int'
| | |-ConstantExpr 0x5555d4ba00f8 <col:22> 'int'
| | | |-value: Int 28
| | | `-IntegerLiteral 0x5555d4ba00d8 <col:22> 'int' 28
| | `-FullComment 0x5555d4c30970 <line:3265:5, line:3266:15>
| |   `-ParagraphComment 0x5555d4c30940 <line:3265:5, line:3266:15>
| |     |-TextComment 0x5555d4c308f0 <line:3265:5, col:55> Text=" A type whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c30910 <line:3266:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4ba01d0 <line:3298:3, col:20> col:3 CXType_ObjCSel 'int'
| | |-ConstantExpr 0x5555d4ba01b0 <col:20> 'int'
| | | |-value: Int 29
| | | `-IntegerLiteral 0x5555d4ba0190 <col:20> 'int' 29
| | `-FullComment 0x5555d4c30a60 <line:3265:5, line:3266:15>
| |   `-ParagraphComment 0x5555d4c30a30 <line:3265:5, line:3266:15>
| |     |-TextComment 0x5555d4c309e0 <line:3265:5, col:55> Text=" A type whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c30a00 <line:3266:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4ba0260 <line:3299:3, col:21> col:3 CXType_Float128 'int'
| | |-ConstantExpr 0x5555d4ba0240 <col:21> 'int'
| | | |-value: Int 30
| | | `-IntegerLiteral 0x5555d4ba0220 <col:21> 'int' 30
| | `-FullComment 0x5555d4c30b50 <line:3265:5, line:3266:15>
| |   `-ParagraphComment 0x5555d4c30b20 <line:3265:5, line:3266:15>
| |     |-TextComment 0x5555d4c30ad0 <line:3265:5, col:55> Text=" A type whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c30af0 <line:3266:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4ba02f0 <line:3300:3, col:17> col:3 CXType_Half 'int'
| | |-ConstantExpr 0x5555d4ba02d0 <col:17> 'int'
| | | |-value: Int 31
| | | `-IntegerLiteral 0x5555d4ba02b0 <col:17> 'int' 31
| | `-FullComment 0x5555d4c30c40 <line:3265:5, line:3266:15>
| |   `-ParagraphComment 0x5555d4c30c10 <line:3265:5, line:3266:15>
| |     |-TextComment 0x5555d4c30bc0 <line:3265:5, col:55> Text=" A type whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c30be0 <line:3266:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4ba0380 <line:3301:3, col:20> col:3 CXType_Float16 'int'
| | |-ConstantExpr 0x5555d4ba0360 <col:20> 'int'
| | | |-value: Int 32
| | | `-IntegerLiteral 0x5555d4ba0340 <col:20> 'int' 32
| | `-FullComment 0x5555d4c30d30 <line:3265:5, line:3266:15>
| |   `-ParagraphComment 0x5555d4c30d00 <line:3265:5, line:3266:15>
| |     |-TextComment 0x5555d4c30cb0 <line:3265:5, col:55> Text=" A type whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c30cd0 <line:3266:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4ba0410 <line:3302:3, col:23> col:3 CXType_ShortAccum 'int'
| | |-ConstantExpr 0x5555d4ba03f0 <col:23> 'int'
| | | |-value: Int 33
| | | `-IntegerLiteral 0x5555d4ba03d0 <col:23> 'int' 33
| | `-FullComment 0x5555d4c30e20 <line:3265:5, line:3266:15>
| |   `-ParagraphComment 0x5555d4c30df0 <line:3265:5, line:3266:15>
| |     |-TextComment 0x5555d4c30da0 <line:3265:5, col:55> Text=" A type whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c30dc0 <line:3266:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4ba04a0 <line:3303:3, col:18> col:3 CXType_Accum 'int'
| | |-ConstantExpr 0x5555d4ba0480 <col:18> 'int'
| | | |-value: Int 34
| | | `-IntegerLiteral 0x5555d4ba0460 <col:18> 'int' 34
| | `-FullComment 0x5555d4c30f10 <line:3265:5, line:3266:15>
| |   `-ParagraphComment 0x5555d4c30ee0 <line:3265:5, line:3266:15>
| |     |-TextComment 0x5555d4c30e90 <line:3265:5, col:55> Text=" A type whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c30eb0 <line:3266:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4ba0530 <line:3304:3, col:22> col:3 CXType_LongAccum 'int'
| | |-ConstantExpr 0x5555d4ba0510 <col:22> 'int'
| | | |-value: Int 35
| | | `-IntegerLiteral 0x5555d4ba04f0 <col:22> 'int' 35
| | `-FullComment 0x5555d4c31000 <line:3265:5, line:3266:15>
| |   `-ParagraphComment 0x5555d4c30fd0 <line:3265:5, line:3266:15>
| |     |-TextComment 0x5555d4c30f80 <line:3265:5, col:55> Text=" A type whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c30fa0 <line:3266:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4ba05c0 <line:3305:3, col:24> col:3 CXType_UShortAccum 'int'
| | |-ConstantExpr 0x5555d4ba05a0 <col:24> 'int'
| | | |-value: Int 36
| | | `-IntegerLiteral 0x5555d4ba0580 <col:24> 'int' 36
| | `-FullComment 0x5555d4c310f0 <line:3265:5, line:3266:15>
| |   `-ParagraphComment 0x5555d4c310c0 <line:3265:5, line:3266:15>
| |     |-TextComment 0x5555d4c31070 <line:3265:5, col:55> Text=" A type whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c31090 <line:3266:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4ba0650 <line:3306:3, col:19> col:3 CXType_UAccum 'int'
| | |-ConstantExpr 0x5555d4ba0630 <col:19> 'int'
| | | |-value: Int 37
| | | `-IntegerLiteral 0x5555d4ba0610 <col:19> 'int' 37
| | `-FullComment 0x5555d4c311e0 <line:3265:5, line:3266:15>
| |   `-ParagraphComment 0x5555d4c311b0 <line:3265:5, line:3266:15>
| |     |-TextComment 0x5555d4c31160 <line:3265:5, col:55> Text=" A type whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c31180 <line:3266:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4ba06e0 <line:3307:3, col:23> col:3 CXType_ULongAccum 'int'
| | |-ConstantExpr 0x5555d4ba06c0 <col:23> 'int'
| | | |-value: Int 38
| | | `-IntegerLiteral 0x5555d4ba06a0 <col:23> 'int' 38
| | `-FullComment 0x5555d4c312d0 <line:3265:5, line:3266:15>
| |   `-ParagraphComment 0x5555d4c312a0 <line:3265:5, line:3266:15>
| |     |-TextComment 0x5555d4c31250 <line:3265:5, col:55> Text=" A type whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c31270 <line:3266:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4ba0770 <line:3308:3, col:21> col:3 CXType_BFloat16 'int'
| | |-ConstantExpr 0x5555d4ba0750 <col:21> 'int'
| | | |-value: Int 39
| | | `-IntegerLiteral 0x5555d4ba0730 <col:21> 'int' 39
| | `-FullComment 0x5555d4c313c0 <line:3265:5, line:3266:15>
| |   `-ParagraphComment 0x5555d4c31390 <line:3265:5, line:3266:15>
| |     |-TextComment 0x5555d4c31340 <line:3265:5, col:55> Text=" A type whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c31360 <line:3266:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4ba0800 <line:3309:3, col:19> col:3 referenced CXType_Ibm128 'int'
| | |-ConstantExpr 0x5555d4ba07e0 <col:19> 'int'
| | | |-value: Int 40
| | | `-IntegerLiteral 0x5555d4ba07c0 <col:19> 'int' 40
| | `-FullComment 0x5555d4c314b0 <line:3265:5, line:3266:15>
| |   `-ParagraphComment 0x5555d4c31480 <line:3265:5, line:3266:15>
| |     |-TextComment 0x5555d4c31430 <line:3265:5, col:55> Text=" A type whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c31450 <line:3266:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4ba0890 <line:3310:3, col:25> col:3 CXType_FirstBuiltin 'int'
| | |-ConstantExpr 0x5555d4ba0870 <col:25> 'int'
| | | |-value: Int 2
| | | `-DeclRefExpr 0x5555d4ba0850 <col:25> 'int' EnumConstant 0x5555d4b9f278 'CXType_Void' 'int'
| | `-FullComment 0x5555d4c315a0 <line:3265:5, line:3266:15>
| |   `-ParagraphComment 0x5555d4c31570 <line:3265:5, line:3266:15>
| |     |-TextComment 0x5555d4c31520 <line:3265:5, col:55> Text=" A type whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c31540 <line:3266:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4ba0920 <line:3311:3, col:24> col:3 CXType_LastBuiltin 'int'
| | |-ConstantExpr 0x5555d4ba0900 <col:24> 'int'
| | | |-value: Int 40
| | | `-DeclRefExpr 0x5555d4ba08e0 <col:24> 'int' EnumConstant 0x5555d4ba0800 'CXType_Ibm128' 'int'
| | `-FullComment 0x5555d4c31690 <line:3265:5, line:3266:15>
| |   `-ParagraphComment 0x5555d4c31660 <line:3265:5, line:3266:15>
| |     |-TextComment 0x5555d4c31610 <line:3265:5, col:55> Text=" A type whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c31630 <line:3266:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4ba09b0 <line:3313:3, col:20> col:3 CXType_Complex 'int'
| | |-ConstantExpr 0x5555d4ba0990 <col:20> 'int'
| | | |-value: Int 100
| | | `-IntegerLiteral 0x5555d4ba0970 <col:20> 'int' 100
| | `-FullComment 0x5555d4c31780 <line:3265:5, line:3266:15>
| |   `-ParagraphComment 0x5555d4c31750 <line:3265:5, line:3266:15>
| |     |-TextComment 0x5555d4c31700 <line:3265:5, col:55> Text=" A type whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c31720 <line:3266:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4ba0a40 <line:3314:3, col:20> col:3 CXType_Pointer 'int'
| | |-ConstantExpr 0x5555d4ba0a20 <col:20> 'int'
| | | |-value: Int 101
| | | `-IntegerLiteral 0x5555d4ba0a00 <col:20> 'int' 101
| | `-FullComment 0x5555d4c31870 <line:3265:5, line:3266:15>
| |   `-ParagraphComment 0x5555d4c31840 <line:3265:5, line:3266:15>
| |     |-TextComment 0x5555d4c317f0 <line:3265:5, col:55> Text=" A type whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c31810 <line:3266:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4ba0ad0 <line:3315:3, col:25> col:3 CXType_BlockPointer 'int'
| | |-ConstantExpr 0x5555d4ba0ab0 <col:25> 'int'
| | | |-value: Int 102
| | | `-IntegerLiteral 0x5555d4ba0a90 <col:25> 'int' 102
| | `-FullComment 0x5555d4c31960 <line:3265:5, line:3266:15>
| |   `-ParagraphComment 0x5555d4c31930 <line:3265:5, line:3266:15>
| |     |-TextComment 0x5555d4c318e0 <line:3265:5, col:55> Text=" A type whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c31900 <line:3266:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4ba0b60 <line:3316:3, col:28> col:3 CXType_LValueReference 'int'
| | |-ConstantExpr 0x5555d4ba0b40 <col:28> 'int'
| | | |-value: Int 103
| | | `-IntegerLiteral 0x5555d4ba0b20 <col:28> 'int' 103
| | `-FullComment 0x5555d4c31a50 <line:3265:5, line:3266:15>
| |   `-ParagraphComment 0x5555d4c31a20 <line:3265:5, line:3266:15>
| |     |-TextComment 0x5555d4c319d0 <line:3265:5, col:55> Text=" A type whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c319f0 <line:3266:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4ba0bf0 <line:3317:3, col:28> col:3 CXType_RValueReference 'int'
| | |-ConstantExpr 0x5555d4ba0bd0 <col:28> 'int'
| | | |-value: Int 104
| | | `-IntegerLiteral 0x5555d4ba0bb0 <col:28> 'int' 104
| | `-FullComment 0x5555d4c31b40 <line:3265:5, line:3266:15>
| |   `-ParagraphComment 0x5555d4c31b10 <line:3265:5, line:3266:15>
| |     |-TextComment 0x5555d4c31ac0 <line:3265:5, col:55> Text=" A type whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c31ae0 <line:3266:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4ba0c80 <line:3318:3, col:19> col:3 CXType_Record 'int'
| | |-ConstantExpr 0x5555d4ba0c60 <col:19> 'int'
| | | |-value: Int 105
| | | `-IntegerLiteral 0x5555d4ba0c40 <col:19> 'int' 105
| | `-FullComment 0x5555d4c31c30 <line:3265:5, line:3266:15>
| |   `-ParagraphComment 0x5555d4c31c00 <line:3265:5, line:3266:15>
| |     |-TextComment 0x5555d4c31bb0 <line:3265:5, col:55> Text=" A type whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c31bd0 <line:3266:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4ba0d10 <line:3319:3, col:17> col:3 CXType_Enum 'int'
| | |-ConstantExpr 0x5555d4ba0cf0 <col:17> 'int'
| | | |-value: Int 106
| | | `-IntegerLiteral 0x5555d4ba0cd0 <col:17> 'int' 106
| | `-FullComment 0x5555d4c31d20 <line:3265:5, line:3266:15>
| |   `-ParagraphComment 0x5555d4c31cf0 <line:3265:5, line:3266:15>
| |     |-TextComment 0x5555d4c31ca0 <line:3265:5, col:55> Text=" A type whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c31cc0 <line:3266:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4ba0da0 <line:3320:3, col:20> col:3 CXType_Typedef 'int'
| | |-ConstantExpr 0x5555d4ba0d80 <col:20> 'int'
| | | |-value: Int 107
| | | `-IntegerLiteral 0x5555d4ba0d60 <col:20> 'int' 107
| | `-FullComment 0x5555d4c31e40 <line:3265:5, line:3266:15>
| |   `-ParagraphComment 0x5555d4c31e10 <line:3265:5, line:3266:15>
| |     |-TextComment 0x5555d4c31dc0 <line:3265:5, col:55> Text=" A type whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c31de0 <line:3266:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4ba0e30 <line:3321:3, col:26> col:3 CXType_ObjCInterface 'int'
| | |-ConstantExpr 0x5555d4ba0e10 <col:26> 'int'
| | | |-value: Int 108
| | | `-IntegerLiteral 0x5555d4ba0df0 <col:26> 'int' 108
| | `-FullComment 0x5555d4c31f30 <line:3265:5, line:3266:15>
| |   `-ParagraphComment 0x5555d4c31f00 <line:3265:5, line:3266:15>
| |     |-TextComment 0x5555d4c31eb0 <line:3265:5, col:55> Text=" A type whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c31ed0 <line:3266:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4ba0ec0 <line:3322:3, col:30> col:3 CXType_ObjCObjectPointer 'int'
| | |-ConstantExpr 0x5555d4ba0ea0 <col:30> 'int'
| | | |-value: Int 109
| | | `-IntegerLiteral 0x5555d4ba0e80 <col:30> 'int' 109
| | `-FullComment 0x5555d4c32020 <line:3265:5, line:3266:15>
| |   `-ParagraphComment 0x5555d4c31ff0 <line:3265:5, line:3266:15>
| |     |-TextComment 0x5555d4c31fa0 <line:3265:5, col:55> Text=" A type whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c31fc0 <line:3266:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4ba0f50 <line:3323:3, col:28> col:3 CXType_FunctionNoProto 'int'
| | |-ConstantExpr 0x5555d4ba0f30 <col:28> 'int'
| | | |-value: Int 110
| | | `-IntegerLiteral 0x5555d4ba0f10 <col:28> 'int' 110
| | `-FullComment 0x5555d4c32110 <line:3265:5, line:3266:15>
| |   `-ParagraphComment 0x5555d4c320e0 <line:3265:5, line:3266:15>
| |     |-TextComment 0x5555d4c32090 <line:3265:5, col:55> Text=" A type whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c320b0 <line:3266:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4ba0fe0 <line:3324:3, col:26> col:3 CXType_FunctionProto 'int'
| | |-ConstantExpr 0x5555d4ba0fc0 <col:26> 'int'
| | | |-value: Int 111
| | | `-IntegerLiteral 0x5555d4ba0fa0 <col:26> 'int' 111
| | `-FullComment 0x5555d4c32200 <line:3265:5, line:3266:15>
| |   `-ParagraphComment 0x5555d4c321d0 <line:3265:5, line:3266:15>
| |     |-TextComment 0x5555d4c32180 <line:3265:5, col:55> Text=" A type whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c321a0 <line:3266:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4ba1070 <line:3325:3, col:26> col:3 CXType_ConstantArray 'int'
| | |-ConstantExpr 0x5555d4ba1050 <col:26> 'int'
| | | |-value: Int 112
| | | `-IntegerLiteral 0x5555d4ba1030 <col:26> 'int' 112
| | `-FullComment 0x5555d4c322f0 <line:3265:5, line:3266:15>
| |   `-ParagraphComment 0x5555d4c322c0 <line:3265:5, line:3266:15>
| |     |-TextComment 0x5555d4c32270 <line:3265:5, col:55> Text=" A type whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c32290 <line:3266:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4ba1100 <line:3326:3, col:19> col:3 CXType_Vector 'int'
| | |-ConstantExpr 0x5555d4ba10e0 <col:19> 'int'
| | | |-value: Int 113
| | | `-IntegerLiteral 0x5555d4ba10c0 <col:19> 'int' 113
| | `-FullComment 0x5555d4c323e0 <line:3265:5, line:3266:15>
| |   `-ParagraphComment 0x5555d4c323b0 <line:3265:5, line:3266:15>
| |     |-TextComment 0x5555d4c32360 <line:3265:5, col:55> Text=" A type whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c32380 <line:3266:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4ba6f20 <line:3327:3, col:28> col:3 CXType_IncompleteArray 'int'
| | |-ConstantExpr 0x5555d4ba1170 <col:28> 'int'
| | | |-value: Int 114
| | | `-IntegerLiteral 0x5555d4ba1150 <col:28> 'int' 114
| | `-FullComment 0x5555d4c324d0 <line:3265:5, line:3266:15>
| |   `-ParagraphComment 0x5555d4c324a0 <line:3265:5, line:3266:15>
| |     |-TextComment 0x5555d4c32450 <line:3265:5, col:55> Text=" A type whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c32470 <line:3266:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4ba6fb0 <line:3328:3, col:26> col:3 CXType_VariableArray 'int'
| | |-ConstantExpr 0x5555d4ba6f90 <col:26> 'int'
| | | |-value: Int 115
| | | `-IntegerLiteral 0x5555d4ba6f70 <col:26> 'int' 115
| | `-FullComment 0x5555d4c325c0 <line:3265:5, line:3266:15>
| |   `-ParagraphComment 0x5555d4c32590 <line:3265:5, line:3266:15>
| |     |-TextComment 0x5555d4c32540 <line:3265:5, col:55> Text=" A type whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c32560 <line:3266:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4ba7040 <line:3329:3, col:32> col:3 CXType_DependentSizedArray 'int'
| | |-ConstantExpr 0x5555d4ba7020 <col:32> 'int'
| | | |-value: Int 116
| | | `-IntegerLiteral 0x5555d4ba7000 <col:32> 'int' 116
| | `-FullComment 0x5555d4c326b0 <line:3265:5, line:3266:15>
| |   `-ParagraphComment 0x5555d4c32680 <line:3265:5, line:3266:15>
| |     |-TextComment 0x5555d4c32630 <line:3265:5, col:55> Text=" A type whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c32650 <line:3266:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4ba70d0 <line:3330:3, col:26> col:3 CXType_MemberPointer 'int'
| | |-ConstantExpr 0x5555d4ba70b0 <col:26> 'int'
| | | |-value: Int 117
| | | `-IntegerLiteral 0x5555d4ba7090 <col:26> 'int' 117
| | `-FullComment 0x5555d4c327a0 <line:3265:5, line:3266:15>
| |   `-ParagraphComment 0x5555d4c32770 <line:3265:5, line:3266:15>
| |     |-TextComment 0x5555d4c32720 <line:3265:5, col:55> Text=" A type whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c32740 <line:3266:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4ba7160 <line:3331:3, col:17> col:3 CXType_Auto 'int'
| | |-ConstantExpr 0x5555d4ba7140 <col:17> 'int'
| | | |-value: Int 118
| | | `-IntegerLiteral 0x5555d4ba7120 <col:17> 'int' 118
| | `-FullComment 0x5555d4c32890 <line:3265:5, line:3266:15>
| |   `-ParagraphComment 0x5555d4c32860 <line:3265:5, line:3266:15>
| |     |-TextComment 0x5555d4c32810 <line:3265:5, col:55> Text=" A type whose specific kind is not exposed via this"
| |     `-TextComment 0x5555d4c32830 <line:3266:5, col:15> Text=" interface."
| |-EnumConstantDecl 0x5555d4ba7218 <line:3338:3, col:23> col:3 CXType_Elaborated 'int'
| | |-ConstantExpr 0x5555d4ba71f8 <col:23> 'int'
| | | |-value: Int 119
| | | `-IntegerLiteral 0x5555d4ba71d8 <col:23> 'int' 119
| | `-FullComment 0x5555d4c329b0 <line:3334:5, line:3336:72>
| |   |-ParagraphComment 0x5555d4c32930 <line:3334:5, col:77>
| |   | `-TextComment 0x5555d4c32900 <col:5, col:77> Text=" Represents a type that was referred to using an elaborated type keyword."
| |   `-ParagraphComment 0x5555d4c32980 <line:3336:5, col:72>
| |     `-TextComment 0x5555d4c32950 <col:5, col:72> Text=" E.g., struct S, or via a qualified name, e.g., N::M::type, or both."
| |-EnumConstantDecl 0x5555d4ba72a8 <line:3341:3, col:17> col:3 CXType_Pipe 'int'
| | |-ConstantExpr 0x5555d4ba7288 <col:17> 'int'
| | | |-value: Int 120
| | | `-IntegerLiteral 0x5555d4ba7268 <col:17> 'int' 120
| | `-FullComment 0x5555d4c32ad0 <line:3334:5, line:3336:72>
| |   |-ParagraphComment 0x5555d4c32a50 <line:3334:5, col:77>
| |   | `-TextComment 0x5555d4c32a20 <col:5, col:77> Text=" Represents a type that was referred to using an elaborated type keyword."
| |   `-ParagraphComment 0x5555d4c32aa0 <line:3336:5, col:72>
| |     `-TextComment 0x5555d4c32a70 <col:5, col:72> Text=" E.g., struct S, or via a qualified name, e.g., N::M::type, or both."
| |-EnumConstantDecl 0x5555d4ba7338 <line:3344:3, col:25> col:3 CXType_OCLImage1dRO 'int'
| | |-ConstantExpr 0x5555d4ba7318 <col:25> 'int'
| | | |-value: Int 121
| | | `-IntegerLiteral 0x5555d4ba72f8 <col:25> 'int' 121
| | `-FullComment 0x5555d4c32bf0 <line:3334:5, line:3336:72>
| |   |-ParagraphComment 0x5555d4c32b70 <line:3334:5, col:77>
| |   | `-TextComment 0x5555d4c32b40 <col:5, col:77> Text=" Represents a type that was referred to using an elaborated type keyword."
| |   `-ParagraphComment 0x5555d4c32bc0 <line:3336:5, col:72>
| |     `-TextComment 0x5555d4c32b90 <col:5, col:72> Text=" E.g., struct S, or via a qualified name, e.g., N::M::type, or both."
| |-EnumConstantDecl 0x5555d4ba73c8 <line:3345:3, col:30> col:3 CXType_OCLImage1dArrayRO 'int'
| | |-ConstantExpr 0x5555d4ba73a8 <col:30> 'int'
| | | |-value: Int 122
| | | `-IntegerLiteral 0x5555d4ba7388 <col:30> 'int' 122
| | `-FullComment 0x5555d4c32d10 <line:3334:5, line:3336:72>
| |   |-ParagraphComment 0x5555d4c32c90 <line:3334:5, col:77>
| |   | `-TextComment 0x5555d4c32c60 <col:5, col:77> Text=" Represents a type that was referred to using an elaborated type keyword."
| |   `-ParagraphComment 0x5555d4c32ce0 <line:3336:5, col:72>
| |     `-TextComment 0x5555d4c32cb0 <col:5, col:72> Text=" E.g., struct S, or via a qualified name, e.g., N::M::type, or both."
| |-EnumConstantDecl 0x5555d4ba7458 <line:3346:3, col:31> col:3 CXType_OCLImage1dBufferRO 'int'
| | |-ConstantExpr 0x5555d4ba7438 <col:31> 'int'
| | | |-value: Int 123
| | | `-IntegerLiteral 0x5555d4ba7418 <col:31> 'int' 123
| | `-FullComment 0x5555d4c32e30 <line:3334:5, line:3336:72>
| |   |-ParagraphComment 0x5555d4c32db0 <line:3334:5, col:77>
| |   | `-TextComment 0x5555d4c32d80 <col:5, col:77> Text=" Represents a type that was referred to using an elaborated type keyword."
| |   `-ParagraphComment 0x5555d4c32e00 <line:3336:5, col:72>
| |     `-TextComment 0x5555d4c32dd0 <col:5, col:72> Text=" E.g., struct S, or via a qualified name, e.g., N::M::type, or both."
| |-EnumConstantDecl 0x5555d4ba74e8 <line:3347:3, col:25> col:3 CXType_OCLImage2dRO 'int'
| | |-ConstantExpr 0x5555d4ba74c8 <col:25> 'int'
| | | |-value: Int 124
| | | `-IntegerLiteral 0x5555d4ba74a8 <col:25> 'int' 124
| | `-FullComment 0x5555d4c32f50 <line:3334:5, line:3336:72>
| |   |-ParagraphComment 0x5555d4c32ed0 <line:3334:5, col:77>
| |   | `-TextComment 0x5555d4c32ea0 <col:5, col:77> Text=" Represents a type that was referred to using an elaborated type keyword."
| |   `-ParagraphComment 0x5555d4c32f20 <line:3336:5, col:72>
| |     `-TextComment 0x5555d4c32ef0 <col:5, col:72> Text=" E.g., struct S, or via a qualified name, e.g., N::M::type, or both."
| |-EnumConstantDecl 0x5555d4ba7578 <line:3348:3, col:30> col:3 CXType_OCLImage2dArrayRO 'int'
| | |-ConstantExpr 0x5555d4ba7558 <col:30> 'int'
| | | |-value: Int 125
| | | `-IntegerLiteral 0x5555d4ba7538 <col:30> 'int' 125
| | `-FullComment 0x5555d4c33070 <line:3334:5, line:3336:72>
| |   |-ParagraphComment 0x5555d4c32ff0 <line:3334:5, col:77>
| |   | `-TextComment 0x5555d4c32fc0 <col:5, col:77> Text=" Represents a type that was referred to using an elaborated type keyword."
| |   `-ParagraphComment 0x5555d4c33040 <line:3336:5, col:72>
| |     `-TextComment 0x5555d4c33010 <col:5, col:72> Text=" E.g., struct S, or via a qualified name, e.g., N::M::type, or both."
| |-EnumConstantDecl 0x5555d4ba7608 <line:3349:3, col:30> col:3 CXType_OCLImage2dDepthRO 'int'
| | |-ConstantExpr 0x5555d4ba75e8 <col:30> 'int'
| | | |-value: Int 126
| | | `-IntegerLiteral 0x5555d4ba75c8 <col:30> 'int' 126
| | `-FullComment 0x5555d4c33190 <line:3334:5, line:3336:72>
| |   |-ParagraphComment 0x5555d4c33110 <line:3334:5, col:77>
| |   | `-TextComment 0x5555d4c330e0 <col:5, col:77> Text=" Represents a type that was referred to using an elaborated type keyword."
| |   `-ParagraphComment 0x5555d4c33160 <line:3336:5, col:72>
| |     `-TextComment 0x5555d4c33130 <col:5, col:72> Text=" E.g., struct S, or via a qualified name, e.g., N::M::type, or both."
| |-EnumConstantDecl 0x5555d4ba7698 <line:3350:3, col:35> col:3 CXType_OCLImage2dArrayDepthRO 'int'
| | |-ConstantExpr 0x5555d4ba7678 <col:35> 'int'
| | | |-value: Int 127
| | | `-IntegerLiteral 0x5555d4ba7658 <col:35> 'int' 127
| | `-FullComment 0x5555d4c332b0 <line:3334:5, line:3336:72>
| |   |-ParagraphComment 0x5555d4c33230 <line:3334:5, col:77>
| |   | `-TextComment 0x5555d4c33200 <col:5, col:77> Text=" Represents a type that was referred to using an elaborated type keyword."
| |   `-ParagraphComment 0x5555d4c33280 <line:3336:5, col:72>
| |     `-TextComment 0x5555d4c33250 <col:5, col:72> Text=" E.g., struct S, or via a qualified name, e.g., N::M::type, or both."
| |-EnumConstantDecl 0x5555d4ba7728 <line:3351:3, col:29> col:3 CXType_OCLImage2dMSAARO 'int'
| | |-ConstantExpr 0x5555d4ba7708 <col:29> 'int'
| | | |-value: Int 128
| | | `-IntegerLiteral 0x5555d4ba76e8 <col:29> 'int' 128
| | `-FullComment 0x5555d4c333d0 <line:3334:5, line:3336:72>
| |   |-ParagraphComment 0x5555d4c33350 <line:3334:5, col:77>
| |   | `-TextComment 0x5555d4c33320 <col:5, col:77> Text=" Represents a type that was referred to using an elaborated type keyword."
| |   `-ParagraphComment 0x5555d4c333a0 <line:3336:5, col:72>
| |     `-TextComment 0x5555d4c33370 <col:5, col:72> Text=" E.g., struct S, or via a qualified name, e.g., N::M::type, or both."
| |-EnumConstantDecl 0x5555d4ba77b8 <line:3352:3, col:34> col:3 CXType_OCLImage2dArrayMSAARO 'int'
| | |-ConstantExpr 0x5555d4ba7798 <col:34> 'int'
| | | |-value: Int 129
| | | `-IntegerLiteral 0x5555d4ba7778 <col:34> 'int' 129
| | `-FullComment 0x5555d4c334f0 <line:3334:5, line:3336:72>
| |   |-ParagraphComment 0x5555d4c33470 <line:3334:5, col:77>
| |   | `-TextComment 0x5555d4c33440 <col:5, col:77> Text=" Represents a type that was referred to using an elaborated type keyword."
| |   `-ParagraphComment 0x5555d4c334c0 <line:3336:5, col:72>
| |     `-TextComment 0x5555d4c33490 <col:5, col:72> Text=" E.g., struct S, or via a qualified name, e.g., N::M::type, or both."
| |-EnumConstantDecl 0x5555d4ba7848 <line:3353:3, col:34> col:3 CXType_OCLImage2dMSAADepthRO 'int'
| | |-ConstantExpr 0x5555d4ba7828 <col:34> 'int'
| | | |-value: Int 130
| | | `-IntegerLiteral 0x5555d4ba7808 <col:34> 'int' 130
| | `-FullComment 0x5555d4c33610 <line:3334:5, line:3336:72>
| |   |-ParagraphComment 0x5555d4c33590 <line:3334:5, col:77>
| |   | `-TextComment 0x5555d4c33560 <col:5, col:77> Text=" Represents a type that was referred to using an elaborated type keyword."
| |   `-ParagraphComment 0x5555d4c335e0 <line:3336:5, col:72>
| |     `-TextComment 0x5555d4c335b0 <col:5, col:72> Text=" E.g., struct S, or via a qualified name, e.g., N::M::type, or both."
| |-EnumConstantDecl 0x5555d4ba78d8 <line:3354:3, col:39> col:3 CXType_OCLImage2dArrayMSAADepthRO 'int'
| | |-ConstantExpr 0x5555d4ba78b8 <col:39> 'int'
| | | |-value: Int 131
| | | `-IntegerLiteral 0x5555d4ba7898 <col:39> 'int' 131
| | `-FullComment 0x5555d4c33730 <line:3334:5, line:3336:72>
| |   |-ParagraphComment 0x5555d4c336b0 <line:3334:5, col:77>
| |   | `-TextComment 0x5555d4c33680 <col:5, col:77> Text=" Represents a type that was referred to using an elaborated type keyword."
| |   `-ParagraphComment 0x5555d4c33700 <line:3336:5, col:72>
| |     `-TextComment 0x5555d4c336d0 <col:5, col:72> Text=" E.g., struct S, or via a qualified name, e.g., N::M::type, or both."
| |-EnumConstantDecl 0x5555d4ba7968 <line:3355:3, col:25> col:3 CXType_OCLImage3dRO 'int'
| | |-ConstantExpr 0x5555d4ba7948 <col:25> 'int'
| | | |-value: Int 132
| | | `-IntegerLiteral 0x5555d4ba7928 <col:25> 'int' 132
| | `-FullComment 0x5555d4c33850 <line:3334:5, line:3336:72>
| |   |-ParagraphComment 0x5555d4c337d0 <line:3334:5, col:77>
| |   | `-TextComment 0x5555d4c337a0 <col:5, col:77> Text=" Represents a type that was referred to using an elaborated type keyword."
| |   `-ParagraphComment 0x5555d4c33820 <line:3336:5, col:72>
| |     `-TextComment 0x5555d4c337f0 <col:5, col:72> Text=" E.g., struct S, or via a qualified name, e.g., N::M::type, or both."
| |-EnumConstantDecl 0x5555d4ba79f8 <line:3356:3, col:25> col:3 CXType_OCLImage1dWO 'int'
| | |-ConstantExpr 0x5555d4ba79d8 <col:25> 'int'
| | | |-value: Int 133
| | | `-IntegerLiteral 0x5555d4ba79b8 <col:25> 'int' 133
| | `-FullComment 0x5555d4c33970 <line:3334:5, line:3336:72>
| |   |-ParagraphComment 0x5555d4c338f0 <line:3334:5, col:77>
| |   | `-TextComment 0x5555d4c338c0 <col:5, col:77> Text=" Represents a type that was referred to using an elaborated type keyword."
| |   `-ParagraphComment 0x5555d4c33940 <line:3336:5, col:72>
| |     `-TextComment 0x5555d4c33910 <col:5, col:72> Text=" E.g., struct S, or via a qualified name, e.g., N::M::type, or both."
| |-EnumConstantDecl 0x5555d4ba7a88 <line:3357:3, col:30> col:3 CXType_OCLImage1dArrayWO 'int'
| | |-ConstantExpr 0x5555d4ba7a68 <col:30> 'int'
| | | |-value: Int 134
| | | `-IntegerLiteral 0x5555d4ba7a48 <col:30> 'int' 134
| | `-FullComment 0x5555d4c33a90 <line:3334:5, line:3336:72>
| |   |-ParagraphComment 0x5555d4c33a10 <line:3334:5, col:77>
| |   | `-TextComment 0x5555d4c339e0 <col:5, col:77> Text=" Represents a type that was referred to using an elaborated type keyword."
| |   `-ParagraphComment 0x5555d4c33a60 <line:3336:5, col:72>
| |     `-TextComment 0x5555d4c33a30 <col:5, col:72> Text=" E.g., struct S, or via a qualified name, e.g., N::M::type, or both."
| |-EnumConstantDecl 0x5555d4ba7b18 <line:3358:3, col:31> col:3 CXType_OCLImage1dBufferWO 'int'
| | |-ConstantExpr 0x5555d4ba7af8 <col:31> 'int'
| | | |-value: Int 135
| | | `-IntegerLiteral 0x5555d4ba7ad8 <col:31> 'int' 135
| | `-FullComment 0x5555d4c33bb0 <line:3334:5, line:3336:72>
| |   |-ParagraphComment 0x5555d4c33b30 <line:3334:5, col:77>
| |   | `-TextComment 0x5555d4c33b00 <col:5, col:77> Text=" Represents a type that was referred to using an elaborated type keyword."
| |   `-ParagraphComment 0x5555d4c33b80 <line:3336:5, col:72>
| |     `-TextComment 0x5555d4c33b50 <col:5, col:72> Text=" E.g., struct S, or via a qualified name, e.g., N::M::type, or both."
| |-EnumConstantDecl 0x5555d4ba7ba8 <line:3359:3, col:25> col:3 CXType_OCLImage2dWO 'int'
| | |-ConstantExpr 0x5555d4ba7b88 <col:25> 'int'
| | | |-value: Int 136
| | | `-IntegerLiteral 0x5555d4ba7b68 <col:25> 'int' 136
| | `-FullComment 0x5555d4c33cd0 <line:3334:5, line:3336:72>
| |   |-ParagraphComment 0x5555d4c33c50 <line:3334:5, col:77>
| |   | `-TextComment 0x5555d4c33c20 <col:5, col:77> Text=" Represents a type that was referred to using an elaborated type keyword."
| |   `-ParagraphComment 0x5555d4c33ca0 <line:3336:5, col:72>
| |     `-TextComment 0x5555d4c33c70 <col:5, col:72> Text=" E.g., struct S, or via a qualified name, e.g., N::M::type, or both."
| |-EnumConstantDecl 0x5555d4ba7c38 <line:3360:3, col:30> col:3 CXType_OCLImage2dArrayWO 'int'
| | |-ConstantExpr 0x5555d4ba7c18 <col:30> 'int'
| | | |-value: Int 137
| | | `-IntegerLiteral 0x5555d4ba7bf8 <col:30> 'int' 137
| | `-FullComment 0x5555d4c33e10 <line:3334:5, line:3336:72>
| |   |-ParagraphComment 0x5555d4c33d90 <line:3334:5, col:77>
| |   | `-TextComment 0x5555d4c33d40 <col:5, col:77> Text=" Represents a type that was referred to using an elaborated type keyword."
| |   `-ParagraphComment 0x5555d4c33de0 <line:3336:5, col:72>
| |     `-TextComment 0x5555d4c33db0 <col:5, col:72> Text=" E.g., struct S, or via a qualified name, e.g., N::M::type, or both."
| |-EnumConstantDecl 0x5555d4ba7cc8 <line:3361:3, col:30> col:3 CXType_OCLImage2dDepthWO 'int'
| | |-ConstantExpr 0x5555d4ba7ca8 <col:30> 'int'
| | | |-value: Int 138
| | | `-IntegerLiteral 0x5555d4ba7c88 <col:30> 'int' 138
| | `-FullComment 0x5555d4c33f30 <line:3334:5, line:3336:72>
| |   |-ParagraphComment 0x5555d4c33eb0 <line:3334:5, col:77>
| |   | `-TextComment 0x5555d4c33e80 <col:5, col:77> Text=" Represents a type that was referred to using an elaborated type keyword."
| |   `-ParagraphComment 0x5555d4c33f00 <line:3336:5, col:72>
| |     `-TextComment 0x5555d4c33ed0 <col:5, col:72> Text=" E.g., struct S, or via a qualified name, e.g., N::M::type, or both."
| |-EnumConstantDecl 0x5555d4ba7d58 <line:3362:3, col:35> col:3 CXType_OCLImage2dArrayDepthWO 'int'
| | |-ConstantExpr 0x5555d4ba7d38 <col:35> 'int'
| | | |-value: Int 139
| | | `-IntegerLiteral 0x5555d4ba7d18 <col:35> 'int' 139
| | `-FullComment 0x5555d4c34050 <line:3334:5, line:3336:72>
| |   |-ParagraphComment 0x5555d4c33fd0 <line:3334:5, col:77>
| |   | `-TextComment 0x5555d4c33fa0 <col:5, col:77> Text=" Represents a type that was referred to using an elaborated type keyword."
| |   `-ParagraphComment 0x5555d4c34020 <line:3336:5, col:72>
| |     `-TextComment 0x5555d4c33ff0 <col:5, col:72> Text=" E.g., struct S, or via a qualified name, e.g., N::M::type, or both."
| |-EnumConstantDecl 0x5555d4ba7de8 <line:3363:3, col:29> col:3 CXType_OCLImage2dMSAAWO 'int'
| | |-ConstantExpr 0x5555d4ba7dc8 <col:29> 'int'
| | | |-value: Int 140
| | | `-IntegerLiteral 0x5555d4ba7da8 <col:29> 'int' 140
| | `-FullComment 0x5555d4c34170 <line:3334:5, line:3336:72>
| |   |-ParagraphComment 0x5555d4c340f0 <line:3334:5, col:77>
| |   | `-TextComment 0x5555d4c340c0 <col:5, col:77> Text=" Represents a type that was referred to using an elaborated type keyword."
| |   `-ParagraphComment 0x5555d4c34140 <line:3336:5, col:72>
| |     `-TextComment 0x5555d4c34110 <col:5, col:72> Text=" E.g., struct S, or via a qualified name, e.g., N::M::type, or both."
| |-EnumConstantDecl 0x5555d4ba7e78 <line:3364:3, col:34> col:3 CXType_OCLImage2dArrayMSAAWO 'int'
| | |-ConstantExpr 0x5555d4ba7e58 <col:34> 'int'
| | | |-value: Int 141
| | | `-IntegerLiteral 0x5555d4ba7e38 <col:34> 'int' 141
| | `-FullComment 0x5555d4c34290 <line:3334:5, line:3336:72>
| |   |-ParagraphComment 0x5555d4c34210 <line:3334:5, col:77>
| |   | `-TextComment 0x5555d4c341e0 <col:5, col:77> Text=" Represents a type that was referred to using an elaborated type keyword."
| |   `-ParagraphComment 0x5555d4c34260 <line:3336:5, col:72>
| |     `-TextComment 0x5555d4c34230 <col:5, col:72> Text=" E.g., struct S, or via a qualified name, e.g., N::M::type, or both."
| |-EnumConstantDecl 0x5555d4ba21b0 <line:3365:3, col:34> col:3 CXType_OCLImage2dMSAADepthWO 'int'
| | |-ConstantExpr 0x5555d4ba7ee8 <col:34> 'int'
| | | |-value: Int 142
| | | `-IntegerLiteral 0x5555d4ba7ec8 <col:34> 'int' 142
| | `-FullComment 0x5555d4c343b0 <line:3334:5, line:3336:72>
| |   |-ParagraphComment 0x5555d4c34330 <line:3334:5, col:77>
| |   | `-TextComment 0x5555d4c34300 <col:5, col:77> Text=" Represents a type that was referred to using an elaborated type keyword."
| |   `-ParagraphComment 0x5555d4c34380 <line:3336:5, col:72>
| |     `-TextComment 0x5555d4c34350 <col:5, col:72> Text=" E.g., struct S, or via a qualified name, e.g., N::M::type, or both."
| |-EnumConstantDecl 0x5555d4ba2240 <line:3366:3, col:39> col:3 CXType_OCLImage2dArrayMSAADepthWO 'int'
| | |-ConstantExpr 0x5555d4ba2220 <col:39> 'int'
| | | |-value: Int 143
| | | `-IntegerLiteral 0x5555d4ba2200 <col:39> 'int' 143
| | `-FullComment 0x5555d4c344d0 <line:3334:5, line:3336:72>
| |   |-ParagraphComment 0x5555d4c34450 <line:3334:5, col:77>
| |   | `-TextComment 0x5555d4c34420 <col:5, col:77> Text=" Represents a type that was referred to using an elaborated type keyword."
| |   `-ParagraphComment 0x5555d4c344a0 <line:3336:5, col:72>
| |     `-TextComment 0x5555d4c34470 <col:5, col:72> Text=" E.g., struct S, or via a qualified name, e.g., N::M::type, or both."
| |-EnumConstantDecl 0x5555d4ba22d0 <line:3367:3, col:25> col:3 CXType_OCLImage3dWO 'int'
| | |-ConstantExpr 0x5555d4ba22b0 <col:25> 'int'
| | | |-value: Int 144
| | | `-IntegerLiteral 0x5555d4ba2290 <col:25> 'int' 144
| | `-FullComment 0x5555d4c345f0 <line:3334:5, line:3336:72>
| |   |-ParagraphComment 0x5555d4c34570 <line:3334:5, col:77>
| |   | `-TextComment 0x5555d4c34540 <col:5, col:77> Text=" Represents a type that was referred to using an elaborated type keyword."
| |   `-ParagraphComment 0x5555d4c345c0 <line:3336:5, col:72>
| |     `-TextComment 0x5555d4c34590 <col:5, col:72> Text=" E.g., struct S, or via a qualified name, e.g., N::M::type, or both."
| |-EnumConstantDecl 0x5555d4ba2360 <line:3368:3, col:25> col:3 CXType_OCLImage1dRW 'int'
| | |-ConstantExpr 0x5555d4ba2340 <col:25> 'int'
| | | |-value: Int 145
| | | `-IntegerLiteral 0x5555d4ba2320 <col:25> 'int' 145
| | `-FullComment 0x5555d4c34710 <line:3334:5, line:3336:72>
| |   |-ParagraphComment 0x5555d4c34690 <line:3334:5, col:77>
| |   | `-TextComment 0x5555d4c34660 <col:5, col:77> Text=" Represents a type that was referred to using an elaborated type keyword."
| |   `-ParagraphComment 0x5555d4c346e0 <line:3336:5, col:72>
| |     `-TextComment 0x5555d4c346b0 <col:5, col:72> Text=" E.g., struct S, or via a qualified name, e.g., N::M::type, or both."
| |-EnumConstantDecl 0x5555d4ba23f0 <line:3369:3, col:30> col:3 CXType_OCLImage1dArrayRW 'int'
| | |-ConstantExpr 0x5555d4ba23d0 <col:30> 'int'
| | | |-value: Int 146
| | | `-IntegerLiteral 0x5555d4ba23b0 <col:30> 'int' 146
| | `-FullComment 0x5555d4c34830 <line:3334:5, line:3336:72>
| |   |-ParagraphComment 0x5555d4c347b0 <line:3334:5, col:77>
| |   | `-TextComment 0x5555d4c34780 <col:5, col:77> Text=" Represents a type that was referred to using an elaborated type keyword."
| |   `-ParagraphComment 0x5555d4c34800 <line:3336:5, col:72>
| |     `-TextComment 0x5555d4c347d0 <col:5, col:72> Text=" E.g., struct S, or via a qualified name, e.g., N::M::type, or both."
| |-EnumConstantDecl 0x5555d4ba2480 <line:3370:3, col:31> col:3 CXType_OCLImage1dBufferRW 'int'
| | |-ConstantExpr 0x5555d4ba2460 <col:31> 'int'
| | | |-value: Int 147
| | | `-IntegerLiteral 0x5555d4ba2440 <col:31> 'int' 147
| | `-FullComment 0x5555d4c34950 <line:3334:5, line:3336:72>
| |   |-ParagraphComment 0x5555d4c348d0 <line:3334:5, col:77>
| |   | `-TextComment 0x5555d4c348a0 <col:5, col:77> Text=" Represents a type that was referred to using an elaborated type keyword."
| |   `-ParagraphComment 0x5555d4c34920 <line:3336:5, col:72>
| |     `-TextComment 0x5555d4c348f0 <col:5, col:72> Text=" E.g., struct S, or via a qualified name, e.g., N::M::type, or both."
| |-EnumConstantDecl 0x5555d4ba2510 <line:3371:3, col:25> col:3 CXType_OCLImage2dRW 'int'
| | |-ConstantExpr 0x5555d4ba24f0 <col:25> 'int'
| | | |-value: Int 148
| | | `-IntegerLiteral 0x5555d4ba24d0 <col:25> 'int' 148
| | `-FullComment 0x5555d4c34a70 <line:3334:5, line:3336:72>
| |   |-ParagraphComment 0x5555d4c349f0 <line:3334:5, col:77>
| |   | `-TextComment 0x5555d4c349c0 <col:5, col:77> Text=" Represents a type that was referred to using an elaborated type keyword."
| |   `-ParagraphComment 0x5555d4c34a40 <line:3336:5, col:72>
| |     `-TextComment 0x5555d4c34a10 <col:5, col:72> Text=" E.g., struct S, or via a qualified name, e.g., N::M::type, or both."
| |-EnumConstantDecl 0x5555d4ba25a0 <line:3372:3, col:30> col:3 CXType_OCLImage2dArrayRW 'int'
| | |-ConstantExpr 0x5555d4ba2580 <col:30> 'int'
| | | |-value: Int 149
| | | `-IntegerLiteral 0x5555d4ba2560 <col:30> 'int' 149
| | `-FullComment 0x5555d4c34b90 <line:3334:5, line:3336:72>
| |   |-ParagraphComment 0x5555d4c34b10 <line:3334:5, col:77>
| |   | `-TextComment 0x5555d4c34ae0 <col:5, col:77> Text=" Represents a type that was referred to using an elaborated type keyword."
| |   `-ParagraphComment 0x5555d4c34b60 <line:3336:5, col:72>
| |     `-TextComment 0x5555d4c34b30 <col:5, col:72> Text=" E.g., struct S, or via a qualified name, e.g., N::M::type, or both."
| |-EnumConstantDecl 0x5555d4ba2630 <line:3373:3, col:30> col:3 CXType_OCLImage2dDepthRW 'int'
| | |-ConstantExpr 0x5555d4ba2610 <col:30> 'int'
| | | |-value: Int 150
| | | `-IntegerLiteral 0x5555d4ba25f0 <col:30> 'int' 150
| | `-FullComment 0x5555d4c34cb0 <line:3334:5, line:3336:72>
| |   |-ParagraphComment 0x5555d4c34c30 <line:3334:5, col:77>
| |   | `-TextComment 0x5555d4c34c00 <col:5, col:77> Text=" Represents a type that was referred to using an elaborated type keyword."
| |   `-ParagraphComment 0x5555d4c34c80 <line:3336:5, col:72>
| |     `-TextComment 0x5555d4c34c50 <col:5, col:72> Text=" E.g., struct S, or via a qualified name, e.g., N::M::type, or both."
| |-EnumConstantDecl 0x5555d4ba26c0 <line:3374:3, col:35> col:3 CXType_OCLImage2dArrayDepthRW 'int'
| | |-ConstantExpr 0x5555d4ba26a0 <col:35> 'int'
| | | |-value: Int 151
| | | `-IntegerLiteral 0x5555d4ba2680 <col:35> 'int' 151
| | `-FullComment 0x5555d4c34dd0 <line:3334:5, line:3336:72>
| |   |-ParagraphComment 0x5555d4c34d50 <line:3334:5, col:77>
| |   | `-TextComment 0x5555d4c34d20 <col:5, col:77> Text=" Represents a type that was referred to using an elaborated type keyword."
| |   `-ParagraphComment 0x5555d4c34da0 <line:3336:5, col:72>
| |     `-TextComment 0x5555d4c34d70 <col:5, col:72> Text=" E.g., struct S, or via a qualified name, e.g., N::M::type, or both."
| |-EnumConstantDecl 0x5555d4ba2750 <line:3375:3, col:29> col:3 CXType_OCLImage2dMSAARW 'int'
| | |-ConstantExpr 0x5555d4ba2730 <col:29> 'int'
| | | |-value: Int 152
| | | `-IntegerLiteral 0x5555d4ba2710 <col:29> 'int' 152
| | `-FullComment 0x5555d4c34ef0 <line:3334:5, line:3336:72>
| |   |-ParagraphComment 0x5555d4c34e70 <line:3334:5, col:77>
| |   | `-TextComment 0x5555d4c34e40 <col:5, col:77> Text=" Represents a type that was referred to using an elaborated type keyword."
| |   `-ParagraphComment 0x5555d4c34ec0 <line:3336:5, col:72>
| |     `-TextComment 0x5555d4c34e90 <col:5, col:72> Text=" E.g., struct S, or via a qualified name, e.g., N::M::type, or both."
| |-EnumConstantDecl 0x5555d4ba27e0 <line:3376:3, col:34> col:3 CXType_OCLImage2dArrayMSAARW 'int'
| | |-ConstantExpr 0x5555d4ba27c0 <col:34> 'int'
| | | |-value: Int 153
| | | `-IntegerLiteral 0x5555d4ba27a0 <col:34> 'int' 153
| | `-FullComment 0x5555d4c35010 <line:3334:5, line:3336:72>
| |   |-ParagraphComment 0x5555d4c34f90 <line:3334:5, col:77>
| |   | `-TextComment 0x5555d4c34f60 <col:5, col:77> Text=" Represents a type that was referred to using an elaborated type keyword."
| |   `-ParagraphComment 0x5555d4c34fe0 <line:3336:5, col:72>
| |     `-TextComment 0x5555d4c34fb0 <col:5, col:72> Text=" E.g., struct S, or via a qualified name, e.g., N::M::type, or both."
| |-EnumConstantDecl 0x5555d4ba2870 <line:3377:3, col:34> col:3 CXType_OCLImage2dMSAADepthRW 'int'
| | |-ConstantExpr 0x5555d4ba2850 <col:34> 'int'
| | | |-value: Int 154
| | | `-IntegerLiteral 0x5555d4ba2830 <col:34> 'int' 154
| | `-FullComment 0x5555d4c35130 <line:3334:5, line:3336:72>
| |   |-ParagraphComment 0x5555d4c350b0 <line:3334:5, col:77>
| |   | `-TextComment 0x5555d4c35080 <col:5, col:77> Text=" Represents a type that was referred to using an elaborated type keyword."
| |   `-ParagraphComment 0x5555d4c35100 <line:3336:5, col:72>
| |     `-TextComment 0x5555d4c350d0 <col:5, col:72> Text=" E.g., struct S, or via a qualified name, e.g., N::M::type, or both."
| |-EnumConstantDecl 0x5555d4ba2900 <line:3378:3, col:39> col:3 CXType_OCLImage2dArrayMSAADepthRW 'int'
| | |-ConstantExpr 0x5555d4ba28e0 <col:39> 'int'
| | | |-value: Int 155
| | | `-IntegerLiteral 0x5555d4ba28c0 <col:39> 'int' 155
| | `-FullComment 0x5555d4c35250 <line:3334:5, line:3336:72>
| |   |-ParagraphComment 0x5555d4c351d0 <line:3334:5, col:77>
| |   | `-TextComment 0x5555d4c351a0 <col:5, col:77> Text=" Represents a type that was referred to using an elaborated type keyword."
| |   `-ParagraphComment 0x5555d4c35220 <line:3336:5, col:72>
| |     `-TextComment 0x5555d4c351f0 <col:5, col:72> Text=" E.g., struct S, or via a qualified name, e.g., N::M::type, or both."
| |-EnumConstantDecl 0x5555d4ba2990 <line:3379:3, col:25> col:3 CXType_OCLImage3dRW 'int'
| | |-ConstantExpr 0x5555d4ba2970 <col:25> 'int'
| | | |-value: Int 156
| | | `-IntegerLiteral 0x5555d4ba2950 <col:25> 'int' 156
| | `-FullComment 0x5555d4c35370 <line:3334:5, line:3336:72>
| |   |-ParagraphComment 0x5555d4c352f0 <line:3334:5, col:77>
| |   | `-TextComment 0x5555d4c352c0 <col:5, col:77> Text=" Represents a type that was referred to using an elaborated type keyword."
| |   `-ParagraphComment 0x5555d4c35340 <line:3336:5, col:72>
| |     `-TextComment 0x5555d4c35310 <col:5, col:72> Text=" E.g., struct S, or via a qualified name, e.g., N::M::type, or both."
| |-EnumConstantDecl 0x5555d4ba2a20 <line:3380:3, col:23> col:3 CXType_OCLSampler 'int'
| | |-ConstantExpr 0x5555d4ba2a00 <col:23> 'int'
| | | |-value: Int 157
| | | `-IntegerLiteral 0x5555d4ba29e0 <col:23> 'int' 157
| | `-FullComment 0x5555d4c35490 <line:3334:5, line:3336:72>
| |   |-ParagraphComment 0x5555d4c35410 <line:3334:5, col:77>
| |   | `-TextComment 0x5555d4c353e0 <col:5, col:77> Text=" Represents a type that was referred to using an elaborated type keyword."
| |   `-ParagraphComment 0x5555d4c35460 <line:3336:5, col:72>
| |     `-TextComment 0x5555d4c35430 <col:5, col:72> Text=" E.g., struct S, or via a qualified name, e.g., N::M::type, or both."
| |-EnumConstantDecl 0x5555d4ba2ab0 <line:3381:3, col:21> col:3 CXType_OCLEvent 'int'
| | |-ConstantExpr 0x5555d4ba2a90 <col:21> 'int'
| | | |-value: Int 158
| | | `-IntegerLiteral 0x5555d4ba2a70 <col:21> 'int' 158
| | `-FullComment 0x5555d4c355b0 <line:3334:5, line:3336:72>
| |   |-ParagraphComment 0x5555d4c35530 <line:3334:5, col:77>
| |   | `-TextComment 0x5555d4c35500 <col:5, col:77> Text=" Represents a type that was referred to using an elaborated type keyword."
| |   `-ParagraphComment 0x5555d4c35580 <line:3336:5, col:72>
| |     `-TextComment 0x5555d4c35550 <col:5, col:72> Text=" E.g., struct S, or via a qualified name, e.g., N::M::type, or both."
| |-EnumConstantDecl 0x5555d4ba2b40 <line:3382:3, col:21> col:3 CXType_OCLQueue 'int'
| | |-ConstantExpr 0x5555d4ba2b20 <col:21> 'int'
| | | |-value: Int 159
| | | `-IntegerLiteral 0x5555d4ba2b00 <col:21> 'int' 159
| | `-FullComment 0x5555d4c356d0 <line:3334:5, line:3336:72>
| |   |-ParagraphComment 0x5555d4c35650 <line:3334:5, col:77>
| |   | `-TextComment 0x5555d4c35620 <col:5, col:77> Text=" Represents a type that was referred to using an elaborated type keyword."
| |   `-ParagraphComment 0x5555d4c356a0 <line:3336:5, col:72>
| |     `-TextComment 0x5555d4c35670 <col:5, col:72> Text=" E.g., struct S, or via a qualified name, e.g., N::M::type, or both."
| |-EnumConstantDecl 0x5555d4ba2bd0 <line:3383:3, col:25> col:3 CXType_OCLReserveID 'int'
| | |-ConstantExpr 0x5555d4ba2bb0 <col:25> 'int'
| | | |-value: Int 160
| | | `-IntegerLiteral 0x5555d4ba2b90 <col:25> 'int' 160
| | `-FullComment 0x5555d4c357f0 <line:3334:5, line:3336:72>
| |   |-ParagraphComment 0x5555d4c35770 <line:3334:5, col:77>
| |   | `-TextComment 0x5555d4c35740 <col:5, col:77> Text=" Represents a type that was referred to using an elaborated type keyword."
| |   `-ParagraphComment 0x5555d4c357c0 <line:3336:5, col:72>
| |     `-TextComment 0x5555d4c35790 <col:5, col:72> Text=" E.g., struct S, or via a qualified name, e.g., N::M::type, or both."
| |-EnumConstantDecl 0x5555d4ba2c60 <line:3385:3, col:23> col:3 CXType_ObjCObject 'int'
| | |-ConstantExpr 0x5555d4ba2c40 <col:23> 'int'
| | | |-value: Int 161
| | | `-IntegerLiteral 0x5555d4ba2c20 <col:23> 'int' 161
| | `-FullComment 0x5555d4c35910 <line:3334:5, line:3336:72>
| |   |-ParagraphComment 0x5555d4c35890 <line:3334:5, col:77>
| |   | `-TextComment 0x5555d4c35860 <col:5, col:77> Text=" Represents a type that was referred to using an elaborated type keyword."
| |   `-ParagraphComment 0x5555d4c358e0 <line:3336:5, col:72>
| |     `-TextComment 0x5555d4c358b0 <col:5, col:72> Text=" E.g., struct S, or via a qualified name, e.g., N::M::type, or both."
| |-EnumConstantDecl 0x5555d4ba2cf0 <line:3386:3, col:26> col:3 CXType_ObjCTypeParam 'int'
| | |-ConstantExpr 0x5555d4ba2cd0 <col:26> 'int'
| | | |-value: Int 162
| | | `-IntegerLiteral 0x5555d4ba2cb0 <col:26> 'int' 162
| | `-FullComment 0x5555d4c35a30 <line:3334:5, line:3336:72>
| |   |-ParagraphComment 0x5555d4c359b0 <line:3334:5, col:77>
| |   | `-TextComment 0x5555d4c35980 <col:5, col:77> Text=" Represents a type that was referred to using an elaborated type keyword."
| |   `-ParagraphComment 0x5555d4c35a00 <line:3336:5, col:72>
| |     `-TextComment 0x5555d4c359d0 <col:5, col:72> Text=" E.g., struct S, or via a qualified name, e.g., N::M::type, or both."
| |-EnumConstantDecl 0x5555d4ba2d80 <line:3387:3, col:23> col:3 CXType_Attributed 'int'
| | |-ConstantExpr 0x5555d4ba2d60 <col:23> 'int'
| | | |-value: Int 163
| | | `-IntegerLiteral 0x5555d4ba2d40 <col:23> 'int' 163
| | `-FullComment 0x5555d4c35b50 <line:3334:5, line:3336:72>
| |   |-ParagraphComment 0x5555d4c35ad0 <line:3334:5, col:77>
| |   | `-TextComment 0x5555d4c35aa0 <col:5, col:77> Text=" Represents a type that was referred to using an elaborated type keyword."
| |   `-ParagraphComment 0x5555d4c35b20 <line:3336:5, col:72>
| |     `-TextComment 0x5555d4c35af0 <col:5, col:72> Text=" E.g., struct S, or via a qualified name, e.g., N::M::type, or both."
| |-EnumConstantDecl 0x5555d4ba2e10 <line:3389:3, col:42> col:3 CXType_OCLIntelSubgroupAVCMcePayload 'int'
| | |-ConstantExpr 0x5555d4ba2df0 <col:42> 'int'
| | | |-value: Int 164
| | | `-IntegerLiteral 0x5555d4ba2dd0 <col:42> 'int' 164
| | `-FullComment 0x5555d4c35c70 <line:3334:5, line:3336:72>
| |   |-ParagraphComment 0x5555d4c35bf0 <line:3334:5, col:77>
| |   | `-TextComment 0x5555d4c35bc0 <col:5, col:77> Text=" Represents a type that was referred to using an elaborated type keyword."
| |   `-ParagraphComment 0x5555d4c35c40 <line:3336:5, col:72>
| |     `-TextComment 0x5555d4c35c10 <col:5, col:72> Text=" E.g., struct S, or via a qualified name, e.g., N::M::type, or both."
| |-EnumConstantDecl 0x5555d4ba2ea0 <line:3390:3, col:42> col:3 CXType_OCLIntelSubgroupAVCImePayload 'int'
| | |-ConstantExpr 0x5555d4ba2e80 <col:42> 'int'
| | | |-value: Int 165
| | | `-IntegerLiteral 0x5555d4ba2e60 <col:42> 'int' 165
| | `-FullComment 0x5555d4c35da0 <line:3334:5, line:3336:72>
| |   |-ParagraphComment 0x5555d4c35d10 <line:3334:5, col:77>
| |   | `-TextComment 0x5555d4c35ce0 <col:5, col:77> Text=" Represents a type that was referred to using an elaborated type keyword."
| |   `-ParagraphComment 0x5555d4c35d60 <line:3336:5, col:72>
| |     `-TextComment 0x5555d4c35d30 <col:5, col:72> Text=" E.g., struct S, or via a qualified name, e.g., N::M::type, or both."
| |-EnumConstantDecl 0x5555d4ba2f30 <line:3391:3, col:42> col:3 CXType_OCLIntelSubgroupAVCRefPayload 'int'
| | |-ConstantExpr 0x5555d4ba2f10 <col:42> 'int'
| | | |-value: Int 166
| | | `-IntegerLiteral 0x5555d4ba2ef0 <col:42> 'int' 166
| | `-FullComment 0x5555d4c35ec0 <line:3334:5, line:3336:72>
| |   |-ParagraphComment 0x5555d4c35e40 <line:3334:5, col:77>
| |   | `-TextComment 0x5555d4c35e10 <col:5, col:77> Text=" Represents a type that was referred to using an elaborated type keyword."
| |   `-ParagraphComment 0x5555d4c35e90 <line:3336:5, col:72>
| |     `-TextComment 0x5555d4c35e60 <col:5, col:72> Text=" E.g., struct S, or via a qualified name, e.g., N::M::type, or both."
| |-EnumConstantDecl 0x5555d4ba2fc0 <line:3392:3, col:42> col:3 CXType_OCLIntelSubgroupAVCSicPayload 'int'
| | |-ConstantExpr 0x5555d4ba2fa0 <col:42> 'int'
| | | |-value: Int 167
| | | `-IntegerLiteral 0x5555d4ba2f80 <col:42> 'int' 167
| | `-FullComment 0x5555d4c35fe0 <line:3334:5, line:3336:72>
| |   |-ParagraphComment 0x5555d4c35f60 <line:3334:5, col:77>
| |   | `-TextComment 0x5555d4c35f30 <col:5, col:77> Text=" Represents a type that was referred to using an elaborated type keyword."
| |   `-ParagraphComment 0x5555d4c35fb0 <line:3336:5, col:72>
| |     `-TextComment 0x5555d4c35f80 <col:5, col:72> Text=" E.g., struct S, or via a qualified name, e.g., N::M::type, or both."
| |-EnumConstantDecl 0x5555d4ba3050 <line:3393:3, col:41> col:3 CXType_OCLIntelSubgroupAVCMceResult 'int'
| | |-ConstantExpr 0x5555d4ba3030 <col:41> 'int'
| | | |-value: Int 168
| | | `-IntegerLiteral 0x5555d4ba3010 <col:41> 'int' 168
| | `-FullComment 0x5555d4c36100 <line:3334:5, line:3336:72>
| |   |-ParagraphComment 0x5555d4c36080 <line:3334:5, col:77>
| |   | `-TextComment 0x5555d4c36050 <col:5, col:77> Text=" Represents a type that was referred to using an elaborated type keyword."
| |   `-ParagraphComment 0x5555d4c360d0 <line:3336:5, col:72>
| |     `-TextComment 0x5555d4c360a0 <col:5, col:72> Text=" E.g., struct S, or via a qualified name, e.g., N::M::type, or both."
| |-EnumConstantDecl 0x5555d4ba30e0 <line:3394:3, col:41> col:3 CXType_OCLIntelSubgroupAVCImeResult 'int'
| | |-ConstantExpr 0x5555d4ba30c0 <col:41> 'int'
| | | |-value: Int 169
| | | `-IntegerLiteral 0x5555d4ba30a0 <col:41> 'int' 169
| | `-FullComment 0x5555d4c36220 <line:3334:5, line:3336:72>
| |   |-ParagraphComment 0x5555d4c361a0 <line:3334:5, col:77>
| |   | `-TextComment 0x5555d4c36170 <col:5, col:77> Text=" Represents a type that was referred to using an elaborated type keyword."
| |   `-ParagraphComment 0x5555d4c361f0 <line:3336:5, col:72>
| |     `-TextComment 0x5555d4c361c0 <col:5, col:72> Text=" E.g., struct S, or via a qualified name, e.g., N::M::type, or both."
| |-EnumConstantDecl 0x5555d4b87350 <line:3395:3, col:41> col:3 CXType_OCLIntelSubgroupAVCRefResult 'int'
| | |-ConstantExpr 0x5555d4ba3150 <col:41> 'int'
| | | |-value: Int 170
| | | `-IntegerLiteral 0x5555d4ba3130 <col:41> 'int' 170
| | `-FullComment 0x5555d4c36340 <line:3334:5, line:3336:72>
| |   |-ParagraphComment 0x5555d4c362c0 <line:3334:5, col:77>
| |   | `-TextComment 0x5555d4c36290 <col:5, col:77> Text=" Represents a type that was referred to using an elaborated type keyword."
| |   `-ParagraphComment 0x5555d4c36310 <line:3336:5, col:72>
| |     `-TextComment 0x5555d4c362e0 <col:5, col:72> Text=" E.g., struct S, or via a qualified name, e.g., N::M::type, or both."
| |-EnumConstantDecl 0x5555d4b873e0 <line:3396:3, col:41> col:3 CXType_OCLIntelSubgroupAVCSicResult 'int'
| | |-ConstantExpr 0x5555d4b873c0 <col:41> 'int'
| | | |-value: Int 171
| | | `-IntegerLiteral 0x5555d4b873a0 <col:41> 'int' 171
| | `-FullComment 0x5555d4c36460 <line:3334:5, line:3336:72>
| |   |-ParagraphComment 0x5555d4c363e0 <line:3334:5, col:77>
| |   | `-TextComment 0x5555d4c363b0 <col:5, col:77> Text=" Represents a type that was referred to using an elaborated type keyword."
| |   `-ParagraphComment 0x5555d4c36430 <line:3336:5, col:72>
| |     `-TextComment 0x5555d4c36400 <col:5, col:72> Text=" E.g., struct S, or via a qualified name, e.g., N::M::type, or both."
| |-EnumConstantDecl 0x5555d4b87470 <line:3397:3, col:59> col:3 CXType_OCLIntelSubgroupAVCImeResultSingleRefStreamout 'int'
| | |-ConstantExpr 0x5555d4b87450 <col:59> 'int'
| | | |-value: Int 172
| | | `-IntegerLiteral 0x5555d4b87430 <col:59> 'int' 172
| | `-FullComment 0x5555d4c36580 <line:3334:5, line:3336:72>
| |   |-ParagraphComment 0x5555d4c36500 <line:3334:5, col:77>
| |   | `-TextComment 0x5555d4c364d0 <col:5, col:77> Text=" Represents a type that was referred to using an elaborated type keyword."
| |   `-ParagraphComment 0x5555d4c36550 <line:3336:5, col:72>
| |     `-TextComment 0x5555d4c36520 <col:5, col:72> Text=" E.g., struct S, or via a qualified name, e.g., N::M::type, or both."
| |-EnumConstantDecl 0x5555d4b87500 <line:3398:3, col:57> col:3 CXType_OCLIntelSubgroupAVCImeResultDualRefStreamout 'int'
| | |-ConstantExpr 0x5555d4b874e0 <col:57> 'int'
| | | |-value: Int 173
| | | `-IntegerLiteral 0x5555d4b874c0 <col:57> 'int' 173
| | `-FullComment 0x5555d4c366a0 <line:3334:5, line:3336:72>
| |   |-ParagraphComment 0x5555d4c36620 <line:3334:5, col:77>
| |   | `-TextComment 0x5555d4c365f0 <col:5, col:77> Text=" Represents a type that was referred to using an elaborated type keyword."
| |   `-ParagraphComment 0x5555d4c36670 <line:3336:5, col:72>
| |     `-TextComment 0x5555d4c36640 <col:5, col:72> Text=" E.g., struct S, or via a qualified name, e.g., N::M::type, or both."
| |-EnumConstantDecl 0x5555d4b87590 <line:3399:3, col:52> col:3 CXType_OCLIntelSubgroupAVCImeSingleRefStreamin 'int'
| | |-ConstantExpr 0x5555d4b87570 <col:52> 'int'
| | | |-value: Int 174
| | | `-IntegerLiteral 0x5555d4b87550 <col:52> 'int' 174
| | `-FullComment 0x5555d4c367c0 <line:3334:5, line:3336:72>
| |   |-ParagraphComment 0x5555d4c36740 <line:3334:5, col:77>
| |   | `-TextComment 0x5555d4c36710 <col:5, col:77> Text=" Represents a type that was referred to using an elaborated type keyword."
| |   `-ParagraphComment 0x5555d4c36790 <line:3336:5, col:72>
| |     `-TextComment 0x5555d4c36760 <col:5, col:72> Text=" E.g., struct S, or via a qualified name, e.g., N::M::type, or both."
| |-EnumConstantDecl 0x5555d4b87620 <line:3401:3, col:50> col:3 CXType_OCLIntelSubgroupAVCImeDualRefStreamin 'int'
| | |-ConstantExpr 0x5555d4b87600 <col:50> 'int'
| | | |-value: Int 175
| | | `-IntegerLiteral 0x5555d4b875e0 <col:50> 'int' 175
| | `-FullComment 0x5555d4c368e0 <line:3334:5, line:3336:72>
| |   |-ParagraphComment 0x5555d4c36860 <line:3334:5, col:77>
| |   | `-TextComment 0x5555d4c36830 <col:5, col:77> Text=" Represents a type that was referred to using an elaborated type keyword."
| |   `-ParagraphComment 0x5555d4c368b0 <line:3336:5, col:72>
| |     `-TextComment 0x5555d4c36880 <col:5, col:72> Text=" E.g., struct S, or via a qualified name, e.g., N::M::type, or both."
| |-EnumConstantDecl 0x5555d4b876b0 <line:3403:3, col:22> col:3 CXType_ExtVector 'int'
| | |-ConstantExpr 0x5555d4b87690 <col:22> 'int'
| | | |-value: Int 176
| | | `-IntegerLiteral 0x5555d4b87670 <col:22> 'int' 176
| | `-FullComment 0x5555d4c36a00 <line:3334:5, line:3336:72>
| |   |-ParagraphComment 0x5555d4c36980 <line:3334:5, col:77>
| |   | `-TextComment 0x5555d4c36950 <col:5, col:77> Text=" Represents a type that was referred to using an elaborated type keyword."
| |   `-ParagraphComment 0x5555d4c369d0 <line:3336:5, col:72>
| |     `-TextComment 0x5555d4c369a0 <col:5, col:72> Text=" E.g., struct S, or via a qualified name, e.g., N::M::type, or both."
| `-EnumConstantDecl 0x5555d4b87740 <line:3404:3, col:19> col:3 CXType_Atomic 'int'
|   |-ConstantExpr 0x5555d4b87720 <col:19> 'int'
|   | |-value: Int 177
|   | `-IntegerLiteral 0x5555d4b87700 <col:19> 'int' 177
|   `-FullComment 0x5555d4c36b20 <line:3334:5, line:3336:72>
|     |-ParagraphComment 0x5555d4c36aa0 <line:3334:5, col:77>
|     | `-TextComment 0x5555d4c36a70 <col:5, col:77> Text=" Represents a type that was referred to using an elaborated type keyword."
|     `-ParagraphComment 0x5555d4c36af0 <line:3336:5, col:72>
|       `-TextComment 0x5555d4c36ac0 <col:5, col:72> Text=" E.g., struct S, or via a qualified name, e.g., N::M::type, or both."
|-EnumDecl 0x5555d4b877b8 <line:3410:1, line:3434:1> line:3410:6 CXCallingConv
| |-FullComment 0x5555d4c36bf0 <line:3408:3, col:54>
| | `-ParagraphComment 0x5555d4c36bc0 <col:3, col:54>
| |   `-TextComment 0x5555d4c36b90 <col:3, col:54> Text=" Describes the calling convention of a function type"
| |-EnumConstantDecl 0x5555d4b878c0 <line:3411:3, col:27> col:3 CXCallingConv_Default 'int'
| | `-ConstantExpr 0x5555d4b878a0 <col:27> 'int'
| |   |-value: Int 0
| |   `-IntegerLiteral 0x5555d4b87880 <col:27> 'int' 0
| |-EnumConstantDecl 0x5555d4b87950 <line:3412:3, col:21> col:3 CXCallingConv_C 'int'
| | `-ConstantExpr 0x5555d4b87930 <col:21> 'int'
| |   |-value: Int 1
| |   `-IntegerLiteral 0x5555d4b87910 <col:21> 'int' 1
| |-EnumConstantDecl 0x5555d4b879e0 <line:3413:3, col:30> col:3 CXCallingConv_X86StdCall 'int'
| | `-ConstantExpr 0x5555d4b879c0 <col:30> 'int'
| |   |-value: Int 2
| |   `-IntegerLiteral 0x5555d4b879a0 <col:30> 'int' 2
| |-EnumConstantDecl 0x5555d4b87a70 <line:3414:3, col:31> col:3 CXCallingConv_X86FastCall 'int'
| | `-ConstantExpr 0x5555d4b87a50 <col:31> 'int'
| |   |-value: Int 3
| |   `-IntegerLiteral 0x5555d4b87a30 <col:31> 'int' 3
| |-EnumConstantDecl 0x5555d4b87b00 <line:3415:3, col:31> col:3 CXCallingConv_X86ThisCall 'int'
| | `-ConstantExpr 0x5555d4b87ae0 <col:31> 'int'
| |   |-value: Int 4
| |   `-IntegerLiteral 0x5555d4b87ac0 <col:31> 'int' 4
| |-EnumConstantDecl 0x5555d4b87b90 <line:3416:3, col:29> col:3 CXCallingConv_X86Pascal 'int'
| | `-ConstantExpr 0x5555d4b87b70 <col:29> 'int'
| |   |-value: Int 5
| |   `-IntegerLiteral 0x5555d4b87b50 <col:29> 'int' 5
| |-EnumConstantDecl 0x5555d4b87c20 <line:3417:3, col:25> col:3 CXCallingConv_AAPCS 'int'
| | `-ConstantExpr 0x5555d4b87c00 <col:25> 'int'
| |   |-value: Int 6
| |   `-IntegerLiteral 0x5555d4b87be0 <col:25> 'int' 6
| |-EnumConstantDecl 0x5555d4b87cb0 <line:3418:3, col:29> col:3 CXCallingConv_AAPCS_VFP 'int'
| | `-ConstantExpr 0x5555d4b87c90 <col:29> 'int'
| |   |-value: Int 7
| |   `-IntegerLiteral 0x5555d4b87c70 <col:29> 'int' 7
| |-EnumConstantDecl 0x5555d4b87d40 <line:3419:3, col:30> col:3 CXCallingConv_X86RegCall 'int'
| | `-ConstantExpr 0x5555d4b87d20 <col:30> 'int'
| |   |-value: Int 8
| |   `-IntegerLiteral 0x5555d4b87d00 <col:30> 'int' 8
| |-EnumConstantDecl 0x5555d4b87dd0 <line:3420:3, col:32> col:3 CXCallingConv_IntelOclBicc 'int'
| | `-ConstantExpr 0x5555d4b87db0 <col:32> 'int'
| |   |-value: Int 9
| |   `-IntegerLiteral 0x5555d4b87d90 <col:32> 'int' 9
| |-EnumConstantDecl 0x5555d4b87e60 <line:3421:3, col:25> col:3 referenced CXCallingConv_Win64 'int'
| | `-ConstantExpr 0x5555d4b87e40 <col:25> 'int'
| |   |-value: Int 10
| |   `-IntegerLiteral 0x5555d4b87e20 <col:25> 'int' 10
| |-EnumConstantDecl 0x5555d4b87ef0 <line:3423:3, col:31> col:3 CXCallingConv_X86_64Win64 'int'
| | `-ConstantExpr 0x5555d4b87ed0 <col:31> 'int'
| |   |-value: Int 10
| |   `-DeclRefExpr 0x5555d4b87eb0 <col:31> 'int' EnumConstant 0x5555d4b87e60 'CXCallingConv_Win64' 'int'
| |-EnumConstantDecl 0x5555d4b87f80 <line:3424:3, col:30> col:3 CXCallingConv_X86_64SysV 'int'
| | `-ConstantExpr 0x5555d4b87f60 <col:30> 'int'
| |   |-value: Int 11
| |   `-IntegerLiteral 0x5555d4b87f40 <col:30> 'int' 11
| |-EnumConstantDecl 0x5555d4b88010 <line:3425:3, col:33> col:3 CXCallingConv_X86VectorCall 'int'
| | `-ConstantExpr 0x5555d4b87ff0 <col:33> 'int'
| |   |-value: Int 12
| |   `-IntegerLiteral 0x5555d4b87fd0 <col:33> 'int' 12
| |-EnumConstantDecl 0x5555d4b880a0 <line:3426:3, col:25> col:3 CXCallingConv_Swift 'int'
| | `-ConstantExpr 0x5555d4b88080 <col:25> 'int'
| |   |-value: Int 13
| |   `-IntegerLiteral 0x5555d4b88060 <col:25> 'int' 13
| |-EnumConstantDecl 0x5555d4b88130 <line:3427:3, col:32> col:3 CXCallingConv_PreserveMost 'int'
| | `-ConstantExpr 0x5555d4b88110 <col:32> 'int'
| |   |-value: Int 14
| |   `-IntegerLiteral 0x5555d4b880f0 <col:32> 'int' 14
| |-EnumConstantDecl 0x5555d4b881c0 <line:3428:3, col:31> col:3 CXCallingConv_PreserveAll 'int'
| | `-ConstantExpr 0x5555d4b881a0 <col:31> 'int'
| |   |-value: Int 15
| |   `-IntegerLiteral 0x5555d4b88180 <col:31> 'int' 15
| |-EnumConstantDecl 0x5555d4b88250 <line:3429:3, col:37> col:3 CXCallingConv_AArch64VectorCall 'int'
| | `-ConstantExpr 0x5555d4b88230 <col:37> 'int'
| |   |-value: Int 16
| |   `-IntegerLiteral 0x5555d4b88210 <col:37> 'int' 16
| |-EnumConstantDecl 0x5555d4b882e0 <line:3430:3, col:30> col:3 CXCallingConv_SwiftAsync 'int'
| | `-ConstantExpr 0x5555d4b882c0 <col:30> 'int'
| |   |-value: Int 17
| |   `-IntegerLiteral 0x5555d4b882a0 <col:30> 'int' 17
| |-EnumConstantDecl 0x5555d4ba41f0 <line:3432:3, col:27> col:3 CXCallingConv_Invalid 'int'
| | `-ConstantExpr 0x5555d4ba41d0 <col:27> 'int'
| |   |-value: Int 100
| |   `-IntegerLiteral 0x5555d4b88330 <col:27> 'int' 100
| `-EnumConstantDecl 0x5555d4ba4280 <line:3433:3, col:29> col:3 CXCallingConv_Unexposed 'int'
|   `-ConstantExpr 0x5555d4ba4260 <col:29> 'int'
|     |-value: Int 200
|     `-IntegerLiteral 0x5555d4ba4240 <col:29> 'int' 200
|-RecordDecl 0x5555d4ba42f8 <line:3440:9, line:3443:1> line:3440:9 struct definition
| |-FullComment 0x5555d4c36d10 <line:3437:3, line:3439:1>
| | |-ParagraphComment 0x5555d4c36c90 <line:3437:3, col:54>
| | | `-TextComment 0x5555d4c36c60 <col:3, col:54> Text=" The type of an element in the abstract syntax tree."
| | `-ParagraphComment 0x5555d4c36ce0 <line:3439:1>
| |   `-TextComment 0x5555d4c36cb0 <col:1> Text=" "
| |-FieldDecl 0x5555d4ba43f0 <line:3441:3, col:19> col:19 kind 'enum CXTypeKind':'enum CXTypeKind'
| `-FieldDecl 0x5555d4ba44e0 <line:3442:3, col:15> col:9 data 'void *[2]'
|-TypedefDecl 0x5555d4ba4588 <line:3440:1, line:3443:3> col:3 referenced CXType 'struct CXType':'CXType'
| |-ElaboratedType 0x5555d4ba4530 'struct CXType' sugar
| | `-RecordType 0x5555d4ba4380 'CXType'
| |   `-Record 0x5555d4ba42f8 ''
| `-FullComment 0x5555d4c36e30 <line:3437:3, line:3439:1>
|   |-ParagraphComment 0x5555d4c36db0 <line:3437:3, col:54>
|   | `-TextComment 0x5555d4c36d80 <col:3, col:54> Text=" The type of an element in the abstract syntax tree."
|   `-ParagraphComment 0x5555d4c36e00 <line:3439:1>
|     `-TextComment 0x5555d4c36dd0 <col:1> Text=" "
|-FunctionDecl 0x5555d4ba47a8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:3448:53> col:23 clang_getCursorType 'CXType (CXCursor)'
| |-ParmVarDecl 0x5555d4ba46b0 <col:43, col:52> col:52 C 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4ba4858 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c36f00 </workspace/clang-c/Index.h:3446:3, col:44>
|   `-ParagraphComment 0x5555d4c36ed0 <col:3, col:44>
|     `-TextComment 0x5555d4c36ea0 <col:3, col:44> Text=" Retrieve the type of a CXCursor (if any)."
|-FunctionDecl 0x5555d4ba49f8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:3456:56> col:25 clang_getTypeSpelling 'CXString (CXType)'
| |-ParmVarDecl 0x5555d4ba4908 <col:47, col:54> col:54 CT 'CXType':'CXType'
| |-VisibilityAttr 0x5555d4ba4aa8 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c37040 </workspace/clang-c/Index.h:3451:3, line:3454:55>
|   |-ParagraphComment 0x5555d4c36fc0 <line:3451:3, line:3452:55>
|   | |-TextComment 0x5555d4c36f70 <line:3451:3, col:58> Text=" Pretty-print the underlying type using the rules of the"
|   | `-TextComment 0x5555d4c36f90 <line:3452:3, col:55> Text=" language of the translation unit from which it came."
|   `-ParagraphComment 0x5555d4c37010 <line:3454:3, col:55>
|     `-TextComment 0x5555d4c36fe0 <col:3, col:55> Text=" If the type is invalid, an empty string is returned."
|-FunctionDecl 0x5555d4ba4be8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:3464:68> col:23 clang_getTypedefDeclUnderlyingType 'CXType (CXCursor)'
| |-ParmVarDecl 0x5555d4ba4b58 <col:58, col:67> col:67 C 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4ba4c98 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c37180 </workspace/clang-c/Index.h:3459:3, line:3462:12>
|   |-ParagraphComment 0x5555d4c370e0 <line:3459:3, col:57>
|   | `-TextComment 0x5555d4c370b0 <col:3, col:57> Text=" Retrieve the underlying type of a typedef declaration."
|   `-ParagraphComment 0x5555d4c37150 <line:3461:3, line:3462:12>
|     |-TextComment 0x5555d4c37100 <line:3461:3, col:77> Text=" If the cursor does not reference a typedef declaration, an invalid type is"
|     `-TextComment 0x5555d4c37120 <line:3462:3, col:12> Text=" returned."
|-FunctionDecl 0x5555d4ba4dd8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:3472:62> col:23 clang_getEnumDeclIntegerType 'CXType (CXCursor)'
| |-ParmVarDecl 0x5555d4ba4d48 <col:52, col:61> col:61 C 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4ba4e88 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c372c0 </workspace/clang-c/Index.h:3467:3, line:3470:12>
|   |-ParagraphComment 0x5555d4c37220 <line:3467:3, col:52>
|   | `-TextComment 0x5555d4c371f0 <col:3, col:52> Text=" Retrieve the integer type of an enum declaration."
|   `-ParagraphComment 0x5555d4c37290 <line:3469:3, line:3470:12>
|     |-TextComment 0x5555d4c37240 <line:3469:3, col:75> Text=" If the cursor does not reference an enum declaration, an invalid type is"
|     `-TextComment 0x5555d4c37260 <line:3470:3, col:12> Text=" returned."
|-FunctionDecl 0x5555d4ba5030 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:3482:67> col:26 clang_getEnumConstantDeclValue 'long long (CXCursor)'
| |-ParmVarDecl 0x5555d4ba4f38 <col:57, col:66> col:66 C 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4ba50e0 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c37450 </workspace/clang-c/Index.h:3475:3, line:3480:60>
|   |-ParagraphComment 0x5555d4c37380 <line:3475:3, line:3476:14>
|   | |-TextComment 0x5555d4c37330 <line:3475:3, col:73> Text=" Retrieve the integer value of an enum constant declaration as a signed"
|   | `-TextComment 0x5555d4c37350 <line:3476:3, col:14> Text="  long long."
|   `-ParagraphComment 0x5555d4c37420 <line:3478:3, line:3480:60>
|     |-TextComment 0x5555d4c373a0 <line:3478:3, col:78> Text=" If the cursor does not reference an enum constant declaration, LLONG_MIN is"
|     |-TextComment 0x5555d4c373c0 <line:3479:3, col:79> Text=" returned. Since this is also potentially a valid constant value, the kind of"
|     `-TextComment 0x5555d4c373e0 <line:3480:3, col:60> Text=" the cursor must be verified before calling this function."
|-FunctionDecl 0x5555d4ba52e0 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:3493:50> col:1 clang_getEnumConstantDeclUnsignedValue 'unsigned long long (CXCursor)'
| |-ParmVarDecl 0x5555d4ba51e0 <col:40, col:49> col:49 C 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4ba5390 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c375e0 </workspace/clang-c/Index.h:3485:3, line:3490:60>
|   |-ParagraphComment 0x5555d4c37510 <line:3485:3, line:3486:14>
|   | |-TextComment 0x5555d4c374c0 <line:3485:3, col:76> Text=" Retrieve the integer value of an enum constant declaration as an unsigned"
|   | `-TextComment 0x5555d4c374e0 <line:3486:3, col:14> Text="  long long."
|   `-ParagraphComment 0x5555d4c375b0 <line:3488:3, line:3490:60>
|     |-TextComment 0x5555d4c37530 <line:3488:3, col:79> Text=" If the cursor does not reference an enum constant declaration, ULLONG_MAX is"
|     |-TextComment 0x5555d4c37550 <line:3489:3, col:79> Text=" returned. Since this is also potentially a valid constant value, the kind of"
|     `-TextComment 0x5555d4c37570 <line:3490:3, col:60> Text=" the cursor must be verified before calling this function."
|-FunctionDecl 0x5555d4ba54e0 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:3500:57> col:20 clang_getFieldDeclBitWidth 'int (CXCursor)'
| |-ParmVarDecl 0x5555d4ba5448 <col:47, col:56> col:56 C 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4ba5590 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c37700 </workspace/clang-c/Index.h:3496:3, line:3498:80>
|   |-ParagraphComment 0x5555d4c37680 <line:3496:3, col:67>
|   | `-TextComment 0x5555d4c37650 <col:3, col:67> Text=" Retrieve the bit width of a bit field declaration as an integer."
|   `-ParagraphComment 0x5555d4c376d0 <line:3498:3, col:80>
|     `-TextComment 0x5555d4c376a0 <col:3, col:80> Text=" If a cursor that is not a bit field declaration is passed in, -1 is returned."
|-FunctionDecl 0x5555d4ba56e0 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:3509:59> col:20 clang_Cursor_getNumArguments 'int (CXCursor)'
| |-ParmVarDecl 0x5555d4ba5648 <col:49, col:58> col:58 C 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4ba5790 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c37860 </workspace/clang-c/Index.h:3503:3, line:3507:74>
|   |-ParagraphComment 0x5555d4c377c0 <line:3503:3, line:3504:10>
|   | |-TextComment 0x5555d4c37770 <line:3503:3, col:72> Text=" Retrieve the number of non-variadic arguments associated with a given"
|   | `-TextComment 0x5555d4c37790 <line:3504:3, col:10> Text=" cursor."
|   `-ParagraphComment 0x5555d4c37830 <line:3506:3, line:3507:74>
|     |-TextComment 0x5555d4c377e0 <line:3506:3, col:69> Text=" The number of arguments can be determined for calls as well as for"
|     `-TextComment 0x5555d4c37800 <line:3507:3, col:74> Text=" declarations of functions or methods. For other cursors -1 is returned."
|-FunctionDecl 0x5555d4ba59d8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:3518:72> col:25 clang_Cursor_getArgument 'CXCursor (CXCursor, unsigned int)'
| |-ParmVarDecl 0x5555d4ba5848 <col:50, col:59> col:59 C 'CXCursor':'CXCursor'
| |-ParmVarDecl 0x5555d4ba58c8 <col:62, col:71> col:71 i 'unsigned int'
| |-VisibilityAttr 0x5555d4ba5a90 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c379d0 </workspace/clang-c/Index.h:3512:3, line:3516:30>
|   |-ParagraphComment 0x5555d4c37900 <line:3512:3, col:56>
|   | `-TextComment 0x5555d4c378d0 <col:3, col:56> Text=" Retrieve the argument cursor of a function or method."
|   `-ParagraphComment 0x5555d4c379a0 <line:3514:3, line:3516:30>
|     |-TextComment 0x5555d4c37920 <line:3514:3, col:78> Text=" The argument cursor can be determined for calls as well as for declarations"
|     |-TextComment 0x5555d4c37940 <line:3515:3, col:73> Text=" of functions or methods. For other cursors and for invalid indices, an"
|     `-TextComment 0x5555d4c37960 <line:3516:3, col:30> Text=" invalid cursor is returned."
|-EnumDecl 0x5555d4ba5b18 <line:3526:1, line:3538:1> line:3526:6 CXTemplateArgumentKind
| |-FullComment 0x5555d4c37b10 <line:3521:3, line:3524:24>
| | |-ParagraphComment 0x5555d4c37a70 <line:3521:3, col:45>
| | | `-TextComment 0x5555d4c37a40 <col:3, col:45> Text=" Describes the kind of a template argument."
| | `-ParagraphComment 0x5555d4c37ae0 <line:3523:3, line:3524:24>
| |   |-TextComment 0x5555d4c37a90 <line:3523:3, col:72> Text=" See the definition of llvm::clang::TemplateArgument::ArgKind for full"
| |   `-TextComment 0x5555d4c37ab0 <line:3524:3, col:24> Text=" element descriptions."
| |-EnumConstantDecl 0x5555d4ba5be0 <line:3527:3> col:3 CXTemplateArgumentKind_Null 'int'
| |-EnumConstantDecl 0x5555d4ba5c30 <line:3528:3> col:3 CXTemplateArgumentKind_Type 'int'
| |-EnumConstantDecl 0x5555d4ba5c80 <line:3529:3> col:3 CXTemplateArgumentKind_Declaration 'int'
| |-EnumConstantDecl 0x5555d4ba5cd0 <line:3530:3> col:3 CXTemplateArgumentKind_NullPtr 'int'
| |-EnumConstantDecl 0x5555d4ba5d20 <line:3531:3> col:3 CXTemplateArgumentKind_Integral 'int'
| |-EnumConstantDecl 0x5555d4ba5d70 <line:3532:3> col:3 CXTemplateArgumentKind_Template 'int'
| |-EnumConstantDecl 0x5555d4ba5dc0 <line:3533:3> col:3 CXTemplateArgumentKind_TemplateExpansion 'int'
| |-EnumConstantDecl 0x5555d4ba5e10 <line:3534:3> col:3 CXTemplateArgumentKind_Expression 'int'
| |-EnumConstantDecl 0x5555d4ba5e60 <line:3535:3> col:3 CXTemplateArgumentKind_Pack 'int'
| `-EnumConstantDecl 0x5555d4ba5eb0 <line:3537:3> col:3 CXTemplateArgumentKind_Invalid 'int'
|-FunctionDecl 0x5555d4ba5ff0 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:3556:67> col:20 clang_Cursor_getNumTemplateArguments 'int (CXCursor)'
| |-ParmVarDecl 0x5555d4ba5f58 <col:57, col:66> col:66 C 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4ba60a0 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c37f00 </workspace/clang-c/Index.h:3541:3, line:3554:48>
|   |-ParagraphComment 0x5555d4c37bd0 <line:3541:3, line:3542:27>
|   | |-TextComment 0x5555d4c37b80 <line:3541:3, col:71> Text="Returns the number of template args of a function decl representing a"
|   | `-TextComment 0x5555d4c37ba0 <line:3542:3, col:27> Text=" template specialization."
|   |-ParagraphComment 0x5555d4c37c40 <line:3544:3, line:3545:31>
|   | |-TextComment 0x5555d4c37bf0 <line:3544:3, col:70> Text=" If the argument cursor cannot be converted into a template function"
|   | `-TextComment 0x5555d4c37c10 <line:3545:3, col:31> Text=" declaration, -1 is returned."
|   |-ParagraphComment 0x5555d4c37d30 <line:3547:3, line:3549:23>
|   | |-TextComment 0x5555d4c37c60 <line:3547:3, col:65> Text=" For example, for the following declaration and specialization:"
|   | |-TextComment 0x5555d4c37c80 <line:3548:3, col:14> Text="   template "
|   | |-TextComment 0x5555d4c37ca0 <col:15, col:23> Text="<typename"
|   | |-TextComment 0x5555d4c37cc0 <col:24, col:48> Text=" T, int kInt, bool kBool>"
|   | `-TextComment 0x5555d4c37ce0 <line:3549:3, col:23> Text="   void foo() { ... }"
|   |-ParagraphComment 0x5555d4c37e60 <line:3551:3, line:3552:33>
|   | |-TextComment 0x5555d4c37d50 <line:3551:3, col:14> Text="   template "
|   | |-TextComment 0x5555d4c37d70 <col:15> Text="<"
|   | |-TextComment 0x5555d4c37db0 <col:16> Text=">"
|   | |-TextComment 0x5555d4c37dd0 <line:3552:3, col:13> Text="   void foo"
|   | |-TextComment 0x5555d4c37df0 <col:14, col:19> Text="<float"
|   | `-TextComment 0x5555d4c37e10 <col:20, col:33> Text=", -7, true>();"
|   `-ParagraphComment 0x5555d4c37eb0 <line:3554:3, col:48>
|     `-TextComment 0x5555d4c37e80 <col:3, col:48> Text=" The value 3 would be returned from this call."
|-FunctionDecl 0x5555d4ba8088 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:3575:60> col:1 clang_Cursor_getTemplateArgumentKind 'enum CXTemplateArgumentKind (CXCursor, unsigned int)'
| |-ParmVarDecl 0x5555d4ba6158 <col:38, col:47> col:47 C 'CXCursor':'CXCursor'
| |-ParmVarDecl 0x5555d4ba7f30 <col:50, col:59> col:59 I 'unsigned int'
| |-VisibilityAttr 0x5555d4ba8140 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c382d0 </workspace/clang-c/Index.h:3559:3, line:3572:16>
|   |-ParagraphComment 0x5555d4c37fa0 <line:3559:3, col:69>
|   | `-TextComment 0x5555d4c37f70 <col:3, col:69> Text=" Retrieve the kind of the I'th template argument of the CXCursor C."
|   |-ParagraphComment 0x5555d4c38010 <line:3561:3, line:3562:38>
|   | |-TextComment 0x5555d4c37fc0 <line:3561:3, col:73> Text=" If the argument CXCursor does not represent a FunctionDecl, an invalid"
|   | `-TextComment 0x5555d4c37fe0 <line:3562:3, col:38> Text=" template argument kind is returned."
|   |-ParagraphComment 0x5555d4c38100 <line:3564:3, line:3566:23>
|   | |-TextComment 0x5555d4c38030 <line:3564:3, col:65> Text=" For example, for the following declaration and specialization:"
|   | |-TextComment 0x5555d4c38050 <line:3565:3, col:14> Text="   template "
|   | |-TextComment 0x5555d4c38070 <col:15, col:23> Text="<typename"
|   | |-TextComment 0x5555d4c38090 <col:24, col:48> Text=" T, int kInt, bool kBool>"
|   | `-TextComment 0x5555d4c380b0 <line:3566:3, col:23> Text="   void foo() { ... }"
|   |-ParagraphComment 0x5555d4c38210 <line:3568:3, line:3569:33>
|   | |-TextComment 0x5555d4c38120 <line:3568:3, col:14> Text="   template "
|   | |-TextComment 0x5555d4c38140 <col:15> Text="<"
|   | |-TextComment 0x5555d4c38160 <col:16> Text=">"
|   | |-TextComment 0x5555d4c38180 <line:3569:3, col:13> Text="   void foo"
|   | |-TextComment 0x5555d4c381a0 <col:14, col:19> Text="<float"
|   | `-TextComment 0x5555d4c381c0 <col:20, col:33> Text=", -7, true>();"
|   `-ParagraphComment 0x5555d4c38280 <line:3571:3, line:3572:16>
|     |-TextComment 0x5555d4c38230 <line:3571:3, col:70> Text=" For I = 0, 1, and 2, Type, Integral, and Integral will be returned,"
|     `-TextComment 0x5555d4c38250 <line:3572:3, col:16> Text=" respectively."
|-FunctionDecl 0x5555d4ba8388 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:3596:70> line:3595:23 clang_Cursor_getTemplateArgumentType 'CXType (CXCursor, unsigned int)'
| |-ParmVarDecl 0x5555d4ba81f8 <col:60, col:69> col:69 C 'CXCursor':'CXCursor'
| |-ParmVarDecl 0x5555d4ba8278 <line:3596:60, col:69> col:69 I 'unsigned int'
| |-VisibilityAttr 0x5555d4ba8440 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c386f0 </workspace/clang-c/Index.h:3578:3, line:3593:50>
|   |-ParagraphComment 0x5555d4c38390 <line:3578:3, line:3579:57>
|   | |-TextComment 0x5555d4c38340 <line:3578:3, col:69> Text=" Retrieve a CXType representing the type of a TemplateArgument of a"
|   | `-TextComment 0x5555d4c38360 <line:3579:3, col:57> Text="  function decl representing a template specialization."
|   |-ParagraphComment 0x5555d4c38430 <line:3581:3, line:3583:15>
|   | |-TextComment 0x5555d4c383b0 <line:3581:3, col:72> Text=" If the argument CXCursor does not represent a FunctionDecl whose I'th"
|   | |-TextComment 0x5555d4c383d0 <line:3582:3, col:78> Text=" template argument has a kind of CXTemplateArgKind_Integral, an invalid type"
|   | `-TextComment 0x5555d4c383f0 <line:3583:3, col:15> Text=" is returned."
|   |-ParagraphComment 0x5555d4c38520 <line:3585:3, line:3587:23>
|   | |-TextComment 0x5555d4c38450 <line:3585:3, col:65> Text=" For example, for the following declaration and specialization:"
|   | |-TextComment 0x5555d4c38470 <line:3586:3, col:14> Text="   template "
|   | |-TextComment 0x5555d4c38490 <col:15, col:23> Text="<typename"
|   | |-TextComment 0x5555d4c384b0 <col:24, col:48> Text=" T, int kInt, bool kBool>"
|   | `-TextComment 0x5555d4c384d0 <line:3587:3, col:23> Text="   void foo() { ... }"
|   |-ParagraphComment 0x5555d4c38630 <line:3589:3, line:3590:33>
|   | |-TextComment 0x5555d4c38540 <line:3589:3, col:14> Text="   template "
|   | |-TextComment 0x5555d4c38560 <col:15> Text="<"
|   | |-TextComment 0x5555d4c38580 <col:16> Text=">"
|   | |-TextComment 0x5555d4c385a0 <line:3590:3, col:13> Text="   void foo"
|   | |-TextComment 0x5555d4c385c0 <col:14, col:19> Text="<float"
|   | `-TextComment 0x5555d4c385e0 <col:20, col:33> Text=", -7, true>();"
|   `-ParagraphComment 0x5555d4c386a0 <line:3592:3, line:3593:50>
|     |-TextComment 0x5555d4c38650 <line:3592:3, col:51> Text=" If called with I = 0, "float", will be returned."
|     `-TextComment 0x5555d4c38670 <line:3593:3, col:50> Text=" Invalid types will be returned for I == 1 or 2."
|-FunctionDecl 0x5555d4ba8690 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:3616:74> line:3615:26 clang_Cursor_getTemplateArgumentValue 'long long (CXCursor, unsigned int)'
| |-ParmVarDecl 0x5555d4ba84f8 <col:64, col:73> col:73 C 'CXCursor':'CXCursor'
| |-ParmVarDecl 0x5555d4ba8578 <line:3616:64, col:73> col:73 I 'unsigned int'
| |-VisibilityAttr 0x5555d4ba8748 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c38ae0 </workspace/clang-c/Index.h:3599:3, line:3613:53>
|   |-ParagraphComment 0x5555d4c387b0 <line:3599:3, line:3600:71>
|   | |-TextComment 0x5555d4c38760 <line:3599:3, col:68> Text=" Retrieve the value of an Integral TemplateArgument (of a function"
|   | `-TextComment 0x5555d4c38780 <line:3600:3, col:71> Text="  decl representing a template specialization) as a signed long long."
|   |-ParagraphComment 0x5555d4c38820 <line:3602:3, line:3603:73>
|   | |-TextComment 0x5555d4c387d0 <line:3602:3, col:80> Text=" It is undefined to call this function on a CXCursor that does not represent a"
|   | `-TextComment 0x5555d4c387f0 <line:3603:3, col:73> Text=" FunctionDecl or whose I'th template argument is not an integral value."
|   |-ParagraphComment 0x5555d4c38910 <line:3605:3, line:3607:23>
|   | |-TextComment 0x5555d4c38840 <line:3605:3, col:65> Text=" For example, for the following declaration and specialization:"
|   | |-TextComment 0x5555d4c38860 <line:3606:3, col:14> Text="   template "
|   | |-TextComment 0x5555d4c38880 <col:15, col:23> Text="<typename"
|   | |-TextComment 0x5555d4c388a0 <col:24, col:48> Text=" T, int kInt, bool kBool>"
|   | `-TextComment 0x5555d4c388c0 <line:3607:3, col:23> Text="   void foo() { ... }"
|   |-ParagraphComment 0x5555d4c38a20 <line:3609:3, line:3610:33>
|   | |-TextComment 0x5555d4c38930 <line:3609:3, col:14> Text="   template "
|   | |-TextComment 0x5555d4c38950 <col:15> Text="<"
|   | |-TextComment 0x5555d4c38970 <col:16> Text=">"
|   | |-TextComment 0x5555d4c38990 <line:3610:3, col:13> Text="   void foo"
|   | |-TextComment 0x5555d4c389b0 <col:14, col:19> Text="<float"
|   | `-TextComment 0x5555d4c389d0 <col:20, col:33> Text=", -7, true>();"
|   `-ParagraphComment 0x5555d4c38a90 <line:3612:3, line:3613:53>
|     |-TextComment 0x5555d4c38a40 <line:3612:3, col:72> Text=" If called with I = 1 or 2, -7 or true will be returned, respectively."
|     `-TextComment 0x5555d4c38a60 <line:3613:3, col:53> Text=" For I == 0, this function's behavior is undefined."
|-FunctionDecl 0x5555d4ba8990 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:3636:69> col:1 clang_Cursor_getTemplateArgumentUnsignedValue 'unsigned long long (CXCursor, unsigned int)'
| |-ParmVarDecl 0x5555d4ba87f8 <col:47, col:56> col:56 C 'CXCursor':'CXCursor'
| |-ParmVarDecl 0x5555d4ba8878 <col:59, col:68> col:68 I 'unsigned int'
| |-VisibilityAttr 0x5555d4ba8a48 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c38ed0 </workspace/clang-c/Index.h:3619:3, line:3633:53>
|   |-ParagraphComment 0x5555d4c38ba0 <line:3619:3, line:3620:74>
|   | |-TextComment 0x5555d4c38b50 <line:3619:3, col:68> Text=" Retrieve the value of an Integral TemplateArgument (of a function"
|   | `-TextComment 0x5555d4c38b70 <line:3620:3, col:74> Text="  decl representing a template specialization) as an unsigned long long."
|   |-ParagraphComment 0x5555d4c38c10 <line:3622:3, line:3623:73>
|   | |-TextComment 0x5555d4c38bc0 <line:3622:3, col:80> Text=" It is undefined to call this function on a CXCursor that does not represent a"
|   | `-TextComment 0x5555d4c38be0 <line:3623:3, col:73> Text=" FunctionDecl or whose I'th template argument is not an integral value."
|   |-ParagraphComment 0x5555d4c38d00 <line:3625:3, line:3627:23>
|   | |-TextComment 0x5555d4c38c30 <line:3625:3, col:65> Text=" For example, for the following declaration and specialization:"
|   | |-TextComment 0x5555d4c38c50 <line:3626:3, col:14> Text="   template "
|   | |-TextComment 0x5555d4c38c70 <col:15, col:23> Text="<typename"
|   | |-TextComment 0x5555d4c38c90 <col:24, col:48> Text=" T, int kInt, bool kBool>"
|   | `-TextComment 0x5555d4c38cb0 <line:3627:3, col:23> Text="   void foo() { ... }"
|   |-ParagraphComment 0x5555d4c38e10 <line:3629:3, line:3630:41>
|   | |-TextComment 0x5555d4c38d20 <line:3629:3, col:14> Text="   template "
|   | |-TextComment 0x5555d4c38d40 <col:15> Text="<"
|   | |-TextComment 0x5555d4c38d60 <col:16> Text=">"
|   | |-TextComment 0x5555d4c38d80 <line:3630:3, col:13> Text="   void foo"
|   | |-TextComment 0x5555d4c38da0 <col:14, col:19> Text="<float"
|   | `-TextComment 0x5555d4c38dc0 <col:20, col:41> Text=", 2147483649, true>();"
|   `-ParagraphComment 0x5555d4c38e80 <line:3632:3, line:3633:53>
|     |-TextComment 0x5555d4c38e30 <line:3632:3, col:80> Text=" If called with I = 1 or 2, 2147483649 or true will be returned, respectively."
|     `-TextComment 0x5555d4c38e50 <line:3633:3, col:53> Text=" For I == 0, this function's behavior is undefined."
|-FunctionDecl 0x5555d4ba8c90 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:3644:60> col:25 clang_equalTypes 'unsigned int (CXType, CXType)'
| |-ParmVarDecl 0x5555d4ba8af8 <col:42, col:49> col:49 A 'CXType':'CXType'
| |-ParmVarDecl 0x5555d4ba8b70 <col:52, col:59> col:59 B 'CXType':'CXType'
| |-VisibilityAttr 0x5555d4ba8d48 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c390a0 </workspace/clang-c/Index.h:3639:3, line:3642:27>
|   |-ParagraphComment 0x5555d4c38f70 <line:3639:3, col:57>
|   | `-TextComment 0x5555d4c38f40 <col:3, col:57> Text=" Determine whether two CXTypes represent the same type."
|   |-ParagraphComment 0x5555d4c38fc0 <line:3641:3>
|   | `-TextComment 0x5555d4c38f90 <col:3> Text=" "
|   `-BlockCommandComment 0x5555d4c38fe0 <col:4, line:3642:27> Name="returns"
|     `-ParagraphComment 0x5555d4c39060 <line:3641:12, line:3642:27>
|       |-TextComment 0x5555d4c39010 <line:3641:12, col:63> Text=" non-zero if the CXTypes represent the same type and"
|       `-TextComment 0x5555d4c39030 <line:3642:3, col:27> Text="          zero otherwise."
|-FunctionDecl 0x5555d4ba8f40 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:3654:54> col:23 clang_getCanonicalType 'CXType (CXType)'
| |-ParmVarDecl 0x5555d4ba8df8 <col:46, col:53> col:53 T 'CXType':'CXType'
| |-VisibilityAttr 0x5555d4ba8ff0 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c39230 </workspace/clang-c/Index.h:3647:3, line:3652:56>
|   |-ParagraphComment 0x5555d4c39140 <line:3647:3, col:42>
|   | `-TextComment 0x5555d4c39110 <col:3, col:42> Text=" Return the canonical type for a CXType."
|   `-ParagraphComment 0x5555d4c39200 <line:3649:3, line:3652:56>
|     |-TextComment 0x5555d4c39160 <line:3649:3, col:66> Text=" Clang's type system explicitly models typedefs and all the ways"
|     |-TextComment 0x5555d4c39180 <line:3650:3, col:76> Text=" a specific type can be represented.  The canonical type is the underlying"
|     |-TextComment 0x5555d4c391a0 <line:3651:3, col:71> Text=" type with all the "sugar" removed.  For example, if 'T' is a typedef"
|     `-TextComment 0x5555d4c391c0 <line:3652:3, col:56> Text=" for 'int', the canonical type for 'T' would be 'int'."
|-FunctionDecl 0x5555d4ba91a0 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:3661:60> col:25 clang_isConstQualifiedType 'unsigned int (CXType)'
| |-ParmVarDecl 0x5555d4ba90a8 <col:52, col:59> col:59 T 'CXType':'CXType'
| |-VisibilityAttr 0x5555d4ba9250 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c39350 </workspace/clang-c/Index.h:3657:3, line:3659:19>
|   `-ParagraphComment 0x5555d4c39320 <line:3657:3, line:3659:19>
|     |-TextComment 0x5555d4c392a0 <line:3657:3, col:60> Text=" Determine whether a CXType has the "const" qualifier set,"
|     |-TextComment 0x5555d4c392c0 <line:3658:3, col:68> Text=" without looking through typedefs that may have added "const" at a"
|     `-TextComment 0x5555d4c392e0 <line:3659:3, col:19> Text=" different level."
|-FunctionDecl 0x5555d4ba93a0 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:3667:68> col:25 clang_Cursor_isMacroFunctionLike 'unsigned int (CXCursor)'
| |-ParmVarDecl 0x5555d4ba9308 <col:58, col:67> col:67 C 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4ba9450 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c39440 </workspace/clang-c/Index.h:3664:3, line:3665:17>
|   `-ParagraphComment 0x5555d4c39410 <line:3664:3, line:3665:17>
|     |-TextComment 0x5555d4c393c0 <line:3664:3, col:52> Text=" Determine whether a  CXCursor that is a macro, is"
|     `-TextComment 0x5555d4c393e0 <line:3665:3, col:17> Text=" function like."
|-FunctionDecl 0x5555d4ba95a0 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:3673:63> col:25 clang_Cursor_isMacroBuiltin 'unsigned int (CXCursor)'
| |-ParmVarDecl 0x5555d4ba9508 <col:53, col:62> col:62 C 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4ba9650 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c39530 </workspace/clang-c/Index.h:3670:3, line:3671:15>
|   `-ParagraphComment 0x5555d4c39500 <line:3670:3, line:3671:15>
|     |-TextComment 0x5555d4c394b0 <line:3670:3, col:54> Text=" Determine whether a  CXCursor that is a macro, is a"
|     `-TextComment 0x5555d4c394d0 <line:3671:3, col:15> Text=" builtin one."
|-FunctionDecl 0x5555d4ba97a0 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:3679:66> col:25 clang_Cursor_isFunctionInlined 'unsigned int (CXCursor)'
| |-ParmVarDecl 0x5555d4ba9708 <col:56, col:65> col:65 C 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4ba9850 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c39620 </workspace/clang-c/Index.h:3676:3, line:3677:22>
|   `-ParagraphComment 0x5555d4c395f0 <line:3676:3, line:3677:22>
|     |-TextComment 0x5555d4c395a0 <line:3676:3, col:70> Text=" Determine whether a  CXCursor that is a function declaration, is an"
|     `-TextComment 0x5555d4c395c0 <line:3677:3, col:22> Text=" inline declaration."
|-FunctionDecl 0x5555d4ba99a0 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:3686:63> col:25 clang_isVolatileQualifiedType 'unsigned int (CXType)'
| |-ParmVarDecl 0x5555d4ba9908 <col:55, col:62> col:62 T 'CXType':'CXType'
| |-VisibilityAttr 0x5555d4ba9a50 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c39740 </workspace/clang-c/Index.h:3682:3, line:3684:21>
|   `-ParagraphComment 0x5555d4c39710 <line:3682:3, line:3684:21>
|     |-TextComment 0x5555d4c39690 <line:3682:3, col:63> Text=" Determine whether a CXType has the "volatile" qualifier set,"
|     |-TextComment 0x5555d4c396b0 <line:3683:3, col:69> Text=" without looking through typedefs that may have added "volatile" at"
|     `-TextComment 0x5555d4c396d0 <line:3684:3, col:21> Text=" a different level."
|-FunctionDecl 0x5555d4ba9ba0 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:3693:63> col:25 clang_isRestrictQualifiedType 'unsigned int (CXType)'
| |-ParmVarDecl 0x5555d4ba9b08 <col:55, col:62> col:62 T 'CXType':'CXType'
| |-VisibilityAttr 0x5555d4ba9c50 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c39860 </workspace/clang-c/Index.h:3689:3, line:3691:19>
|   `-ParagraphComment 0x5555d4c39830 <line:3689:3, line:3691:19>
|     |-TextComment 0x5555d4c397b0 <line:3689:3, col:63> Text=" Determine whether a CXType has the "restrict" qualifier set,"
|     |-TextComment 0x5555d4c397d0 <line:3690:3, col:71> Text=" without looking through typedefs that may have added "restrict" at a"
|     `-TextComment 0x5555d4c397f0 <line:3691:3, col:19> Text=" different level."
|-FunctionDecl 0x5555d4ba9da0 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:3698:55> col:25 clang_getAddressSpace 'unsigned int (CXType)'
| |-ParmVarDecl 0x5555d4ba9d08 <col:47, col:54> col:54 T 'CXType':'CXType'
| |-VisibilityAttr 0x5555d4ba9e50 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c39930 </workspace/clang-c/Index.h:3696:3, col:47>
|   `-ParagraphComment 0x5555d4c39900 <col:3, col:47>
|     `-TextComment 0x5555d4c398d0 <col:3, col:47> Text=" Returns the address space of the given type."
|-FunctionDecl 0x5555d4baaff0 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:3703:55> col:25 clang_getTypedefName 'CXString (CXType)'
| |-ParmVarDecl 0x5555d4baaf60 <col:46, col:53> col:53 CT 'CXType':'CXType'
| |-VisibilityAttr 0x5555d4bab0a0 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c39a00 </workspace/clang-c/Index.h:3701:3, col:46>
|   `-ParagraphComment 0x5555d4c399d0 <col:3, col:46>
|     `-TextComment 0x5555d4c399a0 <col:3, col:46> Text=" Returns the typedef name of the given type."
|-FunctionDecl 0x5555d4bab1e8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:3708:52> col:23 clang_getPointeeType 'CXType (CXType)'
| |-ParmVarDecl 0x5555d4bab158 <col:44, col:51> col:51 T 'CXType':'CXType'
| |-VisibilityAttr 0x5555d4bab298 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c39ad0 </workspace/clang-c/Index.h:3706:3, col:54>
|   `-ParagraphComment 0x5555d4c39aa0 <col:3, col:54>
|     `-TextComment 0x5555d4c39a70 <col:3, col:54> Text=" For pointer types, returns the type of the pointee."
|-FunctionDecl 0x5555d4bab438 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:3713:58> col:25 clang_getTypeDeclaration 'CXCursor (CXType)'
| |-ParmVarDecl 0x5555d4bab348 <col:50, col:57> col:57 T 'CXType':'CXType'
| |-VisibilityAttr 0x5555d4bab4e8 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c39ba0 </workspace/clang-c/Index.h:3711:3, col:59>
|   `-ParagraphComment 0x5555d4c39b70 <col:3, col:59>
|     `-TextComment 0x5555d4c39b40 <col:3, col:59> Text=" Return the cursor for the declaration of the given type."
|-FunctionDecl 0x5555d4bab688 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:3718:65> col:25 clang_getDeclObjCTypeEncoding 'CXString (CXCursor)'
| |-ParmVarDecl 0x5555d4bab598 <col:55, col:64> col:64 C 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4bab738 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c39c70 </workspace/clang-c/Index.h:3716:3, col:71>
|   `-ParagraphComment 0x5555d4c39c40 <col:3, col:71>
|     `-TextComment 0x5555d4c39c10 <col:3, col:71> Text=" Returns the Objective-C type encoding for the specified declaration."
|-FunctionDecl 0x5555d4bab878 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:3723:63> col:25 clang_Type_getObjCEncoding 'CXString (CXType)'
| |-ParmVarDecl 0x5555d4bab7e8 <col:52, col:59> col:59 type 'CXType':'CXType'
| |-VisibilityAttr 0x5555d4bab928 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c39d40 </workspace/clang-c/Index.h:3721:3, col:66>
|   `-ParagraphComment 0x5555d4c39d10 <col:3, col:66>
|     `-TextComment 0x5555d4c39ce0 <col:3, col:66> Text=" Returns the Objective-C type encoding for the specified CXType."
|-FunctionDecl 0x5555d4babad8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:3728:68> col:25 clang_getTypeKindSpelling 'CXString (enum CXTypeKind)'
| |-ParmVarDecl 0x5555d4bab9e8 <col:51, col:67> col:67 K 'enum CXTypeKind':'enum CXTypeKind'
| |-VisibilityAttr 0x5555d4babb88 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c39e20 </workspace/clang-c/Index.h:3726:3, col:47>
|   `-ParagraphComment 0x5555d4c39df0 <col:3, col:47>
|     `-TextComment 0x5555d4c39dc0 <col:3, col:47> Text=" Retrieve the spelling of a given CXTypeKind."
|-FunctionDecl 0x5555d4babd68 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:3735:76> col:35 clang_getFunctionTypeCallingConv 'enum CXCallingConv (CXType)'
| |-ParmVarDecl 0x5555d4babc38 <col:68, col:75> col:75 T 'CXType':'CXType'
| |-VisibilityAttr 0x5555d4babe18 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c39f40 </workspace/clang-c/Index.h:3731:3, line:3733:74>
|   |-ParagraphComment 0x5555d4c39ec0 <line:3731:3, col:67>
|   | `-TextComment 0x5555d4c39e90 <col:3, col:67> Text=" Retrieve the calling convention associated with a function type."
|   `-ParagraphComment 0x5555d4c39f10 <line:3733:3, col:74>
|     `-TextComment 0x5555d4c39ee0 <col:3, col:74> Text=" If a non-function type is passed in, CXCallingConv_Invalid is returned."
|-FunctionDecl 0x5555d4babf70 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:3742:51> col:23 clang_getResultType 'CXType (CXType)'
| |-ParmVarDecl 0x5555d4babec8 <col:43, col:50> col:50 T 'CXType':'CXType'
| |-VisibilityAttr 0x5555d4bac020 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c3a060 </workspace/clang-c/Index.h:3738:3, line:3740:68>
|   |-ParagraphComment 0x5555d4c39fe0 <line:3738:3, col:60>
|   | `-TextComment 0x5555d4c39fb0 <col:3, col:60> Text=" Retrieve the return type associated with a function type."
|   `-ParagraphComment 0x5555d4c3a030 <line:3740:3, col:68>
|     `-TextComment 0x5555d4c3a000 <col:3, col:68> Text=" If a non-function type is passed in, an invalid type is returned."
|-FunctionDecl 0x5555d4bac1d0 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:3750:64> col:20 clang_getExceptionSpecificationType 'int (CXType)'
| |-ParmVarDecl 0x5555d4bac0d8 <col:56, col:63> col:63 T 'CXType':'CXType'
| |-VisibilityAttr 0x5555d4bac280 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c3a1a0 </workspace/clang-c/Index.h:3745:3, line:3748:72>
|   |-ParagraphComment 0x5555d4c3a120 <line:3745:3, line:3746:63>
|   | |-TextComment 0x5555d4c3a0d0 <line:3745:3, col:77> Text=" Retrieve the exception specification type associated with a function type."
|   | `-TextComment 0x5555d4c3a0f0 <line:3746:3, col:63> Text=" This is a value of type CXCursor_ExceptionSpecificationKind."
|   `-ParagraphComment 0x5555d4c3a170 <line:3748:3, col:72>
|     `-TextComment 0x5555d4c3a140 <col:3, col:72> Text=" If a non-function type is passed in, an error code of -1 is returned."
|-FunctionDecl 0x5555d4bac3d0 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:3758:49> col:20 clang_getNumArgTypes 'int (CXType)'
| |-ParmVarDecl 0x5555d4bac338 <col:41, col:48> col:48 T 'CXType':'CXType'
| |-VisibilityAttr 0x5555d4bac480 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c3a2e0 </workspace/clang-c/Index.h:3753:3, line:3756:55>
|   |-ParagraphComment 0x5555d4c3a260 <line:3753:3, line:3754:17>
|   | |-TextComment 0x5555d4c3a210 <line:3753:3, col:67> Text=" Retrieve the number of non-variadic parameters associated with a"
|   | `-TextComment 0x5555d4c3a230 <line:3754:3, col:17> Text=" function type."
|   `-ParagraphComment 0x5555d4c3a2b0 <line:3756:3, col:55>
|     `-TextComment 0x5555d4c3a280 <col:3, col:55> Text=" If a non-function type is passed in, -1 is returned."
|-FunctionDecl 0x5555d4bac6c8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:3766:60> col:23 clang_getArgType 'CXType (CXType, unsigned int)'
| |-ParmVarDecl 0x5555d4bac538 <col:40, col:47> col:47 T 'CXType':'CXType'
| |-ParmVarDecl 0x5555d4bac5b8 <col:50, col:59> col:59 i 'unsigned int'
| |-VisibilityAttr 0x5555d4bac780 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c3a420 </workspace/clang-c/Index.h:3761:3, line:3764:43>
|   |-ParagraphComment 0x5555d4c3a380 <line:3761:3, col:55>
|   | `-TextComment 0x5555d4c3a350 <col:3, col:55> Text=" Retrieve the type of a parameter of a function type."
|   `-ParagraphComment 0x5555d4c3a3f0 <line:3763:3, line:3764:43>
|     |-TextComment 0x5555d4c3a3a0 <line:3763:3, col:75> Text=" If a non-function type is passed in or the function does not have enough"
|     `-TextComment 0x5555d4c3a3c0 <line:3764:3, col:43> Text=" parameters, an invalid type is returned."
|-FunctionDecl 0x5555d4bac8c8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:3773:64> col:23 clang_Type_getObjCObjectBaseType 'CXType (CXType)'
| |-ParmVarDecl 0x5555d4bac838 <col:56, col:63> col:63 T 'CXType':'CXType'
| |-VisibilityAttr 0x5555d4bac978 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c3a540 </workspace/clang-c/Index.h:3769:3, line:3771:66>
|   |-ParagraphComment 0x5555d4c3a4c0 <line:3769:3, col:49>
|   | `-TextComment 0x5555d4c3a490 <col:3, col:49> Text=" Retrieves the base type of the ObjCObjectType."
|   `-ParagraphComment 0x5555d4c3a510 <line:3771:3, col:66>
|     `-TextComment 0x5555d4c3a4e0 <col:3, col:66> Text=" If the type is not an ObjC object, an invalid type is returned."
|-FunctionDecl 0x5555d4bacac0 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:3780:67> col:25 clang_Type_getNumObjCProtocolRefs 'unsigned int (CXType)'
| |-ParmVarDecl 0x5555d4baca28 <col:59, col:66> col:66 T 'CXType':'CXType'
| |-VisibilityAttr 0x5555d4bacb70 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c3a660 </workspace/clang-c/Index.h:3776:3, line:3778:52>
|   |-ParagraphComment 0x5555d4c3a5e0 <line:3776:3, col:80>
|   | `-TextComment 0x5555d4c3a5b0 <col:3, col:80> Text=" Retrieve the number of protocol references associated with an ObjC object/id."
|   `-ParagraphComment 0x5555d4c3a630 <line:3778:3, col:52>
|     `-TextComment 0x5555d4c3a600 <col:3, col:52> Text=" If the type is not an ObjC object, 0 is returned."
|-FunctionDecl 0x5555d4bacdb8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:3788:76> col:25 clang_Type_getObjCProtocolDecl 'CXCursor (CXType, unsigned int)'
| |-ParmVarDecl 0x5555d4bacc28 <col:56, col:63> col:63 T 'CXType':'CXType'
| |-ParmVarDecl 0x5555d4bacca8 <col:66, col:75> col:75 i 'unsigned int'
| |-VisibilityAttr 0x5555d4bace70 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c3a7a0 </workspace/clang-c/Index.h:3783:3, line:3786:45>
|   |-ParagraphComment 0x5555d4c3a700 <line:3783:3, col:68>
|   | `-TextComment 0x5555d4c3a6d0 <col:3, col:68> Text=" Retrieve the decl for a protocol reference for an ObjC object/id."
|   `-ParagraphComment 0x5555d4c3a770 <line:3785:3, line:3786:45>
|     |-TextComment 0x5555d4c3a720 <line:3785:3, col:69> Text=" If the type is not an ObjC object or there are not enough protocol"
|     `-TextComment 0x5555d4c3a740 <line:3786:3, col:45> Text=" references, an invalid cursor is returned."
|-FunctionDecl 0x5555d4b731c8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:3795:63> col:25 clang_Type_getNumObjCTypeArgs 'unsigned int (CXType)'
| |-ParmVarDecl 0x5555d4b73130 <col:55, col:62> col:62 T 'CXType':'CXType'
| |-VisibilityAttr 0x5555d4b73278 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c3a8c0 </workspace/clang-c/Index.h:3791:3, line:3793:52>
|   |-ParagraphComment 0x5555d4c3a840 <line:3791:3, col:72>
|   | `-TextComment 0x5555d4c3a810 <col:3, col:72> Text=" Retrieve the number of type arguments associated with an ObjC object."
|   `-ParagraphComment 0x5555d4c3a890 <line:3793:3, col:52>
|     `-TextComment 0x5555d4c3a860 <col:3, col:52> Text=" If the type is not an ObjC object, 0 is returned."
|-FunctionDecl 0x5555d4b73440 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:3803:69> col:23 clang_Type_getObjCTypeArg 'CXType (CXType, unsigned int)'
| |-ParmVarDecl 0x5555d4b73328 <col:49, col:56> col:56 T 'CXType':'CXType'
| |-ParmVarDecl 0x5555d4b733a8 <col:59, col:68> col:68 i 'unsigned int'
| |-VisibilityAttr 0x5555d4b734f8 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c3aa00 </workspace/clang-c/Index.h:3798:3, line:3801:31>
|   |-ParagraphComment 0x5555d4c3a960 <line:3798:3, col:59>
|   | `-TextComment 0x5555d4c3a930 <col:3, col:59> Text=" Retrieve a type argument associated with an ObjC object."
|   `-ParagraphComment 0x5555d4c3a9d0 <line:3800:3, line:3801:31>
|     |-TextComment 0x5555d4c3a980 <line:3800:3, col:56> Text=" If the type is not an ObjC or the index is not valid,"
|     `-TextComment 0x5555d4c3a9a0 <line:3801:3, col:31> Text=" an invalid type is returned."
|-FunctionDecl 0x5555d4b73640 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:3808:62> col:25 clang_isFunctionTypeVariadic 'unsigned int (CXType)'
| |-ParmVarDecl 0x5555d4b735a8 <col:54, col:61> col:61 T 'CXType':'CXType'
| |-VisibilityAttr 0x5555d4b736f0 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c3aad0 </workspace/clang-c/Index.h:3806:3, col:71>
|   `-ParagraphComment 0x5555d4c3aaa0 <col:3, col:71>
|     `-TextComment 0x5555d4c3aa70 <col:3, col:71> Text=" Return 1 if the CXType is a variadic function type, and 0 otherwise."
|-FunctionDecl 0x5555d4b73838 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:3815:59> col:23 clang_getCursorResultType 'CXType (CXCursor)'
| |-ParmVarDecl 0x5555d4b737a8 <col:49, col:58> col:58 C 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4b738e8 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c3abf0 </workspace/clang-c/Index.h:3811:3, line:3813:79>
|   |-ParagraphComment 0x5555d4c3ab70 <line:3811:3, col:59>
|   | `-TextComment 0x5555d4c3ab40 <col:3, col:59> Text=" Retrieve the return type associated with a given cursor."
|   `-ParagraphComment 0x5555d4c3abc0 <line:3813:3, col:79>
|     `-TextComment 0x5555d4c3ab90 <col:3, col:79> Text=" This only returns a valid type if the cursor refers to a function or method."
|-FunctionDecl 0x5555d4b73a30 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:3824:72> col:20 clang_getCursorExceptionSpecificationType 'int (CXCursor)'
| |-ParmVarDecl 0x5555d4b73998 <col:62, col:71> col:71 C 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4b73ae0 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c3ad50 </workspace/clang-c/Index.h:3818:3, line:3822:10>
|   |-ParagraphComment 0x5555d4c3acb0 <line:3818:3, line:3819:63>
|   | |-TextComment 0x5555d4c3ac60 <line:3818:3, col:76> Text=" Retrieve the exception specification type associated with a given cursor."
|   | `-TextComment 0x5555d4c3ac80 <line:3819:3, col:63> Text=" This is a value of type CXCursor_ExceptionSpecificationKind."
|   `-ParagraphComment 0x5555d4c3ad20 <line:3821:3, line:3822:10>
|     |-TextComment 0x5555d4c3acd0 <line:3821:3, col:73> Text=" This only returns a valid result if the cursor refers to a function or"
|     `-TextComment 0x5555d4c3acf0 <line:3822:3, col:10> Text=" method."
|-FunctionDecl 0x5555d4b73c30 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:3830:49> col:25 clang_isPODType 'unsigned int (CXType)'
| |-ParmVarDecl 0x5555d4b73b98 <col:41, col:48> col:48 T 'CXType':'CXType'
| |-VisibilityAttr 0x5555d4b73ce0 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c3ae40 </workspace/clang-c/Index.h:3827:3, line:3828:14>
|   `-ParagraphComment 0x5555d4c3ae10 <line:3827:3, line:3828:14>
|     |-TextComment 0x5555d4c3adc0 <line:3827:3, col:63> Text=" Return 1 if the CXType is a POD (plain old data) type, and 0"
|     `-TextComment 0x5555d4c3ade0 <line:3828:3, col:14> Text="  otherwise."
|-FunctionDecl 0x5555d4b73e28 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:3838:52> col:23 clang_getElementType 'CXType (CXType)'
| |-ParmVarDecl 0x5555d4b73d98 <col:44, col:51> col:51 T 'CXType':'CXType'
| |-VisibilityAttr 0x5555d4b73ed8 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c3af80 </workspace/clang-c/Index.h:3833:3, line:3836:31>
|   |-ParagraphComment 0x5555d4c3aee0 <line:3833:3, col:64>
|   | `-TextComment 0x5555d4c3aeb0 <col:3, col:64> Text=" Return the element type of an array, complex, or vector type."
|   `-ParagraphComment 0x5555d4c3af50 <line:3835:3, line:3836:31>
|     |-TextComment 0x5555d4c3af00 <line:3835:3, col:72> Text=" If a type is passed in that is not an array, complex, or vector type,"
|     `-TextComment 0x5555d4c3af20 <line:3836:3, col:31> Text=" an invalid type is returned."
|-FunctionDecl 0x5555d4b74080 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:3846:55> col:26 clang_getNumElements 'long long (CXType)'
| |-ParmVarDecl 0x5555d4b73f88 <col:47, col:54> col:54 T 'CXType':'CXType'
| |-VisibilityAttr 0x5555d4baef90 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c3b0c0 </workspace/clang-c/Index.h:3841:3, line:3844:18>
|   |-ParagraphComment 0x5555d4c3b020 <line:3841:3, col:60>
|   | `-TextComment 0x5555d4c3aff0 <col:3, col:60> Text=" Return the number of elements of an array or vector type."
|   `-ParagraphComment 0x5555d4c3b090 <line:3843:3, line:3844:18>
|     |-TextComment 0x5555d4c3b040 <line:3843:3, col:62> Text=" If a type is passed in that is not an array or vector type,"
|     `-TextComment 0x5555d4c3b060 <line:3844:3, col:18> Text=" -1 is returned."
|-FunctionDecl 0x5555d4baf0d8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:3853:57> col:23 clang_getArrayElementType 'CXType (CXType)'
| |-ParmVarDecl 0x5555d4baf048 <col:49, col:56> col:56 T 'CXType':'CXType'
| |-VisibilityAttr 0x5555d4baf188 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c3b1e0 </workspace/clang-c/Index.h:3849:3, line:3851:65>
|   |-ParagraphComment 0x5555d4c3b160 <line:3849:3, col:44>
|   | `-TextComment 0x5555d4c3b130 <col:3, col:44> Text=" Return the element type of an array type."
|   `-ParagraphComment 0x5555d4c3b1b0 <line:3851:3, col:65>
|     `-TextComment 0x5555d4c3b180 <col:3, col:65> Text=" If a non-array type is passed in, an invalid type is returned."
|-FunctionDecl 0x5555d4baf2d0 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:3860:53> col:26 clang_getArraySize 'long long (CXType)'
| |-ParmVarDecl 0x5555d4baf238 <col:45, col:52> col:52 T 'CXType':'CXType'
| |-VisibilityAttr 0x5555d4baf380 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c3b300 </workspace/clang-c/Index.h:3856:3, line:3858:52>
|   |-ParagraphComment 0x5555d4c3b280 <line:3856:3, col:45>
|   | `-TextComment 0x5555d4c3b250 <col:3, col:45> Text=" Return the array size of a constant array."
|   `-ParagraphComment 0x5555d4c3b2d0 <line:3858:3, col:52>
|     `-TextComment 0x5555d4c3b2a0 <col:3, col:52> Text=" If a non-array type is passed in, -1 is returned."
|-FunctionDecl 0x5555d4baf4c8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:3867:55> col:23 clang_Type_getNamedType 'CXType (CXType)'
| |-ParmVarDecl 0x5555d4baf438 <col:47, col:54> col:54 T 'CXType':'CXType'
| |-VisibilityAttr 0x5555d4baf578 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c3b420 </workspace/clang-c/Index.h:3863:3, line:3865:70>
|   |-ParagraphComment 0x5555d4c3b3a0 <line:3863:3, col:47>
|   | `-TextComment 0x5555d4c3b370 <col:3, col:47> Text=" Retrieve the type named by the qualified-id."
|   `-ParagraphComment 0x5555d4c3b3f0 <line:3865:3, col:70>
|     `-TextComment 0x5555d4c3b3c0 <col:3, col:70> Text=" If a non-elaborated type is passed in, an invalid type is returned."
|-FunctionDecl 0x5555d4baf6c0 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:3877:68> col:25 clang_Type_isTransparentTagTypedef 'unsigned int (CXType)'
| |-ParmVarDecl 0x5555d4baf628 <col:60, col:67> col:67 T 'CXType':'CXType'
| |-VisibilityAttr 0x5555d4baf770 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c3b640 </workspace/clang-c/Index.h:3870:3, line:3875:55>
|   |-ParagraphComment 0x5555d4c3b4c0 <line:3870:3, col:47>
|   | `-TextComment 0x5555d4c3b490 <col:3, col:47> Text=" Determine if a typedef is 'transparent' tag."
|   |-ParagraphComment 0x5555d4c3b530 <line:3872:3, line:3873:80>
|   | |-TextComment 0x5555d4c3b4e0 <line:3872:3, col:73> Text=" A typedef is considered 'transparent' if it shares a name and spelling"
|   | `-TextComment 0x5555d4c3b500 <line:3873:3, col:80> Text=" location with its underlying tag type, as is the case with the NS_ENUM macro."
|   |-ParagraphComment 0x5555d4c3b580 <line:3875:3>
|   | `-TextComment 0x5555d4c3b550 <col:3> Text=" "
|   `-BlockCommandComment 0x5555d4c3b5a0 <col:4, col:55> Name="returns"
|     `-ParagraphComment 0x5555d4c3b600 <col:12, col:55>
|       `-TextComment 0x5555d4c3b5d0 <col:12, col:55> Text=" non-zero if transparent and zero otherwise."
|-EnumDecl 0x5555d4baf7c8 <line:3879:1, line:3907:1> line:3879:6 CXTypeNullabilityKind
| |-EnumConstantDecl 0x5555d4baf8f8 <line:3883:3, col:31> col:3 CXTypeNullability_NonNull 'int'
| | |-ConstantExpr 0x5555d4baf8d8 <col:31> 'int'
| | | |-value: Int 0
| | | `-IntegerLiteral 0x5555d4baf8b8 <col:31> 'int' 0
| | `-FullComment 0x5555d4c3b710 <line:3881:5, col:43>
| |   `-ParagraphComment 0x5555d4c3b6e0 <col:5, col:43>
| |     `-TextComment 0x5555d4c3b6b0 <col:5, col:43> Text=" Values of this type can never be null."
| |-EnumConstantDecl 0x5555d4baf9b8 <line:3887:3, col:32> col:3 CXTypeNullability_Nullable 'int'
| | |-ConstantExpr 0x5555d4baf998 <col:32> 'int'
| | | |-value: Int 1
| | | `-IntegerLiteral 0x5555d4baf978 <col:32> 'int' 1
| | `-FullComment 0x5555d4c3b7e0 <line:3885:5, col:37>
| |   `-ParagraphComment 0x5555d4c3b7b0 <col:5, col:37>
| |     `-TextComment 0x5555d4c3b780 <col:5, col:37> Text=" Values of this type can be null."
| |-EnumConstantDecl 0x5555d4bafa78 <line:3894:3, col:35> col:3 CXTypeNullability_Unspecified 'int'
| | |-ConstantExpr 0x5555d4bafa58 <col:35> 'int'
| | | |-value: Int 2
| | | `-IntegerLiteral 0x5555d4bafa38 <col:35> 'int' 2
| | `-FullComment 0x5555d4c3b920 <line:3889:5, line:3892:35>
| |   `-ParagraphComment 0x5555d4c3b8f0 <line:3889:5, line:3892:35>
| |     |-TextComment 0x5555d4c3b850 <line:3889:5, col:60> Text=" Whether values of this type can be null is (explicitly)"
| |     |-TextComment 0x5555d4c3b870 <line:3890:5, col:61> Text=" unspecified. This captures a (fairly rare) case where we"
| |     |-TextComment 0x5555d4c3b890 <line:3891:5, col:67> Text=" can't conclude anything about the nullability of the type even"
| |     `-TextComment 0x5555d4c3b8b0 <line:3892:5, col:35> Text=" though it has been considered."
| |-EnumConstantDecl 0x5555d4bafb38 <line:3898:3, col:31> col:3 CXTypeNullability_Invalid 'int'
| | |-ConstantExpr 0x5555d4bafb18 <col:31> 'int'
| | | |-value: Int 3
| | | `-IntegerLiteral 0x5555d4bafaf8 <col:31> 'int' 3
| | `-FullComment 0x5555d4c3b9f0 <line:3896:5, col:48>
| |   `-ParagraphComment 0x5555d4c3b9c0 <col:5, col:48>
| |     `-TextComment 0x5555d4c3b990 <col:5, col:48> Text=" Nullability is not applicable to this type."
| `-EnumConstantDecl 0x5555d4bafbf8 <line:3906:3, col:38> col:3 CXTypeNullability_NullableResult 'int'
|   |-ConstantExpr 0x5555d4bafbd8 <col:38> 'int'
|   | |-value: Int 4
|   | `-IntegerLiteral 0x5555d4bafbb8 <col:38> 'int' 4
|   `-FullComment 0x5555d4c3bb30 <line:3901:5, line:3904:39>
|     `-ParagraphComment 0x5555d4c3bb00 <line:3901:5, line:3904:39>
|       |-TextComment 0x5555d4c3ba60 <line:3901:5, col:80> Text=" Generally behaves like Nullable, except when used in a block parameter that"
|       |-TextComment 0x5555d4c3ba80 <line:3902:5, col:78> Text=" was imported into a swift async method. There, swift will assume that the"
|       |-TextComment 0x5555d4c3baa0 <line:3903:5, col:78> Text=" parameter can get null even if no error occured. _Nullable parameters are"
|       `-TextComment 0x5555d4c3bac0 <line:3904:5, col:39> Text=" assumed to only get null on error."
|-FunctionDecl 0x5555d4bafdd8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:3912:77> col:43 clang_Type_getNullability 'enum CXTypeNullabilityKind (CXType)'
| |-ParmVarDecl 0x5555d4bafca8 <col:69, col:76> col:76 T 'CXType':'CXType'
| |-VisibilityAttr 0x5555d4bafe88 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c3bc00 </workspace/clang-c/Index.h:3910:3, col:51>
|   `-ParagraphComment 0x5555d4c3bbd0 <col:3, col:51>
|     `-TextComment 0x5555d4c3bba0 <col:3, col:51> Text=" Retrieve the nullability kind of a pointer type."
|-EnumDecl 0x5555d4baffa0 <line:3922:1, line:3947:1> line:3922:6 CXTypeLayoutError
| |-FullComment 0x5555d4c3bf60 <line:3915:3, line:3920:51>
| | |-ParagraphComment 0x5555d4c3bec0 <line:3915:3, line:3917:7>
| | | |-TextComment 0x5555d4c3bc70 <line:3915:3, col:37> Text=" List the possible error codes for "
| | | |-InlineCommandComment 0x5555d4c3bcc0 <col:38, col:39> Name="c" RenderMonospaced Arg[0]="clang_Type_getSizeOf,"
| | | |-TextComment 0x5555d4c3bce0 <line:3916:3, col:5> Text="   "
| | | |-InlineCommandComment 0x5555d4c3bd30 <col:6, col:7> Name="c" RenderMonospaced Arg[0]="clang_Type_getAlignOf,"
| | | |-TextComment 0x5555d4c3bd50 <col:31> Text=" "
| | | |-InlineCommandComment 0x5555d4c3bda0 <col:32, col:33> Name="c" RenderMonospaced Arg[0]="clang_Type_getOffsetOf"
| | | |-TextComment 0x5555d4c3bdd0 <col:57, col:60> Text=" and"
| | | |-TextComment 0x5555d4c3bdf0 <line:3917:3, col:5> Text="   "
| | | `-InlineCommandComment 0x5555d4c3be50 <col:6, col:7> Name="c" RenderMonospaced Arg[0]="clang_Cursor_getOffsetOf."
| | `-ParagraphComment 0x5555d4c3bf30 <line:3919:3, line:3920:51>
| |   |-TextComment 0x5555d4c3bee0 <line:3919:3, col:77> Text=" A value of this enumeration type can be returned if the target type is not"
| |   `-TextComment 0x5555d4c3bf00 <line:3920:3, col:51> Text=" a valid argument to sizeof, alignof or offsetof."
| |-EnumConstantDecl 0x5555d4bb00e0 <line:3926:3, col:32> col:3 CXTypeLayoutError_Invalid 'int'
| | |-ConstantExpr 0x5555d4bb00c0 <col:31, col:32> 'int'
| | | |-value: Int -1
| | | `-UnaryOperator 0x5555d4bb00a8 <col:31, col:32> 'int' prefix '-'
| | |   `-IntegerLiteral 0x5555d4bb0088 <col:32> 'int' 1
| | `-FullComment 0x5555d4c3c030 <line:3924:5, col:36>
| |   `-ParagraphComment 0x5555d4c3c000 <col:5, col:36>
| |     `-TextComment 0x5555d4c3bfd0 <col:5, col:36> Text=" Type is of kind CXType_Invalid."
| |-EnumConstantDecl 0x5555d4bb01b0 <line:3930:3, col:35> col:3 CXTypeLayoutError_Incomplete 'int'
| | |-ConstantExpr 0x5555d4bb0190 <col:34, col:35> 'int'
| | | |-value: Int -2
| | | `-UnaryOperator 0x5555d4bb0178 <col:34, col:35> 'int' prefix '-'
| | |   `-IntegerLiteral 0x5555d4bb0158 <col:35> 'int' 2
| | `-FullComment 0x5555d4c3c100 <line:3928:5, col:36>
| |   `-ParagraphComment 0x5555d4c3c0d0 <col:5, col:36>
| |     `-TextComment 0x5555d4c3c0a0 <col:5, col:36> Text=" The type is an incomplete Type."
| |-EnumConstantDecl 0x5555d4bb0280 <line:3934:3, col:34> col:3 CXTypeLayoutError_Dependent 'int'
| | |-ConstantExpr 0x5555d4bb0260 <col:33, col:34> 'int'
| | | |-value: Int -3
| | | `-UnaryOperator 0x5555d4bb0248 <col:33, col:34> 'int' prefix '-'
| | |   `-IntegerLiteral 0x5555d4bb0228 <col:34> 'int' 3
| | `-FullComment 0x5555d4c3c1d0 <line:3932:5, col:34>
| |   `-ParagraphComment 0x5555d4c3c1a0 <col:5, col:34>
| |     `-TextComment 0x5555d4c3c170 <col:5, col:34> Text=" The type is a dependent Type."
| |-EnumConstantDecl 0x5555d4bb0350 <line:3938:3, col:40> col:3 CXTypeLayoutError_NotConstantSize 'int'
| | |-ConstantExpr 0x5555d4bb0330 <col:39, col:40> 'int'
| | | |-value: Int -4
| | | `-UnaryOperator 0x5555d4bb0318 <col:39, col:40> 'int' prefix '-'
| | |   `-IntegerLiteral 0x5555d4bb02f8 <col:40> 'int' 4
| | `-FullComment 0x5555d4c3c2a0 <line:3936:5, col:42>
| |   `-ParagraphComment 0x5555d4c3c270 <col:5, col:42>
| |     `-TextComment 0x5555d4c3c240 <col:5, col:42> Text=" The type is not a constant size type."
| |-EnumConstantDecl 0x5555d4bb0420 <line:3942:3, col:41> col:3 CXTypeLayoutError_InvalidFieldName 'int'
| | |-ConstantExpr 0x5555d4bb0400 <col:40, col:41> 'int'
| | | |-value: Int -5
| | | `-UnaryOperator 0x5555d4bb03e8 <col:40, col:41> 'int' prefix '-'
| | |   `-IntegerLiteral 0x5555d4bb03c8 <col:41> 'int' 5
| | `-FullComment 0x5555d4c3c370 <line:3940:5, col:49>
| |   `-ParagraphComment 0x5555d4c3c340 <col:5, col:49>
| |     `-TextComment 0x5555d4c3c310 <col:5, col:49> Text=" The Field name is not valid for this record."
| `-EnumConstantDecl 0x5555d4bb04f0 <line:3946:3, col:34> col:3 CXTypeLayoutError_Undeduced 'int'
|   |-ConstantExpr 0x5555d4bb04d0 <col:33, col:34> 'int'
|   | |-value: Int -6
|   | `-UnaryOperator 0x5555d4bb04b8 <col:33, col:34> 'int' prefix '-'
|   |   `-IntegerLiteral 0x5555d4bb0498 <col:34> 'int' 6
|   `-FullComment 0x5555d4c3c440 <line:3944:5, col:27>
|     `-ParagraphComment 0x5555d4c3c410 <col:5, col:27>
|       `-TextComment 0x5555d4c3c3e0 <col:5, col:27> Text=" The type is undeduced."
|-FunctionDecl 0x5555d4bb0630 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:3961:56> col:26 clang_Type_getAlignOf 'long long (CXType)'
| |-ParmVarDecl 0x5555d4bb0598 <col:48, col:55> col:55 T 'CXType':'CXType'
| |-VisibilityAttr 0x5555d4bb06e0 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c3c670 </workspace/clang-c/Index.h:3950:3, line:3959:51>
|   |-ParagraphComment 0x5555d4c3c500 <line:3950:3, line:3951:14>
|   | |-TextComment 0x5555d4c3c4b0 <line:3950:3, col:67> Text=" Return the alignment of a type in bytes as per C++[expr.alignof]"
|   | `-TextComment 0x5555d4c3c4d0 <line:3951:3, col:14> Text="   standard."
|   `-ParagraphComment 0x5555d4c3c640 <line:3953:3, line:3959:51>
|     |-TextComment 0x5555d4c3c520 <line:3953:3, col:77> Text=" If the type declaration is invalid, CXTypeLayoutError_Invalid is returned."
|     |-TextComment 0x5555d4c3c540 <line:3954:3, col:78> Text=" If the type declaration is an incomplete type, CXTypeLayoutError_Incomplete"
|     |-TextComment 0x5555d4c3c560 <line:3955:3, col:17> Text="   is returned."
|     |-TextComment 0x5555d4c3c580 <line:3956:3, col:78> Text=" If the type declaration is a dependent type, CXTypeLayoutError_Dependent is"
|     |-TextComment 0x5555d4c3c5a0 <line:3957:3, col:14> Text="   returned."
|     |-TextComment 0x5555d4c3c5c0 <line:3958:3, col:55> Text=" If the type declaration is not a constant size type,"
|     `-TextComment 0x5555d4c3c5e0 <line:3959:3, col:51> Text="   CXTypeLayoutError_NotConstantSize is returned."
|-FunctionDecl 0x5555d4bb0828 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:3968:55> col:23 clang_Type_getClassType 'CXType (CXType)'
| |-ParmVarDecl 0x5555d4bb0798 <col:47, col:54> col:54 T 'CXType':'CXType'
| |-VisibilityAttr 0x5555d4bb08d8 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c3c790 </workspace/clang-c/Index.h:3964:3, line:3966:74>
|   |-ParagraphComment 0x5555d4c3c710 <line:3964:3, col:51>
|   | `-TextComment 0x5555d4c3c6e0 <col:3, col:51> Text=" Return the class type of an member pointer type."
|   `-ParagraphComment 0x5555d4c3c760 <line:3966:3, col:74>
|     `-TextComment 0x5555d4c3c730 <col:3, col:74> Text=" If a non-member-pointer type is passed in, an invalid type is returned."
|-FunctionDecl 0x5555d4bb0a20 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:3979:55> col:26 clang_Type_getSizeOf 'long long (CXType)'
| |-ParmVarDecl 0x5555d4bb0988 <col:47, col:54> col:54 T 'CXType':'CXType'
| |-VisibilityAttr 0x5555d4bb0ad0 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c3c950 </workspace/clang-c/Index.h:3971:3, line:3977:14>
|   |-ParagraphComment 0x5555d4c3c830 <line:3971:3, col:71>
|   | `-TextComment 0x5555d4c3c800 <col:3, col:71> Text=" Return the size of a type in bytes as per C++[expr.sizeof] standard."
|   `-ParagraphComment 0x5555d4c3c920 <line:3973:3, line:3977:14>
|     |-TextComment 0x5555d4c3c850 <line:3973:3, col:77> Text=" If the type declaration is invalid, CXTypeLayoutError_Invalid is returned."
|     |-TextComment 0x5555d4c3c870 <line:3974:3, col:78> Text=" If the type declaration is an incomplete type, CXTypeLayoutError_Incomplete"
|     |-TextComment 0x5555d4c3c890 <line:3975:3, col:17> Text="   is returned."
|     |-TextComment 0x5555d4c3c8b0 <line:3976:3, col:78> Text=" If the type declaration is a dependent type, CXTypeLayoutError_Dependent is"
|     `-TextComment 0x5555d4c3c8d0 <line:3977:3, col:14> Text="   returned."
|-FunctionDecl 0x5555d4bb0d20 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:3994:72> col:26 clang_Type_getOffsetOf 'long long (CXType, const char *)'
| |-ParmVarDecl 0x5555d4bb0b88 <col:49, col:56> col:56 T 'CXType':'CXType'
| |-ParmVarDecl 0x5555d4bb0c08 <col:59, col:71> col:71 S 'const char *'
| |-VisibilityAttr 0x5555d4bb0dd8 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c3cba0 </workspace/clang-c/Index.h:3982:3, line:3992:52>
|   |-ParagraphComment 0x5555d4c3ca10 <line:3982:3, line:3983:65>
|   | |-TextComment 0x5555d4c3c9c0 <line:3982:3, col:69> Text=" Return the offset of a field named S in a record of type T in bits"
|   | `-TextComment 0x5555d4c3c9e0 <line:3983:3, col:65> Text="   as it would be returned by __offsetof__ as per C++11[18.2p4]"
|   `-ParagraphComment 0x5555d4c3cb70 <line:3985:3, line:3992:52>
|     |-TextComment 0x5555d4c3ca30 <line:3985:3, col:77> Text=" If the cursor is not a record field declaration, CXTypeLayoutError_Invalid"
|     |-TextComment 0x5555d4c3ca50 <line:3986:3, col:17> Text="   is returned."
|     |-TextComment 0x5555d4c3ca70 <line:3987:3, col:57> Text=" If the field's type declaration is an incomplete type,"
|     |-TextComment 0x5555d4c3ca90 <line:3988:3, col:46> Text="   CXTypeLayoutError_Incomplete is returned."
|     |-TextComment 0x5555d4c3cab0 <line:3989:3, col:55> Text=" If the field's type declaration is a dependent type,"
|     |-TextComment 0x5555d4c3cad0 <line:3990:3, col:45> Text="   CXTypeLayoutError_Dependent is returned."
|     |-TextComment 0x5555d4c3caf0 <line:3991:3, col:38> Text=" If the field's name S is not found,"
|     `-TextComment 0x5555d4c3cb10 <line:3992:3, col:52> Text="   CXTypeLayoutError_InvalidFieldName is returned."
|-FunctionDecl 0x5555d4bb0fb0 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4001:58> col:23 clang_Type_getModifiedType 'CXType (CXType)'
| |-ParmVarDecl 0x5555d4bb0e88 <col:50, col:57> col:57 T 'CXType':'CXType'
| |-VisibilityAttr 0x5555d4bb1060 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c3ccc0 </workspace/clang-c/Index.h:3997:3, line:3999:70>
|   |-ParagraphComment 0x5555d4c3cc40 <line:3997:3, col:61>
|   | `-TextComment 0x5555d4c3cc10 <col:3, col:61> Text=" Return the type that was modified by this attributed type."
|   `-ParagraphComment 0x5555d4c3cc90 <line:3999:3, col:70>
|     `-TextComment 0x5555d4c3cc60 <col:3, col:70> Text=" If the type is not an attributed type, an invalid type is returned."
|-FunctionDecl 0x5555d4bb11a8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4008:56> col:23 clang_Type_getValueType 'CXType (CXType)'
| |-ParmVarDecl 0x5555d4bb1118 <col:47, col:54> col:54 CT 'CXType':'CXType'
| |-VisibilityAttr 0x5555d4bb1258 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c3cde0 </workspace/clang-c/Index.h:4004:3, line:4006:66>
|   |-ParagraphComment 0x5555d4c3cd60 <line:4004:3, col:47>
|   | `-TextComment 0x5555d4c3cd30 <col:3, col:47> Text=" Gets the type contained by this atomic type."
|   `-ParagraphComment 0x5555d4c3cdb0 <line:4006:3, col:66>
|     `-TextComment 0x5555d4c3cd80 <col:3, col:66> Text=" If a non-atomic type is passed in, an invalid type is returned."
|-FunctionDecl 0x5555d4bb13a0 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4023:66> col:26 clang_Cursor_getOffsetOfField 'long long (CXCursor)'
| |-ParmVarDecl 0x5555d4bb1308 <col:56, col:65> col:65 C 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4bb1450 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c3d040 </workspace/clang-c/Index.h:4011:3, line:4021:52>
|   |-ParagraphComment 0x5555d4c3ce80 <line:4011:3, col:60>
|   | `-TextComment 0x5555d4c3ce50 <col:3, col:60> Text=" Return the offset of the field represented by the Cursor."
|   `-ParagraphComment 0x5555d4c3d010 <line:4013:3, line:4021:52>
|     |-TextComment 0x5555d4c3cea0 <line:4013:3, col:60> Text=" If the cursor is not a field declaration, -1 is returned."
|     |-TextComment 0x5555d4c3cec0 <line:4014:3, col:67> Text=" If the cursor semantic parent is not a record field declaration,"
|     |-TextComment 0x5555d4c3cee0 <line:4015:3, col:43> Text="   CXTypeLayoutError_Invalid is returned."
|     |-TextComment 0x5555d4c3cf00 <line:4016:3, col:57> Text=" If the field's type declaration is an incomplete type,"
|     |-TextComment 0x5555d4c3cf20 <line:4017:3, col:46> Text="   CXTypeLayoutError_Incomplete is returned."
|     |-TextComment 0x5555d4c3cf40 <line:4018:3, col:55> Text=" If the field's type declaration is a dependent type,"
|     |-TextComment 0x5555d4c3cf60 <line:4019:3, col:45> Text="   CXTypeLayoutError_Dependent is returned."
|     |-TextComment 0x5555d4c3cf80 <line:4020:3, col:38> Text=" If the field's name S is not found,"
|     `-TextComment 0x5555d4c3cfa0 <line:4021:3, col:52> Text="   CXTypeLayoutError_InvalidFieldName is returned."
|-FunctionDecl 0x5555d4bb15a0 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4029:60> col:25 clang_Cursor_isAnonymous 'unsigned int (CXCursor)'
| |-ParmVarDecl 0x5555d4bb1508 <col:50, col:59> col:59 C 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4bb1650 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c3d130 </workspace/clang-c/Index.h:4026:3, line:4027:19>
|   `-ParagraphComment 0x5555d4c3d100 <line:4026:3, line:4027:19>
|     |-TextComment 0x5555d4c3d0b0 <line:4026:3, col:61> Text=" Determine whether the given cursor represents an anonymous"
|     `-TextComment 0x5555d4c3d0d0 <line:4027:3, col:19> Text=" tag or namespace"
|-FunctionDecl 0x5555d4bb17a0 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4035:70> col:25 clang_Cursor_isAnonymousRecordDecl 'unsigned int (CXCursor)'
| |-ParmVarDecl 0x5555d4bb1708 <col:60, col:69> col:69 C 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4bb1850 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c3d220 </workspace/clang-c/Index.h:4032:3, line:4033:15>
|   `-ParagraphComment 0x5555d4c3d1f0 <line:4032:3, line:4033:15>
|     |-TextComment 0x5555d4c3d1a0 <line:4032:3, col:68> Text=" Determine whether the given cursor represents an anonymous record"
|     `-TextComment 0x5555d4c3d1c0 <line:4033:3, col:15> Text=" declaration."
|-FunctionDecl 0x5555d4bb19a0 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4041:66> col:25 clang_Cursor_isInlineNamespace 'unsigned int (CXCursor)'
| |-ParmVarDecl 0x5555d4bb1908 <col:56, col:65> col:65 C 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4bb1a50 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c3d310 </workspace/clang-c/Index.h:4038:3, line:4039:15>
|   `-ParagraphComment 0x5555d4c3d2e0 <line:4038:3, line:4039:15>
|     |-TextComment 0x5555d4c3d290 <line:4038:3, col:68> Text=" Determine whether the given cursor represents an inline namespace"
|     `-TextComment 0x5555d4c3d2b0 <line:4039:3, col:15> Text=" declaration."
|-EnumDecl 0x5555d4bb1aa8 <line:4043:1, line:4050:1> line:4043:6 CXRefQualifierKind
| |-EnumConstantDecl 0x5555d4bb1bd8 <line:4045:3, col:25> col:3 CXRefQualifier_None 'int'
| | |-ConstantExpr 0x5555d4bb1bb8 <col:25> 'int'
| | | |-value: Int 0
| | | `-IntegerLiteral 0x5555d4bb1b98 <col:25> 'int' 0
| | `-FullComment 0x5555d4c3d3e0 <line:4044:6, col:37>
| |   `-ParagraphComment 0x5555d4c3d3b0 <col:6, col:37>
| |     `-TextComment 0x5555d4c3d380 <col:6, col:37> Text=" No ref-qualifier was provided. "
| |-EnumConstantDecl 0x5555d4bb1c58 <line:4047:3> col:3 CXRefQualifier_LValue 'int'
| | `-FullComment 0x5555d4c3d520 <line:4046:6, col:51>
| |   `-ParagraphComment 0x5555d4c3d4f0 <col:6, col:51>
| |     |-TextComment 0x5555d4c3d450 <col:6, col:44> Text=" An lvalue ref-qualifier was provided ("
| |     |-InlineCommandComment 0x5555d4c3d490 <col:45, col:46> Name="c" RenderMonospaced Arg[0]="&)."
| |     `-TextComment 0x5555d4c3d4b0 <col:51> Text=" "
| `-EnumConstantDecl 0x5555d4bb1cd8 <line:4049:3> col:3 CXRefQualifier_RValue 'int'
|   `-FullComment 0x5555d4c3d660 <line:4048:6, col:52>
|     `-ParagraphComment 0x5555d4c3d630 <col:6, col:52>
|       |-TextComment 0x5555d4c3d590 <col:6, col:44> Text=" An rvalue ref-qualifier was provided ("
|       |-InlineCommandComment 0x5555d4c3d5d0 <col:45, col:46> Name="c" RenderMonospaced Arg[0]="&&)."
|       `-TextComment 0x5555d4c3d5f0 <col:52> Text=" "
|-FunctionDecl 0x5555d4bb1e20 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4056:63> col:20 clang_Type_getNumTemplateArguments 'int (CXType)'
| |-ParmVarDecl 0x5555d4bb1d88 <col:55, col:62> col:62 T 'CXType':'CXType'
| |-VisibilityAttr 0x5555d4bb1ed0 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c3d7c0 </workspace/clang-c/Index.h:4053:3, line:4054:71>
|   `-ParagraphComment 0x5555d4c3d790 <line:4053:3, line:4054:71>
|     |-TextComment 0x5555d4c3d6d0 <line:4053:3, col:62> Text=" Returns the number of template arguments for given template"
|     |-TextComment 0x5555d4c3d6f0 <line:4054:3, col:33> Text=" specialization, or -1 if type "
|     |-InlineCommandComment 0x5555d4c3d730 <col:34, col:35> Name="c" RenderMonospaced Arg[0]="T"
|     `-TextComment 0x5555d4c3d750 <col:38, col:71> Text=" is not a template specialization."
|-FunctionDecl 0x5555d4bb7cb8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4066:70> line:4065:23 clang_Type_getTemplateArgumentAsType 'CXType (CXType, unsigned int)'
| |-ParmVarDecl 0x5555d4bb7ba0 <col:60, col:67> col:67 T 'CXType':'CXType'
| |-ParmVarDecl 0x5555d4bb7c20 <line:4066:60, col:69> col:69 i 'unsigned int'
| |-VisibilityAttr 0x5555d4bb7d70 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c3d920 </workspace/clang-c/Index.h:4059:3, line:4063:49>
|   |-ParagraphComment 0x5555d4c3d880 <line:4059:3, line:4060:18>
|   | |-TextComment 0x5555d4c3d830 <line:4059:3, col:72> Text=" Returns the type template argument of a template class specialization"
|   | `-TextComment 0x5555d4c3d850 <line:4060:3, col:18> Text=" at given index."
|   `-ParagraphComment 0x5555d4c3d8f0 <line:4062:3, line:4063:49>
|     |-TextComment 0x5555d4c3d8a0 <line:4062:3, col:73> Text=" This function only returns template type arguments and does not handle"
|     `-TextComment 0x5555d4c3d8c0 <line:4063:3, col:49> Text=" template template arguments or variadic packs."
|-FunctionDecl 0x5555d4bb7f58 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4074:78> col:40 clang_Type_getCXXRefQualifier 'enum CXRefQualifierKind (CXType)'
| |-ParmVarDecl 0x5555d4bb7e28 <col:70, col:77> col:77 T 'CXType':'CXType'
| |-VisibilityAttr 0x5555d4bb8008 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c3da60 </workspace/clang-c/Index.h:4069:3, line:4072:60>
|   |-ParagraphComment 0x5555d4c3d9c0 <line:4069:3, col:59>
|   | `-TextComment 0x5555d4c3d990 <col:3, col:59> Text=" Retrieve the ref-qualifier kind of a function or method."
|   `-ParagraphComment 0x5555d4c3da30 <line:4071:3, line:4072:60>
|     |-TextComment 0x5555d4c3d9e0 <line:4071:3, col:78> Text=" The ref-qualifier is returned for C++ functions or methods. For other types"
|     `-TextComment 0x5555d4c3da00 <line:4072:3, col:60> Text=" or non-C++ declarations, CXRefQualifier_None is returned."
|-FunctionDecl 0x5555d4bb8150 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4080:59> col:25 clang_Cursor_isBitField 'unsigned int (CXCursor)'
| |-ParmVarDecl 0x5555d4bb80b8 <col:49, col:58> col:58 C 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4bb8200 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c3db50 </workspace/clang-c/Index.h:4077:3, line:4078:14>
|   `-ParagraphComment 0x5555d4c3db20 <line:4077:3, line:4078:14>
|     |-TextComment 0x5555d4c3dad0 <line:4077:3, col:69> Text=" Returns non-zero if the cursor specifies a Record member that is a"
|     `-TextComment 0x5555d4c3daf0 <line:4078:3, col:14> Text="   bitfield."
|-FunctionDecl 0x5555d4bb8350 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4086:53> col:25 clang_isVirtualBase 'unsigned int (CXCursor)'
| |-ParmVarDecl 0x5555d4bb82b8 <col:45> col:53 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4bb8400 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c3dc40 </workspace/clang-c/Index.h:4083:3, line:4084:36>
|   `-ParagraphComment 0x5555d4c3dc10 <line:4083:3, line:4084:36>
|     |-TextComment 0x5555d4c3dbc0 <line:4083:3, col:64> Text=" Returns 1 if the base class specified by the cursor with kind"
|     `-TextComment 0x5555d4c3dbe0 <line:4084:3, col:36> Text="   CX_CXXBaseSpecifier is virtual."
|-EnumDecl 0x5555d4bb8488 <line:4092:1, line:4097:1> line:4092:6 CX_CXXAccessSpecifier
| |-FullComment 0x5555d4c3dd30 <line:4089:3, line:4090:40>
| | `-ParagraphComment 0x5555d4c3dd00 <line:4089:3, line:4090:40>
| |   |-TextComment 0x5555d4c3dcb0 <line:4089:3, col:64> Text=" Represents the C++ access control level to a base class for a"
| |   `-TextComment 0x5555d4c3dcd0 <line:4090:3, col:40> Text=" cursor with kind CX_CXXBaseSpecifier."
| |-EnumConstantDecl 0x5555d4bb8550 <line:4093:3> col:3 CX_CXXInvalidAccessSpecifier 'int'
| |-EnumConstantDecl 0x5555d4bb85a0 <line:4094:3> col:3 CX_CXXPublic 'int'
| |-EnumConstantDecl 0x5555d4bb85f0 <line:4095:3> col:3 CX_CXXProtected 'int'
| `-EnumConstantDecl 0x5555d4bb8640 <line:4096:3> col:3 CX_CXXPrivate 'int'
|-FunctionDecl 0x5555d4bb8818 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4106:79> col:43 clang_getCXXAccessSpecifier 'enum CX_CXXAccessSpecifier (CXCursor)'
| |-ParmVarDecl 0x5555d4bb86e8 <col:71> col:79 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4bb88c8 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c3deb0 </workspace/clang-c/Index.h:4100:3, line:4104:67>
|   |-ParagraphComment 0x5555d4c3dde0 <line:4100:3, col:62>
|   | `-TextComment 0x5555d4c3dda0 <col:3, col:62> Text=" Returns the access control level for the referenced object."
|   `-ParagraphComment 0x5555d4c3de80 <line:4102:3, line:4104:67>
|     |-TextComment 0x5555d4c3de00 <line:4102:3, col:77> Text=" If the cursor refers to a C++ declaration, its access control level within"
|     |-TextComment 0x5555d4c3de20 <line:4103:3, col:74> Text=" its parent scope is returned. Otherwise, if the cursor refers to a base"
|     `-TextComment 0x5555d4c3de40 <line:4104:3, col:67> Text=" specifier or access specifier, the specifier itself is returned."
|-EnumDecl 0x5555d4bb8948 <line:4112:1, line:4121:1> line:4112:6 CX_StorageClass
| |-FullComment 0x5555d4c3dfa0 <line:4109:3, line:4110:70>
| | `-ParagraphComment 0x5555d4c3df70 <line:4109:3, line:4110:70>
| |   |-TextComment 0x5555d4c3df20 <line:4109:3, col:74> Text=" Represents the storage classes as declared in the source. CX_SC_Invalid"
| |   `-TextComment 0x5555d4c3df40 <line:4110:3, col:70> Text=" was added for the case that the passed cursor in not a declaration."
| |-EnumConstantDecl 0x5555d4bb8a10 <line:4113:3> col:3 CX_SC_Invalid 'int'
| |-EnumConstantDecl 0x5555d4bb8a60 <line:4114:3> col:3 CX_SC_None 'int'
| |-EnumConstantDecl 0x5555d4bb8ab0 <line:4115:3> col:3 CX_SC_Extern 'int'
| |-EnumConstantDecl 0x5555d4bb8b00 <line:4116:3> col:3 CX_SC_Static 'int'
| |-EnumConstantDecl 0x5555d4bb8b50 <line:4117:3> col:3 CX_SC_PrivateExtern 'int'
| |-EnumConstantDecl 0x5555d4bb8bb0 <line:4118:3> col:3 CX_SC_OpenCLWorkGroupLocal 'int'
| |-EnumConstantDecl 0x5555d4bb8c00 <line:4119:3> col:3 CX_SC_Auto 'int'
| `-EnumConstantDecl 0x5555d4bb8c50 <line:4120:3> col:3 CX_SC_Register 'int'
|-FunctionDecl 0x5555d4bb8e28 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4129:74> col:37 clang_Cursor_getStorageClass 'enum CX_StorageClass (CXCursor)'
| |-ParmVarDecl 0x5555d4bb8cf8 <col:66> col:74 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4bb8ed8 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c3e0e0 </workspace/clang-c/Index.h:4124:3, line:4127:52>
|   |-ParagraphComment 0x5555d4c3e040 <line:4124:3, col:68>
|   | `-TextComment 0x5555d4c3e010 <col:3, col:68> Text=" Returns the storage class for a function or variable declaration."
|   `-ParagraphComment 0x5555d4c3e0b0 <line:4126:3, line:4127:52>
|     |-TextComment 0x5555d4c3e060 <line:4126:3, col:69> Text=" If the passed in Cursor is not a function or variable declaration,"
|     `-TextComment 0x5555d4c3e080 <line:4127:3, col:52> Text=" CX_SC_Invalid is returned else the storage class."
|-FunctionDecl 0x5555d4bb9020 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4140:68> col:25 clang_getNumOverloadedDecls 'unsigned int (CXCursor)'
| |-ParmVarDecl 0x5555d4bb8f88 <col:53, col:62> col:62 cursor 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4bb90d0 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c3e570 </workspace/clang-c/Index.h:4132:3, line:4138:60>
|   |-ParagraphComment 0x5555d4c3e230 <line:4132:3, line:4133:40>
|   | |-TextComment 0x5555d4c3e150 <line:4132:3, col:66> Text=" Determine the number of overloaded declarations referenced by a"
|   | |-TextComment 0x5555d4c3e170 <line:4133:3> Text=" "
|   | |-InlineCommandComment 0x5555d4c3e1d0 <col:4, col:5> Name="c" RenderMonospaced Arg[0]="CXCursor_OverloadedDeclRef"
|   | `-TextComment 0x5555d4c3e1f0 <col:33, col:40> Text=" cursor."
|   |-ParagraphComment 0x5555d4c3e280 <line:4135:3>
|   | `-TextComment 0x5555d4c3e250 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c3e2a0 <col:4, col:76> [in] implicitly Param="cursor" ParamIndex=0
|   | `-ParagraphComment 0x5555d4c3e330 <col:17, col:76>
|   |   `-TextComment 0x5555d4c3e300 <col:17, col:76> Text=" The cursor whose overloaded declarations are being queried."
|   |-ParagraphComment 0x5555d4c3e380 <line:4137:3>
|   | `-TextComment 0x5555d4c3e350 <col:3> Text=" "
|   `-BlockCommandComment 0x5555d4c3e3a0 <col:4, line:4138:60> Name="returns"
|     `-ParagraphComment 0x5555d4c3e520 <line:4137:12, line:4138:60>
|       |-TextComment 0x5555d4c3e3d0 <line:4137:12, col:64> Text=" The number of overloaded declarations referenced by "
|       |-InlineCommandComment 0x5555d4c3e410 <col:65, col:66> Name="c" RenderMonospaced Arg[0]="cursor."
|       |-TextComment 0x5555d4c3e430 <col:75, col:80> Text=" If it"
|       |-TextComment 0x5555d4c3e450 <line:4138:3, col:12> Text=" is not a "
|       |-InlineCommandComment 0x5555d4c3e4b0 <col:13, col:14> Name="c" RenderMonospaced Arg[0]="CXCursor_OverloadedDeclRef"
|       `-TextComment 0x5555d4c3e4d0 <col:42, col:60> Text=" cursor, returns 0."
|-FunctionDecl 0x5555d4bb92a0 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4157:63> line:4156:25 clang_getOverloadedDecl 'CXCursor (CXCursor, unsigned int)'
| |-ParmVarDecl 0x5555d4bb9188 <col:49, col:58> col:58 cursor 'CXCursor':'CXCursor'
| |-ParmVarDecl 0x5555d4bb9208 <line:4157:49, col:58> col:58 index 'unsigned int'
| |-VisibilityAttr 0x5555d4bb9358 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c3ebe0 </workspace/clang-c/Index.h:4143:3, line:4155:1>
|   |-ParagraphComment 0x5555d4c3e6c0 <line:4143:3, line:4144:45>
|   | |-TextComment 0x5555d4c3e5e0 <line:4143:3, col:70> Text=" Retrieve a cursor for one of the overloaded declarations referenced"
|   | |-TextComment 0x5555d4c3e600 <line:4144:3, col:8> Text=" by a "
|   | |-InlineCommandComment 0x5555d4c3e660 <col:9, col:10> Name="c" RenderMonospaced Arg[0]="CXCursor_OverloadedDeclRef"
|   | `-TextComment 0x5555d4c3e680 <col:38, col:45> Text=" cursor."
|   |-ParagraphComment 0x5555d4c3e710 <line:4146:3>
|   | `-TextComment 0x5555d4c3e6e0 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c3e730 <col:4, col:76> [in] implicitly Param="cursor" ParamIndex=0
|   | `-ParagraphComment 0x5555d4c3e7c0 <col:17, col:76>
|   |   `-TextComment 0x5555d4c3e790 <col:17, col:76> Text=" The cursor whose overloaded declarations are being queried."
|   |-ParagraphComment 0x5555d4c3e810 <line:4148:3>
|   | `-TextComment 0x5555d4c3e7e0 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c3e830 <col:4, line:4149:14> [in] implicitly Param="index" ParamIndex=1
|   | `-ParagraphComment 0x5555d4c3e8e0 <line:4148:16, line:4149:14>
|   |   |-TextComment 0x5555d4c3e890 <line:4148:16, col:79> Text=" The zero-based index into the set of overloaded declarations in"
|   |   `-TextComment 0x5555d4c3e8b0 <line:4149:3, col:14> Text=" the cursor."
|   |-ParagraphComment 0x5555d4c3e930 <line:4151:3>
|   | `-TextComment 0x5555d4c3e900 <col:3> Text=" "
|   `-BlockCommandComment 0x5555d4c3e950 <col:4, line:4155:1> Name="returns"
|     `-ParagraphComment 0x5555d4c3eb80 <line:4151:12, line:4155:1>
|       |-TextComment 0x5555d4c3e980 <line:4151:12, col:73> Text=" A cursor representing the declaration referenced by the given"
|       |-TextComment 0x5555d4c3e9a0 <line:4152:3> Text=" "
|       |-InlineCommandComment 0x5555d4c3e9e0 <col:4, col:5> Name="c" RenderMonospaced Arg[0]="cursor"
|       |-TextComment 0x5555d4c3ea00 <col:13, col:30> Text=" at the specified "
|       |-InlineCommandComment 0x5555d4c3ea40 <col:31, col:32> Name="c" RenderMonospaced Arg[0]="index."
|       |-TextComment 0x5555d4c3ea60 <col:40, col:70> Text=" If the cursor does not have an"
|       |-TextComment 0x5555d4c3ea80 <line:4153:3, col:79> Text=" associated set of overloaded declarations, or if the index is out of bounds,"
|       |-TextComment 0x5555d4c3eaa0 <line:4154:3, col:11> Text=" returns "
|       |-InlineCommandComment 0x5555d4c3eaf0 <col:12, col:13> Name="c" RenderMonospaced Arg[0]="clang_getNullCursor();"
|       `-TextComment 0x5555d4c3eb10 <line:4155:1> Text=" "
|-FunctionDecl 0x5555d4bb94f8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4174:63> col:23 clang_getIBOutletCollectionType 'CXType (CXCursor)'
| |-ParmVarDecl 0x5555d4bb9468 <col:55> col:63 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4bb95a8 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c3ed20 </workspace/clang-c/Index.h:4170:3, line:4173:1>
|   |-ParagraphComment 0x5555d4c3eca0 <line:4170:3, line:4171:54>
|   | |-TextComment 0x5555d4c3ec50 <line:4170:3, col:60> Text=" For cursors representing an iboutletcollection attribute,"
|   | `-TextComment 0x5555d4c3ec70 <line:4171:3, col:54> Text="  this function returns the collection element type."
|   `-ParagraphComment 0x5555d4c3ecf0 <line:4173:1>
|     `-TextComment 0x5555d4c3ecc0 <col:1> Text=" "
|-EnumDecl 0x5555d4bb9688 <line:4196:1, line:4211:1> line:4196:6 CXChildVisitResult
| |-FullComment 0x5555d4c3ef00 <line:4190:3, line:4194:68>
| | |-ParagraphComment 0x5555d4c3ede0 <line:4190:3, line:4191:66>
| | | |-TextComment 0x5555d4c3ed90 <line:4190:3, col:62> Text=" Describes how the traversal of the children of a particular"
| | | `-TextComment 0x5555d4c3edb0 <line:4191:3, col:66> Text=" cursor should proceed after visiting a particular child cursor."
| | `-ParagraphComment 0x5555d4c3eed0 <line:4193:3, line:4194:68>
| |   |-TextComment 0x5555d4c3ee00 <line:4193:3, col:62> Text=" A value of this enumeration type should be returned by each"
| |   |-TextComment 0x5555d4c3ee20 <line:4194:3> Text=" "
| |   |-InlineCommandComment 0x5555d4c3ee70 <col:4, col:5> Name="c" RenderMonospaced Arg[0]="CXCursorVisitor"
| |   `-TextComment 0x5555d4c3ee90 <col:22, col:68> Text=" to indicate how clang_visitChildren() proceed."
| |-EnumConstantDecl 0x5555d4bb9778 <line:4200:3> col:3 CXChildVisit_Break 'int'
| | `-FullComment 0x5555d4c3efd0 <line:4198:5, col:37>
| |   `-ParagraphComment 0x5555d4c3efa0 <col:5, col:37>
| |     `-TextComment 0x5555d4c3ef70 <col:5, col:37> Text=" Terminates the cursor traversal."
| |-EnumConstantDecl 0x5555d4bb97f8 <line:4205:3> col:3 CXChildVisit_Continue 'int'
| | `-FullComment 0x5555d4c3f0c0 <line:4202:5, line:4203:60>
| |   `-ParagraphComment 0x5555d4c3f090 <line:4202:5, line:4203:60>
| |     |-TextComment 0x5555d4c3f040 <line:4202:5, col:60> Text=" Continues the cursor traversal with the next sibling of"
| |     `-TextComment 0x5555d4c3f060 <line:4203:5, col:60> Text=" the cursor just visited, without visiting its children."
| `-EnumConstantDecl 0x5555d4bb9878 <line:4210:3> col:3 CXChildVisit_Recurse 'int'
|   `-FullComment 0x5555d4c3f1b0 <line:4207:5, line:4208:38>
|     `-ParagraphComment 0x5555d4c3f180 <line:4207:5, line:4208:38>
|       |-TextComment 0x5555d4c3f130 <line:4207:5, col:60> Text=" Recursively traverse the children of this cursor, using"
|       `-TextComment 0x5555d4c3f150 <line:4208:5, col:38> Text=" the same visitor and client data."
|-TypedefDecl 0x5555d4bb9c70 <line:4225:1, line:4227:76> line:4225:35 referenced CXCursorVisitor 'enum CXChildVisitResult (*)(CXCursor, CXCursor, CXClientData)'
| |-PointerType 0x5555d4bb9bf0 'enum CXChildVisitResult (*)(CXCursor, CXCursor, CXClientData)'
| | `-ParenType 0x5555d4bb9b80 'enum CXChildVisitResult (CXCursor, CXCursor, CXClientData)' sugar
| |   `-FunctionProtoType 0x5555d4bb9b40 'enum CXChildVisitResult (CXCursor, CXCursor, CXClientData)' cdecl
| |     |-ElaboratedType 0x5555d4bb9ad0 'enum CXChildVisitResult' sugar
| |     | `-EnumType 0x5555d4bb9730 'enum CXChildVisitResult'
| |     |   `-Enum 0x5555d4bb9688 'CXChildVisitResult'
| |     |-ElaboratedType 0x5555d4b92d70 'CXCursor' sugar
| |     | `-TypedefType 0x5555d4b92d40 'CXCursor' sugar
| |     |   |-Typedef 0x5555d4b92c58 'CXCursor'
| |     |   `-ElaboratedType 0x5555d4b92c00 'struct CXCursor' sugar
| |     |     `-RecordType 0x5555d4b929e0 'CXCursor'
| |     |       `-Record 0x5555d4b92958 ''
| |     |-ElaboratedType 0x5555d4b92d70 'CXCursor' sugar
| |     | `-TypedefType 0x5555d4b92d40 'CXCursor' sugar
| |     |   |-Typedef 0x5555d4b92c58 'CXCursor'
| |     |   `-ElaboratedType 0x5555d4b92c00 'struct CXCursor' sugar
| |     |     `-RecordType 0x5555d4b929e0 'CXCursor'
| |     |       `-Record 0x5555d4b92958 ''
| |     `-ElaboratedType 0x5555d4bb9a20 'CXClientData' sugar
| |       `-TypedefType 0x5555d4bb99f0 'CXClientData' sugar
| |         |-Typedef 0x5555d4b5d5a8 'CXClientData'
| |         `-PointerType 0x5555d4abe5e0 'void *'
| |           `-BuiltinType 0x5555d4abdec0 'void'
| `-FullComment 0x5555d4c3f470 <line:4214:3, line:4223:41>
|   |-ParagraphComment 0x5555d4c3f250 <line:4214:3, col:56>
|   | `-TextComment 0x5555d4c3f220 <col:3, col:56> Text=" Visitor invoked for each cursor found by a traversal."
|   |-ParagraphComment 0x5555d4c3f340 <line:4216:3, line:4220:31>
|   | |-TextComment 0x5555d4c3f270 <line:4216:3, col:65> Text=" This visitor function will be invoked for each cursor found by"
|   | |-TextComment 0x5555d4c3f290 <line:4217:3, col:70> Text=" clang_visitCursorChildren(). Its first argument is the cursor being"
|   | |-TextComment 0x5555d4c3f2b0 <line:4218:3, col:70> Text=" visited, its second argument is the parent visitor for that cursor,"
|   | |-TextComment 0x5555d4c3f2d0 <line:4219:3, col:56> Text=" and its third argument is the client data provided to"
|   | `-TextComment 0x5555d4c3f2f0 <line:4220:3, col:31> Text=" clang_visitCursorChildren()."
|   `-ParagraphComment 0x5555d4c3f430 <line:4222:3, line:4223:41>
|     |-TextComment 0x5555d4c3f360 <line:4222:3, col:40> Text=" The visitor should return one of the "
|     |-InlineCommandComment 0x5555d4c3f3b0 <col:41, col:42> Name="c" RenderMonospaced Arg[0]="CXChildVisitResult"
|     |-TextComment 0x5555d4c3f3d0 <col:62, col:68> Text=" values"
|     `-TextComment 0x5555d4c3f3f0 <line:4223:3, col:41> Text=" to direct clang_visitCursorChildren()."
|-FunctionDecl 0x5555d4bb9fa0 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4253:69> line:4251:25 clang_visitChildren 'unsigned int (CXCursor, CXCursorVisitor, CXClientData)'
| |-ParmVarDecl 0x5555d4bb9d28 <col:45, col:54> col:54 parent 'CXCursor':'CXCursor'
| |-ParmVarDecl 0x5555d4bb9e00 <line:4252:45, col:61> col:61 visitor 'CXCursorVisitor':'enum CXChildVisitResult (*)(CXCursor, CXCursor, CXClientData)'
| |-ParmVarDecl 0x5555d4bb9e78 <line:4253:45, col:58> col:58 client_data 'CXClientData':'void *'
| |-VisibilityAttr 0x5555d4bba060 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c3fd00 </workspace/clang-c/Index.h:4230:3, line:4250:1>
|   |-ParagraphComment 0x5555d4c3f510 <line:4230:3, col:45>
|   | `-TextComment 0x5555d4c3f4e0 <col:3, col:45> Text=" Visit the children of a particular cursor."
|   |-ParagraphComment 0x5555d4c3f740 <line:4232:3, line:4236:25>
|   | |-TextComment 0x5555d4c3f530 <line:4232:3, col:68> Text=" This function visits all the direct children of the given cursor,"
|   | |-TextComment 0x5555d4c3f550 <line:4233:3, col:22> Text=" invoking the given "
|   | |-InlineCommandComment 0x5555d4c3f590 <col:23, col:24> Name="p" RenderMonospaced Arg[0]="visitor"
|   | |-TextComment 0x5555d4c3f5b0 <col:33, col:66> Text=" function with the cursors of each"
|   | |-TextComment 0x5555d4c3f5d0 <line:4234:3, col:72> Text=" visited child. The traversal may be recursive, if the visitor returns"
|   | |-TextComment 0x5555d4c3f5f0 <line:4235:3> Text=" "
|   | |-InlineCommandComment 0x5555d4c3f640 <col:4, col:5> Name="c" RenderMonospaced Arg[0]="CXChildVisit_Recurse."
|   | |-TextComment 0x5555d4c3f660 <col:28, col:75> Text=" The traversal may also be ended prematurely, if"
|   | |-TextComment 0x5555d4c3f680 <line:4236:3, col:23> Text=" the visitor returns "
|   | `-InlineCommandComment 0x5555d4c3f6d0 <col:24, col:25> Name="c" RenderMonospaced Arg[0]="CXChildVisit_Break."
|   |-ParagraphComment 0x5555d4c3f790 <line:4238:3>
|   | `-TextComment 0x5555d4c3f760 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c3f7b0 <col:4, line:4240:33> [in] implicitly Param="parent" ParamIndex=0
|   | `-ParagraphComment 0x5555d4c3f890 <line:4238:17, line:4240:33>
|   |   |-TextComment 0x5555d4c3f810 <line:4238:17, col:68> Text=" the cursor whose child may be visited. All kinds of"
|   |   |-TextComment 0x5555d4c3f830 <line:4239:3, col:63> Text=" cursors can be visited, including invalid cursors (which, by"
|   |   `-TextComment 0x5555d4c3f850 <line:4240:3, col:33> Text=" definition, have no children)."
|   |-ParagraphComment 0x5555d4c3f8e0 <line:4242:3>
|   | `-TextComment 0x5555d4c3f8b0 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c3f900 <col:4, line:4243:14> [in] implicitly Param="visitor" ParamIndex=1
|   | `-ParagraphComment 0x5555d4c3fa00 <line:4242:18, line:4243:14>
|   |   |-TextComment 0x5555d4c3f960 <line:4242:18, col:68> Text=" the visitor function that will be invoked for each"
|   |   |-TextComment 0x5555d4c3f980 <line:4243:3, col:12> Text=" child of "
|   |   `-InlineCommandComment 0x5555d4c3f9c0 <col:13, col:14> Name="p" RenderMonospaced Arg[0]="parent."
|   |-ParagraphComment 0x5555d4c3fa50 <line:4245:3>
|   | `-TextComment 0x5555d4c3fa20 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c3fa70 <col:4, line:4246:52> [in] implicitly Param="client_data" ParamIndex=2
|   | `-ParagraphComment 0x5555d4c3fb20 <line:4245:22, line:4246:52>
|   |   |-TextComment 0x5555d4c3fad0 <line:4245:22, col:69> Text=" pointer data supplied by the client, which will"
|   |   `-TextComment 0x5555d4c3faf0 <line:4246:3, col:52> Text=" be passed to the visitor each time it is invoked."
|   |-ParagraphComment 0x5555d4c3fb70 <line:4248:3>
|   | `-TextComment 0x5555d4c3fb40 <col:3> Text=" "
|   `-BlockCommandComment 0x5555d4c3fb90 <col:4, line:4250:1> Name="returns"
|     `-ParagraphComment 0x5555d4c3fc90 <line:4248:12, line:4250:1>
|       |-TextComment 0x5555d4c3fbc0 <line:4248:12, col:60> Text=" a non-zero value if the traversal was terminated"
|       |-TextComment 0x5555d4c3fbe0 <line:4249:3, col:40> Text=" prematurely by the visitor returning "
|       |-InlineCommandComment 0x5555d4c3fc30 <col:41, col:42> Name="c" RenderMonospaced Arg[0]="CXChildVisit_Break."
|       `-TextComment 0x5555d4c3fc50 <line:4250:1> Text=" "
|-FunctionDecl 0x5555d4bba208 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4302:52> col:25 clang_getCursorUSR 'CXString (CXCursor)'
| |-ParmVarDecl 0x5555d4bba178 <col:44> col:52 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4bba2b8 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c3fec0 </workspace/clang-c/Index.h:4294:3, line:4300:74>
|   |-ParagraphComment 0x5555d4c3fdc0 <line:4294:3, line:4295:23>
|   | |-TextComment 0x5555d4c3fd70 <line:4294:3, col:71> Text=" Retrieve a Unified Symbol Resolution (USR) for the entity referenced"
|   | `-TextComment 0x5555d4c3fd90 <line:4295:3, col:23> Text=" by the given cursor."
|   `-ParagraphComment 0x5555d4c3fe90 <line:4297:3, line:4300:74>
|     |-TextComment 0x5555d4c3fdf0 <line:4297:3, col:77> Text=" A Unified Symbol Resolution (USR) is a string that identifies a particular"
|     |-TextComment 0x5555d4c3fe10 <line:4298:3, col:73> Text=" entity (function, class, variable, etc.) within a program. USRs can be"
|     |-TextComment 0x5555d4c3fe30 <line:4299:3, col:75> Text=" compared across translation units to determine, e.g., when references in"
|     `-TextComment 0x5555d4c3fe50 <line:4300:3, col:74> Text=" one translation refer to an entity defined in another translation unit."
|-FunctionDecl 0x5555d4bba468 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4307:76> col:25 clang_constructUSR_ObjCClass 'CXString (const char *)'
| |-ParmVarDecl 0x5555d4bba370 <col:54, col:66> col:66 class_name 'const char *'
| |-VisibilityAttr 0x5555d4bba518 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c3ff90 </workspace/clang-c/Index.h:4305:3, col:53>
|   `-ParagraphComment 0x5555d4c3ff60 <col:3, col:53>
|     `-TextComment 0x5555d4c3ff30 <col:3, col:53> Text=" Construct a USR for a specified Objective-C class."
|-FunctionDecl 0x5555d4bba768 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4313:54> line:4312:25 clang_constructUSR_ObjCCategory 'CXString (const char *, const char *)'
| |-ParmVarDecl 0x5555d4bba5d0 <line:4313:5, col:17> col:17 class_name 'const char *'
| |-ParmVarDecl 0x5555d4bba650 <col:29, col:41> col:41 category_name 'const char *'
| |-VisibilityAttr 0x5555d4bba820 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c40060 </workspace/clang-c/Index.h:4310:3, col:56>
|   `-ParagraphComment 0x5555d4c40030 <col:3, col:56>
|     `-TextComment 0x5555d4c40000 <col:3, col:56> Text=" Construct a USR for a specified Objective-C category."
|-FunctionDecl 0x5555d4bba970 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4319:58> col:1 clang_constructUSR_ObjCProtocol 'CXString (const char *)'
| |-ParmVarDecl 0x5555d4bba8e0 <col:33, col:45> col:45 protocol_name 'const char *'
| |-VisibilityAttr 0x5555d4bbaa20 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c40130 </workspace/clang-c/Index.h:4316:3, col:56>
|   `-ParagraphComment 0x5555d4c40100 <col:3, col:56>
|     `-TextComment 0x5555d4c400d0 <col:3, col:56> Text=" Construct a USR for a specified Objective-C protocol."
|-FunctionDecl 0x5555d4bbac78 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4326:70> line:4325:25 clang_constructUSR_ObjCIvar 'CXString (const char *, CXString)'
| |-ParmVarDecl 0x5555d4bbaae0 <col:53, col:65> col:65 name 'const char *'
| |-ParmVarDecl 0x5555d4bbab58 <line:4326:53, col:62> col:62 classUSR 'CXString':'CXString'
| |-VisibilityAttr 0x5555d4bbad30 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c40220 </workspace/clang-c/Index.h:4322:3, line:4323:38>
|   `-ParagraphComment 0x5555d4c401f0 <line:4322:3, line:4323:38>
|     |-TextComment 0x5555d4c401a0 <line:4322:3, col:68> Text=" Construct a USR for a specified Objective-C instance variable and"
|     `-TextComment 0x5555d4c401c0 <line:4323:3, col:38> Text="   the USR for its containing class."
|-FunctionDecl 0x5555d4bbb008 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4334:72> line:4332:25 clang_constructUSR_ObjCMethod 'CXString (const char *, unsigned int, CXString)'
| |-ParmVarDecl 0x5555d4bbadf0 <col:55, col:67> col:67 name 'const char *'
| |-ParmVarDecl 0x5555d4bbae70 <line:4333:55, col:64> col:64 isInstanceMethod 'unsigned int'
| |-ParmVarDecl 0x5555d4bbaee8 <line:4334:55, col:64> col:64 classUSR 'CXString':'CXString'
| |-VisibilityAttr 0x5555d4bbb0c8 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c40310 </workspace/clang-c/Index.h:4329:3, line:4330:38>
|   `-ParagraphComment 0x5555d4c402e0 <line:4329:3, line:4330:38>
|     |-TextComment 0x5555d4c40290 <line:4329:3, col:57> Text=" Construct a USR for a specified Objective-C method and"
|     `-TextComment 0x5555d4c402b0 <line:4330:3, col:38> Text="   the USR for its containing class."
|-FunctionDecl 0x5555d4bbb290 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4341:74> line:4340:25 clang_constructUSR_ObjCProperty 'CXString (const char *, CXString)'
| |-ParmVarDecl 0x5555d4bbb180 <col:57, col:69> col:69 property 'const char *'
| |-ParmVarDecl 0x5555d4bbb1f8 <line:4341:57, col:66> col:66 classUSR 'CXString':'CXString'
| |-VisibilityAttr 0x5555d4bbb348 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c40400 </workspace/clang-c/Index.h:4337:3, line:4338:29>
|   `-ParagraphComment 0x5555d4c403d0 <line:4337:3, line:4338:29>
|     |-TextComment 0x5555d4c40380 <line:4337:3, col:67> Text=" Construct a USR for a specified Objective-C property and the USR"
|     `-TextComment 0x5555d4c403a0 <line:4338:3, col:29> Text="  for its containing class."
|-FunctionDecl 0x5555d4bbb488 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4346:57> col:25 clang_getCursorSpelling 'CXString (CXCursor)'
| |-ParmVarDecl 0x5555d4bbb3f8 <col:49> col:57 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4bbb538 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c404d0 </workspace/clang-c/Index.h:4344:3, col:60>
|   `-ParagraphComment 0x5555d4c404a0 <col:3, col:60>
|     `-TextComment 0x5555d4c40470 <col:3, col:60> Text=" Retrieve a name for the entity referenced by this cursor."
|-FunctionDecl 0x5555d4bbb808 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4360:52> line:4359:30 clang_Cursor_getSpellingNameRange 'CXSourceRange (CXCursor, unsigned int, unsigned int)'
| |-ParmVarDecl 0x5555d4bbb5e8 <line:4360:5> col:13 'CXCursor':'CXCursor'
| |-ParmVarDecl 0x5555d4bbb668 <col:15, col:24> col:24 pieceIndex 'unsigned int'
| |-ParmVarDecl 0x5555d4bbb6e8 <col:36, col:45> col:45 options 'unsigned int'
| |-VisibilityAttr 0x5555d4bbb8c8 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c40850 </workspace/clang-c/Index.h:4349:3, line:4357:27>
|   |-ParagraphComment 0x5555d4c405e0 <line:4349:3, line:4352:39>
|   | |-TextComment 0x5555d4c40540 <line:4349:3, col:69> Text=" Retrieve a range for a piece that forms the cursors spelling name."
|   | |-TextComment 0x5555d4c40560 <line:4350:3, col:78> Text=" Most of the times there is only one range for the complete spelling but for"
|   | |-TextComment 0x5555d4c40580 <line:4351:3, col:78> Text=" Objective-C methods and Objective-C message expressions, there are multiple"
|   | `-TextComment 0x5555d4c405a0 <line:4352:3, col:39> Text=" pieces for each selector identifier."
|   |-ParagraphComment 0x5555d4c40630 <line:4354:3>
|   | `-TextComment 0x5555d4c40600 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c40650 <col:4, line:4355:75> [in] implicitly Param="pieceIndex" ParamIndex=1
|   | `-ParagraphComment 0x5555d4c40700 <line:4354:21, line:4355:75>
|   |   |-TextComment 0x5555d4c406b0 <line:4354:21, col:77> Text=" the index of the spelling name piece. If this is greater"
|   |   `-TextComment 0x5555d4c406d0 <line:4355:3, col:75> Text=" than the actual number of pieces, it will return a NULL (invalid) range."
|   |-ParagraphComment 0x5555d4c40750 <line:4357:3>
|   | `-TextComment 0x5555d4c40720 <col:3> Text=" "
|   `-ParamCommandComment 0x5555d4c40770 <col:4, col:27> [in] implicitly Param="options" ParamIndex=2
|     `-ParagraphComment 0x5555d4c40800 <col:18, col:27>
|       `-TextComment 0x5555d4c407d0 <col:18, col:27> Text=" Reserved."
|-TypedefDecl 0x5555d4bbb960 <line:4366:1, col:15> col:15 referenced CXPrintingPolicy 'void *'
| |-PointerType 0x5555d4abe5e0 'void *'
| | `-BuiltinType 0x5555d4abdec0 'void'
| `-FullComment 0x5555d4c409d0 <line:4363:3, line:4365:1>
|   `-ParagraphComment 0x5555d4c409a0 <line:4363:3, line:4365:1>
|     |-TextComment 0x5555d4c408c0 <line:4363:3, col:69> Text=" Opaque pointer representing a policy that controls pretty printing"
|     |-TextComment 0x5555d4c408e0 <line:4364:3, col:7> Text=" for "
|     |-InlineCommandComment 0x5555d4c40940 <col:8, col:9> Name="c" RenderMonospaced Arg[0]="clang_getCursorPrettyPrinted."
|     `-TextComment 0x5555d4c40960 <line:4365:1> Text=" "
|-EnumDecl 0x5555d4bbb9e8 <line:4373:1, line:4402:1> line:4373:6 CXPrintingPolicyProperty
| |-FullComment 0x5555d4c40b70 <line:4369:3, line:4371:53>
| | |-ParagraphComment 0x5555d4c40a70 <line:4369:3, col:38>
| | | `-TextComment 0x5555d4c40a40 <col:3, col:38> Text=" Properties for the printing policy."
| | `-ParagraphComment 0x5555d4c40b40 <line:4371:3, col:53>
| |   |-TextComment 0x5555d4c40a90 <col:3, col:7> Text=" See "
| |   |-InlineCommandComment 0x5555d4c40ae0 <col:8, col:9> Name="c" RenderMonospaced Arg[0]="clang::PrintingPolicy"
| |   `-TextComment 0x5555d4c40b00 <col:32, col:53> Text=" for more information."
| |-EnumConstantDecl 0x5555d4bbbab0 <line:4374:3> col:3 CXPrintingPolicy_Indentation 'int'
| |-EnumConstantDecl 0x5555d4bbbb00 <line:4375:3> col:3 CXPrintingPolicy_SuppressSpecifiers 'int'
| |-EnumConstantDecl 0x5555d4bbbb50 <line:4376:3> col:3 CXPrintingPolicy_SuppressTagKeyword 'int'
| |-EnumConstantDecl 0x5555d4bbbbe0 <line:4377:3> col:3 CXPrintingPolicy_IncludeTagDefinition 'int'
| |-EnumConstantDecl 0x5555d4bbbc30 <line:4378:3> col:3 CXPrintingPolicy_SuppressScope 'int'
| |-EnumConstantDecl 0x5555d4bbbc80 <line:4379:3> col:3 CXPrintingPolicy_SuppressUnwrittenScope 'int'
| |-EnumConstantDecl 0x5555d4bbbcd0 <line:4380:3> col:3 CXPrintingPolicy_SuppressInitializers 'int'
| |-EnumConstantDecl 0x5555d4bbbd20 <line:4381:3> col:3 CXPrintingPolicy_ConstantArraySizeAsWritten 'int'
| |-EnumConstantDecl 0x5555d4bbbd70 <line:4382:3> col:3 CXPrintingPolicy_AnonymousTagLocations 'int'
| |-EnumConstantDecl 0x5555d4bbbdc0 <line:4383:3> col:3 CXPrintingPolicy_SuppressStrongLifetime 'int'
| |-EnumConstantDecl 0x5555d4bbbe10 <line:4384:3> col:3 CXPrintingPolicy_SuppressLifetimeQualifiers 'int'
| |-EnumConstantDecl 0x5555d4bbbe60 <line:4385:3> col:3 CXPrintingPolicy_SuppressTemplateArgsInCXXConstructors 'int'
| |-EnumConstantDecl 0x5555d4bbbeb0 <line:4386:3> col:3 CXPrintingPolicy_Bool 'int'
| |-EnumConstantDecl 0x5555d4bbbf00 <line:4387:3> col:3 CXPrintingPolicy_Restrict 'int'
| |-EnumConstantDecl 0x5555d4bbbf50 <line:4388:3> col:3 CXPrintingPolicy_Alignof 'int'
| |-EnumConstantDecl 0x5555d4bbbfa0 <line:4389:3> col:3 CXPrintingPolicy_UnderscoreAlignof 'int'
| |-EnumConstantDecl 0x5555d4bbbff0 <line:4390:3> col:3 CXPrintingPolicy_UseVoidForZeroParams 'int'
| |-EnumConstantDecl 0x5555d4bbc040 <line:4391:3> col:3 CXPrintingPolicy_TerseOutput 'int'
| |-EnumConstantDecl 0x5555d4bbc090 <line:4392:3> col:3 CXPrintingPolicy_PolishForDeclaration 'int'
| |-EnumConstantDecl 0x5555d4bbc0e0 <line:4393:3> col:3 CXPrintingPolicy_Half 'int'
| |-EnumConstantDecl 0x5555d4bbc130 <line:4394:3> col:3 CXPrintingPolicy_MSWChar 'int'
| |-EnumConstantDecl 0x5555d4bbc180 <line:4395:3> col:3 CXPrintingPolicy_IncludeNewlines 'int'
| |-EnumConstantDecl 0x5555d4bbc1d0 <line:4396:3> col:3 CXPrintingPolicy_MSVCFormatting 'int'
| |-EnumConstantDecl 0x5555d4bbc220 <line:4397:3> col:3 CXPrintingPolicy_ConstantsAsWritten 'int'
| |-EnumConstantDecl 0x5555d4bbc270 <line:4398:3> col:3 CXPrintingPolicy_SuppressImplicitBase 'int'
| |-EnumConstantDecl 0x5555d4bbc2c0 <line:4399:3> col:3 referenced CXPrintingPolicy_FullyQualifiedName 'int'
| `-EnumConstantDecl 0x5555d4bbc350 <line:4401:3, col:35> col:3 CXPrintingPolicy_LastProperty 'int'
|   `-ConstantExpr 0x5555d4bbc330 <col:35> 'int'
|     |-value: Int 25
|     `-DeclRefExpr 0x5555d4bbc310 <col:35> 'int' EnumConstant 0x5555d4bbc2c0 'CXPrintingPolicy_FullyQualifiedName' 'int'
|-FunctionDecl 0x5555d4bbc640 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4409:72> line:4408:1 clang_PrintingPolicy_getProperty 'unsigned int (CXPrintingPolicy, enum CXPrintingPolicyProperty)'
| |-ParmVarDecl 0x5555d4bbc460 <col:34, col:51> col:51 Policy 'CXPrintingPolicy':'void *'
| |-ParmVarDecl 0x5555d4bbc520 <line:4409:34, col:64> col:64 Property 'enum CXPrintingPolicyProperty':'enum CXPrintingPolicyProperty'
| |-VisibilityAttr 0x5555d4bbc6f8 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c40c40 </workspace/clang-c/Index.h:4405:3, col:54>
|   `-ParagraphComment 0x5555d4c40c10 <col:3, col:54>
|     `-TextComment 0x5555d4c40be0 <col:3, col:54> Text=" Get a property value for the given printing policy."
|-FunctionDecl 0x5555d4bbc9d8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4417:48> line:4415:1 clang_PrintingPolicy_setProperty 'void (CXPrintingPolicy, enum CXPrintingPolicyProperty, unsigned int)'
| |-ParmVarDecl 0x5555d4bbc7a8 <col:34, col:51> col:51 Policy 'CXPrintingPolicy':'void *'
| |-ParmVarDecl 0x5555d4bbc830 <line:4416:34, col:64> col:64 Property 'enum CXPrintingPolicyProperty':'enum CXPrintingPolicyProperty'
| |-ParmVarDecl 0x5555d4bbc8b0 <line:4417:34, col:43> col:43 Value 'unsigned int'
| |-VisibilityAttr 0x5555d4bbca98 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c40d10 </workspace/clang-c/Index.h:4412:3, col:54>
|   `-ParagraphComment 0x5555d4c40ce0 <col:3, col:54>
|     `-TextComment 0x5555d4c40cb0 <col:3, col:54> Text=" Set a property value for the given printing policy."
|-FunctionDecl 0x5555d4bbdc28 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4425:71> col:33 clang_getCursorPrintingPolicy 'CXPrintingPolicy (CXCursor)'
| |-ParmVarDecl 0x5555d4bbcb48 <col:63> col:71 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4bbdcd8 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c40ec0 </workspace/clang-c/Index.h:4420:3, line:4424:1>
|   |-ParagraphComment 0x5555d4c40db0 <line:4420:3, col:46>
|   | `-TextComment 0x5555d4c40d80 <col:3, col:46> Text=" Retrieve the default policy for the cursor."
|   `-ParagraphComment 0x5555d4c40e90 <line:4422:3, line:4424:1>
|     |-TextComment 0x5555d4c40dd0 <line:4422:3, col:48> Text=" The policy should be released after use with "
|     |-InlineCommandComment 0x5555d4c40e30 <col:49, col:50> Name="c" RenderMonospaced Arg[0]="clang_PrintingPolicy_dispose."
|     `-TextComment 0x5555d4c40e50 <line:4424:1> Text=" "
|-FunctionDecl 0x5555d4bbde48 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4430:73> col:21 clang_PrintingPolicy_dispose 'void (CXPrintingPolicy)'
| |-ParmVarDecl 0x5555d4bbdd88 <col:50, col:67> col:67 Policy 'CXPrintingPolicy':'void *'
| |-VisibilityAttr 0x5555d4bbdef8 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c40f90 </workspace/clang-c/Index.h:4428:3, col:29>
|   `-ParagraphComment 0x5555d4c40f60 <col:3, col:29>
|     `-TextComment 0x5555d4c40f30 <col:3, col:29> Text=" Release a printing policy."
|-FunctionDecl 0x5555d4bbe138 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4444:77> line:4443:25 clang_getCursorPrettyPrinted 'CXString (CXCursor, CXPrintingPolicy)'
| |-ParmVarDecl 0x5555d4bbdfa8 <col:54, col:63> col:63 Cursor 'CXCursor':'CXCursor'
| |-ParmVarDecl 0x5555d4bbe020 <line:4444:54, col:71> col:71 Policy 'CXPrintingPolicy':'void *'
| |-VisibilityAttr 0x5555d4bbe1f0 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c413a0 </workspace/clang-c/Index.h:4433:3, line:4441:17>
|   |-ParagraphComment 0x5555d4c41030 <line:4433:3, col:29>
|   | `-TextComment 0x5555d4c41000 <col:3, col:29> Text=" Pretty print declarations."
|   |-ParagraphComment 0x5555d4c41080 <line:4435:3>
|   | `-TextComment 0x5555d4c41050 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c410a0 <col:4, col:55> [in] implicitly Param="Cursor" ParamIndex=0
|   | `-ParagraphComment 0x5555d4c41130 <col:17, col:55>
|   |   `-TextComment 0x5555d4c41100 <col:17, col:55> Text=" The cursor representing a declaration."
|   |-ParagraphComment 0x5555d4c41180 <line:4437:3>
|   | `-TextComment 0x5555d4c41150 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c411a0 <col:4, line:4438:34> [in] implicitly Param="Policy" ParamIndex=1
|   | `-ParagraphComment 0x5555d4c41250 <line:4437:17, line:4438:34>
|   |   |-TextComment 0x5555d4c41200 <line:4437:17, col:69> Text=" The policy to control the entities being printed. If"
|   |   `-TextComment 0x5555d4c41220 <line:4438:3, col:34> Text=" NULL, a default policy is used."
|   |-ParagraphComment 0x5555d4c412a0 <line:4440:3>
|   | `-TextComment 0x5555d4c41270 <col:3> Text=" "
|   `-BlockCommandComment 0x5555d4c412c0 <col:4, line:4441:17> Name="returns"
|     `-ParagraphComment 0x5555d4c41340 <line:4440:12, line:4441:17>
|       |-TextComment 0x5555d4c412f0 <line:4440:12, col:66> Text=" The pretty printed declaration or the empty string for"
|       `-TextComment 0x5555d4c41310 <line:4441:3, col:17> Text=" other cursors."
|-FunctionDecl 0x5555d4bbe338 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4453:60> col:25 clang_getCursorDisplayName 'CXString (CXCursor)'
| |-ParmVarDecl 0x5555d4bbe2a8 <col:52> col:60 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4bbe3e8 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c41510 </workspace/clang-c/Index.h:4447:3, line:4451:33>
|   |-ParagraphComment 0x5555d4c41440 <line:4447:3, col:70>
|   | `-TextComment 0x5555d4c41410 <col:3, col:70> Text=" Retrieve the display name for the entity referenced by this cursor."
|   `-ParagraphComment 0x5555d4c414e0 <line:4449:3, line:4451:33>
|     |-TextComment 0x5555d4c41460 <line:4449:3, col:78> Text=" The display name contains extra information that helps identify the cursor,"
|     |-TextComment 0x5555d4c41480 <line:4450:3, col:73> Text=" such as the parameters of a function or template or the arguments of a"
|     `-TextComment 0x5555d4c414a0 <line:4451:3, col:33> Text=" class template specialization."
|-FunctionDecl 0x5555d4bbe528 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4465:59> col:25 clang_getCursorReferenced 'CXCursor (CXCursor)'
| |-ParmVarDecl 0x5555d4bbe498 <col:51> col:59 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4bbe5d8 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c41710 </workspace/clang-c/Index.h:4455:4, line:4463:38>
|   |-ParagraphComment 0x5555d4c415d0 <line:4455:4, line:4456:29>
|   | |-TextComment 0x5555d4c41580 <line:4455:4, col:72> Text=" For a cursor that is a reference, retrieve a cursor representing the"
|   | `-TextComment 0x5555d4c415a0 <line:4456:3, col:29> Text=" entity that it references."
|   `-ParagraphComment 0x5555d4c416e0 <line:4458:3, line:4463:38>
|     |-TextComment 0x5555d4c415f0 <line:4458:3, col:72> Text=" Reference cursors refer to other entities in the AST. For example, an"
|     |-TextComment 0x5555d4c41610 <line:4459:3, col:74> Text=" Objective-C superclass reference cursor refers to an Objective-C class."
|     |-TextComment 0x5555d4c41630 <line:4460:3, col:71> Text=" This function produces the cursor for the Objective-C class from the"
|     |-TextComment 0x5555d4c41650 <line:4461:3, col:79> Text=" cursor for the superclass reference. If the input cursor is a declaration or"
|     |-TextComment 0x5555d4c41670 <line:4462:3, col:67> Text=" definition, it returns that declaration or definition unchanged."
|     `-TextComment 0x5555d4c41690 <line:4463:3, col:38> Text=" Otherwise, returns the NULL cursor."
|-FunctionDecl 0x5555d4bbe718 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4495:59> col:25 clang_getCursorDefinition 'CXCursor (CXCursor)'
| |-ParmVarDecl 0x5555d4bbe688 <col:51> col:59 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4bbe7c8 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c41c10 </workspace/clang-c/Index.h:4468:3, line:4493:44>
|   |-ParagraphComment 0x5555d4c41800 <line:4468:3, line:4470:16>
|   | |-TextComment 0x5555d4c41780 <line:4468:3, col:63> Text="  For a cursor that is either a reference to or a declaration"
|   | |-TextComment 0x5555d4c417a0 <line:4469:3, col:70> Text="  of some entity, retrieve a cursor that describes the definition of"
|   | `-TextComment 0x5555d4c417c0 <line:4470:3, col:16> Text="  that entity."
|   |-ParagraphComment 0x5555d4c418a0 <line:4472:3, line:4474:35>
|   | |-TextComment 0x5555d4c41820 <line:4472:3, col:69> Text="  Some entities can be declared multiple times within a translation"
|   | |-TextComment 0x5555d4c41840 <line:4473:3, col:58> Text="  unit, but only one of those declarations can also be a"
|   | `-TextComment 0x5555d4c41860 <line:4474:3, col:35> Text="  definition. For example, given:"
|   |-ParagraphComment 0x5555d4c418f0 <line:4476:3, col:4>
|   | `-TextComment 0x5555d4c418c0 <col:3, col:4> Text="  "
|   |-VerbatimBlockComment 0x5555d4c41910 <col:5, col:10> Name="code" CloseName="endcode"
|   | |-VerbatimBlockLineComment 0x5555d4c41960 <line:4477:3, col:21> Text="  int f(int, int);"
|   | |-VerbatimBlockLineComment 0x5555d4c41980 <line:4478:3, col:44> Text="  int g(int x, int y) { return f(x, y); }"
|   | |-VerbatimBlockLineComment 0x5555d4c419a0 <line:4479:3, col:42> Text="  int f(int a, int b) { return a + b; }"
|   | `-VerbatimBlockLineComment 0x5555d4c419c0 <line:4480:3, col:21> Text="  int f(int, int);"
|   |-ParagraphComment 0x5555d4c41b20 <line:4483:3, line:4489:17>
|   | |-TextComment 0x5555d4c41a00 <line:4483:3, col:66> Text="  there are three declarations of the function "f", but only the"
|   | |-TextComment 0x5555d4c41a20 <line:4484:3, col:63> Text="  second one is a definition. The clang_getCursorDefinition()"
|   | |-TextComment 0x5555d4c41a40 <line:4485:3, col:66> Text="  function will take any cursor pointing to a declaration of "f""
|   | |-TextComment 0x5555d4c41a60 <line:4486:3, col:69> Text="  (the first or fourth lines of the example) or a cursor referenced"
|   | |-TextComment 0x5555d4c41a80 <line:4487:3, col:64> Text="  that uses "f" (the call to "f' inside "g") and will return a"
|   | |-TextComment 0x5555d4c41aa0 <line:4488:3, col:65> Text="  declaration cursor pointing to the definition (the second "f""
|   | `-TextComment 0x5555d4c41ac0 <line:4489:3, col:17> Text="  declaration)."
|   `-ParagraphComment 0x5555d4c41bc0 <line:4491:3, line:4493:44>
|     |-TextComment 0x5555d4c41b40 <line:4491:3, col:69> Text="  If given a cursor for which there is no corresponding definition,"
|     |-TextComment 0x5555d4c41b60 <line:4492:3, col:67> Text="  e.g., because there is no definition of that entity within this"
|     `-TextComment 0x5555d4c41b80 <line:4493:3, col:44> Text="  translation unit, returns a NULL cursor."
|-FunctionDecl 0x5555d4bbe910 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4501:58> col:25 clang_isCursorDefinition 'unsigned int (CXCursor)'
| |-ParmVarDecl 0x5555d4bbe878 <col:50> col:58 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4bbe9c0 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c41d00 </workspace/clang-c/Index.h:4498:3, line:4499:39>
|   `-ParagraphComment 0x5555d4c41cd0 <line:4498:3, line:4499:39>
|     |-TextComment 0x5555d4c41c80 <line:4498:3, col:62> Text=" Determine whether the declaration pointed to by this cursor"
|     `-TextComment 0x5555d4c41ca0 <line:4499:3, col:39> Text=" is also a definition of that entity."
|-FunctionDecl 0x5555d4bbeb08 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4527:58> col:25 clang_getCanonicalCursor 'CXCursor (CXCursor)'
| |-ParmVarDecl 0x5555d4bbea78 <col:50> col:58 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4bbebb8 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c42280 </workspace/clang-c/Index.h:4504:3, line:4525:80>
|   |-ParagraphComment 0x5555d4c41da0 <line:4504:3, col:67>
|   | `-TextComment 0x5555d4c41d70 <col:3, col:67> Text=" Retrieve the canonical cursor corresponding to the given cursor."
|   |-ParagraphComment 0x5555d4c41e60 <line:4506:3, line:4508:67>
|   | |-TextComment 0x5555d4c41dc0 <line:4506:3, col:79> Text=" In the C family of languages, many kinds of entities can be declared several"
|   | |-TextComment 0x5555d4c41e00 <line:4507:3, col:76> Text=" times within a single translation unit. For example, a structure type can"
|   | `-TextComment 0x5555d4c41e20 <line:4508:3, col:67> Text=" be forward-declared (possibly multiple times) and later defined:"
|   |-ParagraphComment 0x5555d4c41eb0 <line:4510:3>
|   | `-TextComment 0x5555d4c41e80 <col:3> Text=" "
|   |-VerbatimBlockComment 0x5555d4c41ed0 <col:4, col:9> Name="code" CloseName="endcode"
|   | |-VerbatimBlockLineComment 0x5555d4c41f20 <line:4511:3, col:13> Text=" struct X;"
|   | |-VerbatimBlockLineComment 0x5555d4c41f40 <line:4512:3, col:13> Text=" struct X;"
|   | |-VerbatimBlockLineComment 0x5555d4c41f60 <line:4513:3, col:14> Text=" struct X {"
|   | |-VerbatimBlockLineComment 0x5555d4c41f80 <line:4514:3, col:17> Text="   int member;"
|   | `-VerbatimBlockLineComment 0x5555d4c41fa0 <line:4515:3, col:6> Text=" };"
|   |-ParagraphComment 0x5555d4c42150 <line:4518:3, line:4523:37>
|   | |-TextComment 0x5555d4c41ff0 <line:4518:3, col:42> Text=" The declarations and the definition of "
|   | |-InlineCommandComment 0x5555d4c42030 <col:43, col:44> Name="c" RenderMonospaced Arg[0]="X"
|   | |-TextComment 0x5555d4c42050 <col:47, col:71> Text=" are represented by three"
|   | |-TextComment 0x5555d4c42070 <line:4519:3, col:74> Text=" different cursors, all of which are declarations of the same underlying"
|   | |-TextComment 0x5555d4c42090 <line:4520:3, col:74> Text=" entity. One of these cursor is considered the "canonical" cursor, which"
|   | |-TextComment 0x5555d4c420b0 <line:4521:3, col:71> Text=" is effectively the representative for the underlying entity. One can"
|   | |-TextComment 0x5555d4c420d0 <line:4522:3, col:77> Text=" determine if two cursors are declarations of the same underlying entity by"
|   | `-TextComment 0x5555d4c420f0 <line:4523:3, col:37> Text=" comparing their canonical cursors."
|   |-ParagraphComment 0x5555d4c421a0 <line:4525:3>
|   | `-TextComment 0x5555d4c42170 <col:3> Text=" "
|   `-BlockCommandComment 0x5555d4c421c0 <col:4, col:80> Name="returns"
|     `-ParagraphComment 0x5555d4c42220 <col:12, col:80>
|       `-TextComment 0x5555d4c421f0 <col:12, col:80> Text=" The canonical cursor for the entity referred to by the given cursor."
|-FunctionDecl 0x5555d4bbed30 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4540:62> col:20 clang_Cursor_getObjCSelectorIndex 'int (CXCursor)'
| |-ParmVarDecl 0x5555d4bbec98 <col:54> col:62 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4bbede0 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c42510 </workspace/clang-c/Index.h:4530:3, line:4538:13>
|   |-ParagraphComment 0x5555d4c42340 <line:4530:3, line:4531:65>
|   | |-TextComment 0x5555d4c422f0 <line:4530:3, col:66> Text=" If the cursor points to a selector identifier in an Objective-C"
|   | `-TextComment 0x5555d4c42310 <line:4531:3, col:65> Text=" method or message expression, this returns the selector index."
|   |-ParagraphComment 0x5555d4c423b0 <line:4533:3, line:4534:61>
|   | |-TextComment 0x5555d4c42360 <line:4533:3, col:70> Text=" After getting a cursor with #clang_getCursor, this can be called to"
|   | `-TextComment 0x5555d4c42380 <line:4534:3, col:61> Text=" determine if the location points to a selector identifier."
|   |-ParagraphComment 0x5555d4c42400 <line:4536:3>
|   | `-TextComment 0x5555d4c423d0 <col:3> Text=" "
|   `-BlockCommandComment 0x5555d4c42420 <col:4, line:4538:13> Name="returns"
|     `-ParagraphComment 0x5555d4c424d0 <line:4536:12, line:4538:13>
|       |-TextComment 0x5555d4c42450 <line:4536:12, col:80> Text=" The selector index if the cursor is an Objective-C method or message"
|       |-TextComment 0x5555d4c42470 <line:4537:3, col:72> Text=" expression and the cursor is pointing to a selector identifier, or -1"
|       `-TextComment 0x5555d4c42490 <line:4538:3, col:13> Text=" otherwise."
|-FunctionDecl 0x5555d4bbef30 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4553:57> col:20 clang_Cursor_isDynamicCall 'int (CXCursor)'
| |-ParmVarDecl 0x5555d4bbee98 <col:47, col:56> col:56 C 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4bbefe0 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c42720 </workspace/clang-c/Index.h:4543:3, line:4551:39>
|   |-ParagraphComment 0x5555d4c425d0 <line:4543:3, line:4544:73>
|   | |-TextComment 0x5555d4c42580 <line:4543:3, col:65> Text=" Given a cursor pointing to a C++ method call or an Objective-C"
|   | `-TextComment 0x5555d4c425a0 <line:4544:3, col:73> Text=" message, returns non-zero if the method/message is "dynamic", meaning:"
|   |-ParagraphComment 0x5555d4c42670 <line:4546:3, line:4548:23>
|   | |-TextComment 0x5555d4c425f0 <line:4546:3, col:41> Text=" For a C++ method: the call is virtual."
|   | |-TextComment 0x5555d4c42610 <line:4547:3, col:78> Text=" For an Objective-C message: the receiver is an object instance, not 'super'"
|   | `-TextComment 0x5555d4c42630 <line:4548:3, col:23> Text=" or a specific class."
|   `-ParagraphComment 0x5555d4c426e0 <line:4550:3, line:4551:39>
|     |-TextComment 0x5555d4c42690 <line:4550:3, col:70> Text=" If the method/message is "static" or the cursor does not point to a"
|     `-TextComment 0x5555d4c426b0 <line:4551:3, col:39> Text=" method/message, it will return zero."
|-FunctionDecl 0x5555d4bbf128 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4559:62> col:23 clang_Cursor_getReceiverType 'CXType (CXCursor)'
| |-ParmVarDecl 0x5555d4bbf098 <col:52, col:61> col:61 C 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4bbf1d8 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c42810 </workspace/clang-c/Index.h:4556:3, line:4557:69>
|   `-ParagraphComment 0x5555d4c427e0 <line:4556:3, line:4557:69>
|     |-TextComment 0x5555d4c42790 <line:4556:3, col:64> Text=" Given a cursor pointing to an Objective-C message or property"
|     `-TextComment 0x5555d4c427b0 <line:4557:3, col:69> Text=" reference, or C++ method call, returns the CXType of the receiver."
|-EnumDecl 0x5555d4bbf258 <line:4564:9, line:4579:1> line:4564:9
| |-FullComment 0x5555d4c42970 <line:4562:3, line:4563:1>
| | `-ParagraphComment 0x5555d4c42940 <line:4562:3, line:4563:1>
| |   |-TextComment 0x5555d4c42880 <line:4562:3, col:29> Text=" Property attributes for a "
| |   |-InlineCommandComment 0x5555d4c428e0 <col:30, col:31> Name="c" RenderMonospaced Arg[0]="CXCursor_ObjCPropertyDecl."
| |   `-TextComment 0x5555d4c42900 <line:4563:1> Text=" "
| |-EnumConstantDecl 0x5555d4bbf360 <line:4565:3, col:31> col:3 CXObjCPropertyAttr_noattr 'int'
| | `-ConstantExpr 0x5555d4bbf340 <col:31> 'int'
| |   |-value: Int 0
| |   `-IntegerLiteral 0x5555d4bbf320 <col:31> 'int' 0
| |-EnumConstantDecl 0x5555d4bbf3f0 <line:4566:3, col:33> col:3 CXObjCPropertyAttr_readonly 'int'
| | `-ConstantExpr 0x5555d4bbf3d0 <col:33> 'int'
| |   |-value: Int 1
| |   `-IntegerLiteral 0x5555d4bbf3b0 <col:33> 'int' 1
| |-EnumConstantDecl 0x5555d4bbf480 <line:4567:3, col:31> col:3 CXObjCPropertyAttr_getter 'int'
| | `-ConstantExpr 0x5555d4bbf460 <col:31> 'int'
| |   |-value: Int 2
| |   `-IntegerLiteral 0x5555d4bbf440 <col:31> 'int' 2
| |-EnumConstantDecl 0x5555d4bbf510 <line:4568:3, col:31> col:3 CXObjCPropertyAttr_assign 'int'
| | `-ConstantExpr 0x5555d4bbf4f0 <col:31> 'int'
| |   |-value: Int 4
| |   `-IntegerLiteral 0x5555d4bbf4d0 <col:31> 'int' 4
| |-EnumConstantDecl 0x5555d4bbf5a0 <line:4569:3, col:34> col:3 CXObjCPropertyAttr_readwrite 'int'
| | `-ConstantExpr 0x5555d4bbf580 <col:34> 'int'
| |   |-value: Int 8
| |   `-IntegerLiteral 0x5555d4bbf560 <col:34> 'int' 8
| |-EnumConstantDecl 0x5555d4bbf630 <line:4570:3, col:31> col:3 CXObjCPropertyAttr_retain 'int'
| | `-ConstantExpr 0x5555d4bbf610 <col:31> 'int'
| |   |-value: Int 16
| |   `-IntegerLiteral 0x5555d4bbf5f0 <col:31> 'int' 16
| |-EnumConstantDecl 0x5555d4bbf6c0 <line:4571:3, col:29> col:3 CXObjCPropertyAttr_copy 'int'
| | `-ConstantExpr 0x5555d4bbf6a0 <col:29> 'int'
| |   |-value: Int 32
| |   `-IntegerLiteral 0x5555d4bbf680 <col:29> 'int' 32
| |-EnumConstantDecl 0x5555d4bbf750 <line:4572:3, col:34> col:3 CXObjCPropertyAttr_nonatomic 'int'
| | `-ConstantExpr 0x5555d4bbf730 <col:34> 'int'
| |   |-value: Int 64
| |   `-IntegerLiteral 0x5555d4bbf710 <col:34> 'int' 64
| |-EnumConstantDecl 0x5555d4bbf7e0 <line:4573:3, col:31> col:3 CXObjCPropertyAttr_setter 'int'
| | `-ConstantExpr 0x5555d4bbf7c0 <col:31> 'int'
| |   |-value: Int 128
| |   `-IntegerLiteral 0x5555d4bbf7a0 <col:31> 'int' 128
| |-EnumConstantDecl 0x5555d4bbf870 <line:4574:3, col:31> col:3 CXObjCPropertyAttr_atomic 'int'
| | `-ConstantExpr 0x5555d4bbf850 <col:31> 'int'
| |   |-value: Int 256
| |   `-IntegerLiteral 0x5555d4bbf830 <col:31> 'int' 256
| |-EnumConstantDecl 0x5555d4bbf900 <line:4575:3, col:29> col:3 CXObjCPropertyAttr_weak 'int'
| | `-ConstantExpr 0x5555d4bbf8e0 <col:29> 'int'
| |   |-value: Int 512
| |   `-IntegerLiteral 0x5555d4bbf8c0 <col:29> 'int' 512
| |-EnumConstantDecl 0x5555d4bbf990 <line:4576:3, col:31> col:3 CXObjCPropertyAttr_strong 'int'
| | `-ConstantExpr 0x5555d4bbf970 <col:31> 'int'
| |   |-value: Int 1024
| |   `-IntegerLiteral 0x5555d4bbf950 <col:31> 'int' 1024
| |-EnumConstantDecl 0x5555d4bbfa20 <line:4577:3, col:42> col:3 CXObjCPropertyAttr_unsafe_unretained 'int'
| | `-ConstantExpr 0x5555d4bbfa00 <col:42> 'int'
| |   |-value: Int 2048
| |   `-IntegerLiteral 0x5555d4bbf9e0 <col:42> 'int' 2048
| `-EnumConstantDecl 0x5555d4bbfab0 <line:4578:3, col:30> col:3 CXObjCPropertyAttr_class 'int'
|   `-ConstantExpr 0x5555d4bbfa90 <col:30> 'int'
|     |-value: Int 4096
|     `-IntegerLiteral 0x5555d4bbfa70 <col:30> 'int' 4096
|-TypedefDecl 0x5555d4bbfb58 <line:4564:1, line:4579:3> col:3 CXObjCPropertyAttrKind 'enum CXObjCPropertyAttrKind':'CXObjCPropertyAttrKind'
| |-ElaboratedType 0x5555d4bbfb00 'enum CXObjCPropertyAttrKind' sugar
| | `-EnumType 0x5555d4bbf300 'CXObjCPropertyAttrKind'
| |   `-Enum 0x5555d4bbf258 ''
| `-FullComment 0x5555d4c42ad0 <line:4562:3, line:4563:1>
|   `-ParagraphComment 0x5555d4c42aa0 <line:4562:3, line:4563:1>
|     |-TextComment 0x5555d4c429e0 <line:4562:3, col:29> Text=" Property attributes for a "
|     |-InlineCommandComment 0x5555d4c42a40 <col:30, col:31> Name="c" RenderMonospaced Arg[0]="CXCursor_ObjCPropertyDecl."
|     `-TextComment 0x5555d4c42a60 <line:4563:1> Text=" "
|-FunctionDecl 0x5555d4bbfdd0 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4589:69> col:1 clang_Cursor_getObjCPropertyAttributes 'unsigned int (CXCursor, unsigned int)'
| |-ParmVarDecl 0x5555d4bbfc30 <col:40, col:49> col:49 C 'CXCursor':'CXCursor'
| |-ParmVarDecl 0x5555d4bbfcb0 <col:52, col:61> col:61 reserved 'unsigned int'
| |-VisibilityAttr 0x5555d4bbfe88 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c42d50 </workspace/clang-c/Index.h:4582:3, line:4586:51>
|   |-ParagraphComment 0x5555d4c42c10 <line:4582:3, line:4584:5>
|   | |-TextComment 0x5555d4c42b40 <line:4582:3, col:68> Text=" Given a cursor that represents a property declaration, return the"
|   | |-TextComment 0x5555d4c42b60 <line:4583:3, col:59> Text=" associated property attributes. The bits are formed from"
|   | |-TextComment 0x5555d4c42b80 <line:4584:3> Text=" "
|   | `-InlineCommandComment 0x5555d4c42bd0 <col:4, col:5> Name="c" RenderMonospaced Arg[0]="CXObjCPropertyAttrKind."
|   |-ParagraphComment 0x5555d4c42c60 <line:4586:3>
|   | `-TextComment 0x5555d4c42c30 <col:3> Text=" "
|   `-ParamCommandComment 0x5555d4c42c80 <col:4, col:51> [in] implicitly Param="reserved" ParamIndex=1
|     `-ParagraphComment 0x5555d4c42d10 <col:19, col:51>
|       `-TextComment 0x5555d4c42ce0 <col:19, col:51> Text=" Reserved for future use, pass 0."
|-FunctionDecl 0x5555d4bbffc8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4595:74> col:25 clang_Cursor_getObjCPropertyGetterName 'CXString (CXCursor)'
| |-ParmVarDecl 0x5555d4bbff38 <col:64, col:73> col:73 C 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4bc0078 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c42e40 </workspace/clang-c/Index.h:4592:3, line:4593:49>
|   `-ParagraphComment 0x5555d4c42e10 <line:4592:3, line:4593:49>
|     |-TextComment 0x5555d4c42dc0 <line:4592:3, col:68> Text=" Given a cursor that represents a property declaration, return the"
|     `-TextComment 0x5555d4c42de0 <line:4593:3, col:49> Text=" name of the method that implements the getter."
|-FunctionDecl 0x5555d4bc01b8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4601:74> col:25 clang_Cursor_getObjCPropertySetterName 'CXString (CXCursor)'
| |-ParmVarDecl 0x5555d4bc0128 <col:64, col:73> col:73 C 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4bc0268 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c42f30 </workspace/clang-c/Index.h:4598:3, line:4599:57>
|   `-ParagraphComment 0x5555d4c42f00 <line:4598:3, line:4599:57>
|     |-TextComment 0x5555d4c42eb0 <line:4598:3, col:68> Text=" Given a cursor that represents a property declaration, return the"
|     `-TextComment 0x5555d4c42ed0 <line:4599:3, col:57> Text=" name of the method that implements the setter, if any."
|-EnumDecl 0x5555d4bc02e8 <line:4607:9, line:4615:1> line:4607:9
| |-FullComment 0x5555d4c43020 <line:4604:3, line:4605:35>
| | `-ParagraphComment 0x5555d4c42ff0 <line:4604:3, line:4605:35>
| |   |-TextComment 0x5555d4c42fa0 <line:4604:3, col:65> Text=" 'Qualifiers' written next to the return and parameter types in"
| |   `-TextComment 0x5555d4c42fc0 <line:4605:3, col:35> Text=" Objective-C method declarations."
| |-EnumConstantDecl 0x5555d4bc03f0 <line:4608:3, col:30> col:3 CXObjCDeclQualifier_None 'int'
| | `-ConstantExpr 0x5555d4bc03d0 <col:30> 'int'
| |   |-value: Int 0
| |   `-IntegerLiteral 0x5555d4bc03b0 <col:30> 'int' 0
| |-EnumConstantDecl 0x5555d4bc0480 <line:4609:3, col:28> col:3 CXObjCDeclQualifier_In 'int'
| | `-ConstantExpr 0x5555d4bc0460 <col:28> 'int'
| |   |-value: Int 1
| |   `-IntegerLiteral 0x5555d4bc0440 <col:28> 'int' 1
| |-EnumConstantDecl 0x5555d4bc0510 <line:4610:3, col:31> col:3 CXObjCDeclQualifier_Inout 'int'
| | `-ConstantExpr 0x5555d4bc04f0 <col:31> 'int'
| |   |-value: Int 2
| |   `-IntegerLiteral 0x5555d4bc04d0 <col:31> 'int' 2
| |-EnumConstantDecl 0x5555d4bc05a0 <line:4611:3, col:29> col:3 CXObjCDeclQualifier_Out 'int'
| | `-ConstantExpr 0x5555d4bc0580 <col:29> 'int'
| |   |-value: Int 4
| |   `-IntegerLiteral 0x5555d4bc0560 <col:29> 'int' 4
| |-EnumConstantDecl 0x5555d4bc0630 <line:4612:3, col:32> col:3 CXObjCDeclQualifier_Bycopy 'int'
| | `-ConstantExpr 0x5555d4bc0610 <col:32> 'int'
| |   |-value: Int 8
| |   `-IntegerLiteral 0x5555d4bc05f0 <col:32> 'int' 8
| |-EnumConstantDecl 0x5555d4bc06c0 <line:4613:3, col:31> col:3 CXObjCDeclQualifier_Byref 'int'
| | `-ConstantExpr 0x5555d4bc06a0 <col:31> 'int'
| |   |-value: Int 16
| |   `-IntegerLiteral 0x5555d4bc0680 <col:31> 'int' 16
| `-EnumConstantDecl 0x5555d4bc0750 <line:4614:3, col:32> col:3 CXObjCDeclQualifier_Oneway 'int'
|   `-ConstantExpr 0x5555d4bc0730 <col:32> 'int'
|     |-value: Int 32
|     `-IntegerLiteral 0x5555d4bc0710 <col:32> 'int' 32
|-TypedefDecl 0x5555d4bc07f8 <line:4607:1, line:4615:3> col:3 CXObjCDeclQualifierKind 'enum CXObjCDeclQualifierKind':'CXObjCDeclQualifierKind'
| |-ElaboratedType 0x5555d4bc07a0 'enum CXObjCDeclQualifierKind' sugar
| | `-EnumType 0x5555d4bc0390 'CXObjCDeclQualifierKind'
| |   `-Enum 0x5555d4bc02e8 ''
| `-FullComment 0x5555d4c43110 <line:4604:3, line:4605:35>
|   `-ParagraphComment 0x5555d4c430e0 <line:4604:3, line:4605:35>
|     |-TextComment 0x5555d4c43090 <line:4604:3, col:65> Text=" 'Qualifiers' written next to the return and parameter types in"
|     `-TextComment 0x5555d4c430b0 <line:4605:3, col:35> Text=" Objective-C method declarations."
|-FunctionDecl 0x5555d4bc0958 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4623:70> col:25 clang_Cursor_getObjCDeclQualifiers 'unsigned int (CXCursor)'
| |-ParmVarDecl 0x5555d4bc08c0 <col:60, col:69> col:69 C 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4bc0a08 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c43250 </workspace/clang-c/Index.h:4618:3, line:4621:27>
|   `-ParagraphComment 0x5555d4c43220 <line:4618:3, line:4621:27>
|     |-TextComment 0x5555d4c43180 <line:4618:3, col:68> Text=" Given a cursor that represents an Objective-C method or parameter"
|     |-TextComment 0x5555d4c431a0 <line:4619:3, col:75> Text=" declaration, return the associated Objective-C qualifiers for the return"
|     |-TextComment 0x5555d4c431c0 <line:4620:3, col:63> Text=" type or the parameter respectively. The bits are formed from"
|     `-TextComment 0x5555d4c431e0 <line:4621:3, col:27> Text=" CXObjCDeclQualifierKind."
|-FunctionDecl 0x5555d4bc0b50 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4630:63> col:25 clang_Cursor_isObjCOptional 'unsigned int (CXCursor)'
| |-ParmVarDecl 0x5555d4bc0ab8 <col:53, col:62> col:62 C 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4bc1c40 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c43370 </workspace/clang-c/Index.h:4626:3, line:4628:78>
|   `-ParagraphComment 0x5555d4c43340 <line:4626:3, line:4628:78>
|     |-TextComment 0x5555d4c432c0 <line:4626:3, col:67> Text=" Given a cursor that represents an Objective-C method or property"
|     |-TextComment 0x5555d4c432e0 <line:4627:3, col:80> Text=" declaration, return non-zero if the declaration was affected by "\@optional"."
|     `-TextComment 0x5555d4c43300 <line:4628:3, col:78> Text=" Returns zero if the cursor is not such a declaration or it is "\@required"."
|-FunctionDecl 0x5555d4bc1d90 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4635:59> col:25 clang_Cursor_isVariadic 'unsigned int (CXCursor)'
| |-ParmVarDecl 0x5555d4bc1cf8 <col:49, col:58> col:58 C 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4bc1e40 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c43440 </workspace/clang-c/Index.h:4633:3, col:73>
|   `-ParagraphComment 0x5555d4c43410 <col:3, col:73>
|     `-TextComment 0x5555d4c433e0 <col:3, col:73> Text=" Returns non-zero if the given cursor is a variadic function or method."
|-FunctionDecl 0x5555d4bc21c0 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4653:76> line:4650:25 clang_Cursor_isExternalSymbol 'unsigned int (CXCursor, CXString *, CXString *, unsigned int *)'
| |-ParmVarDecl 0x5555d4bc1ef8 <col:55, col:64> col:64 C 'CXCursor':'CXCursor'
| |-ParmVarDecl 0x5555d4bc1f78 <line:4651:55, col:65> col:65 language 'CXString *'
| |-ParmVarDecl 0x5555d4bc1ff8 <line:4652:55, col:65> col:65 definedIn 'CXString *'
| |-ParmVarDecl 0x5555d4bc2078 <line:4653:55, col:65> col:65 isGenerated 'unsigned int *'
| |-VisibilityAttr 0x5555d4bc2288 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c438c0 </workspace/clang-c/Index.h:4638:3, line:4648:67>
|   |-ParagraphComment 0x5555d4c43500 <line:4638:3, line:4639:36>
|   | |-TextComment 0x5555d4c434b0 <line:4638:3, col:70> Text=" Returns non-zero if the given cursor points to a symbol marked with"
|   | `-TextComment 0x5555d4c434d0 <line:4639:3, col:36> Text=" external_source_symbol attribute."
|   |-ParagraphComment 0x5555d4c43550 <line:4641:3>
|   | `-TextComment 0x5555d4c43520 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c43570 <col:4, line:4642:44> [in] implicitly Param="language" ParamIndex=1
|   | `-ParagraphComment 0x5555d4c43620 <line:4641:19, line:4642:44>
|   |   |-TextComment 0x5555d4c435d0 <line:4641:19, col:76> Text=" If non-NULL, and the attribute is present, will be set to"
|   |   `-TextComment 0x5555d4c435f0 <line:4642:3, col:44> Text=" the 'language' string from the attribute."
|   |-ParagraphComment 0x5555d4c43670 <line:4644:3>
|   | `-TextComment 0x5555d4c43640 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c43690 <col:4, line:4645:45> [in] implicitly Param="definedIn" ParamIndex=2
|   | `-ParagraphComment 0x5555d4c43740 <line:4644:20, line:4645:45>
|   |   |-TextComment 0x5555d4c436f0 <line:4644:20, col:77> Text=" If non-NULL, and the attribute is present, will be set to"
|   |   `-TextComment 0x5555d4c43710 <line:4645:3, col:45> Text=" the 'definedIn' string from the attribute."
|   |-ParagraphComment 0x5555d4c43790 <line:4647:3>
|   | `-TextComment 0x5555d4c43760 <col:3> Text=" "
|   `-ParamCommandComment 0x5555d4c437b0 <col:4, line:4648:67> [in] implicitly Param="isGenerated" ParamIndex=3
|     `-ParagraphComment 0x5555d4c43860 <line:4647:22, line:4648:67>
|       |-TextComment 0x5555d4c43810 <line:4647:22, col:79> Text=" If non-NULL, and the attribute is present, will be set to"
|       `-TextComment 0x5555d4c43830 <line:4648:3, col:67> Text=" non-zero if the 'generated_declaration' is set in the attribute."
|-FunctionDecl 0x5555d4bc23c8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4660:69> col:30 clang_Cursor_getCommentRange 'CXSourceRange (CXCursor)'
| |-ParmVarDecl 0x5555d4bc2338 <col:59, col:68> col:68 C 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4bc2478 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c439e0 </workspace/clang-c/Index.h:4656:3, line:4658:30>
|   `-ParagraphComment 0x5555d4c439b0 <line:4656:3, line:4658:30>
|     |-TextComment 0x5555d4c43930 <line:4656:3, col:70> Text=" Given a cursor that represents a declaration, return the associated"
|     |-TextComment 0x5555d4c43950 <line:4657:3, col:79> Text=" comment's source range.  The range may include multiple consecutive comments"
|     `-TextComment 0x5555d4c43970 <line:4658:3, col:30> Text=" with whitespace in between."
|-FunctionDecl 0x5555d4bc25b8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4666:66> col:25 clang_Cursor_getRawCommentText 'CXString (CXCursor)'
| |-ParmVarDecl 0x5555d4bc2528 <col:56, col:65> col:65 C 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4bc2668 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c43ad0 </workspace/clang-c/Index.h:4663:3, line:4664:43>
|   `-ParagraphComment 0x5555d4c43aa0 <line:4663:3, line:4664:43>
|     |-TextComment 0x5555d4c43a50 <line:4663:3, col:70> Text=" Given a cursor that represents a declaration, return the associated"
|     `-TextComment 0x5555d4c43a70 <line:4664:3, col:43> Text=" comment text, including comment markers."
|-FunctionDecl 0x5555d4bc27a8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4673:68> col:25 clang_Cursor_getBriefCommentText 'CXString (CXCursor)'
| |-ParmVarDecl 0x5555d4bc2718 <col:58, col:67> col:67 C 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4bc2858 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c43c60 </workspace/clang-c/Index.h:4669:3, line:4671:19>
|   |-ParagraphComment 0x5555d4c43b90 <line:4669:3, line:4670:39>
|   | |-TextComment 0x5555d4c43b40 <line:4669:3, col:62> Text=" Given a cursor that represents a documentable entity (e.g.,"
|   | `-TextComment 0x5555d4c43b60 <line:4670:3, col:39> Text=" declaration), return the associated "
|   |-VerbatimLineComment 0x5555d4c43bb0 <col:40, col:72> Text="; otherwise return the"
|   `-ParagraphComment 0x5555d4c43c20 <line:4671:3, col:19>
|     `-TextComment 0x5555d4c43bf0 <col:3, col:19> Text=" first paragraph."
|-FunctionDecl 0x5555d4bc29f8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4687:58> col:25 clang_Cursor_getMangling 'CXString (CXCursor)'
| |-ParmVarDecl 0x5555d4bc2968 <col:50> col:58 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4bc2aa8 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c43d30 </workspace/clang-c/Index.h:4685:3, col:69>
|   `-ParagraphComment 0x5555d4c43d00 <col:3, col:69>
|     `-TextComment 0x5555d4c43cd0 <col:3, col:69> Text=" Retrieve the CXString representing the mangled name of the cursor."
|-FunctionDecl 0x5555d4bc2c80 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4693:66> col:29 clang_Cursor_getCXXManglings 'CXStringSet *(CXCursor)'
| |-ParmVarDecl 0x5555d4bc2b58 <col:58> col:66 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4bc2d30 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c43e40 </workspace/clang-c/Index.h:4690:3, line:4691:43>
|   `-ParagraphComment 0x5555d4c43e10 <line:4690:3, line:4691:43>
|     |-TextComment 0x5555d4c43da0 <line:4690:3, col:69> Text=" Retrieve the CXStrings representing the mangled symbols of the C++"
|     `-TextComment 0x5555d4c43dc0 <line:4691:3, col:43> Text=" constructor or destructor at the cursor."
|-FunctionDecl 0x5555d4bc2e80 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4699:67> col:29 clang_Cursor_getObjCManglings 'CXStringSet *(CXCursor)'
| |-ParmVarDecl 0x5555d4bc2de8 <col:59> col:67 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4bc2f30 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c43f30 </workspace/clang-c/Index.h:4696:3, line:4697:51>
|   `-ParagraphComment 0x5555d4c43f00 <line:4696:3, line:4697:51>
|     |-TextComment 0x5555d4c43eb0 <line:4696:3, col:70> Text=" Retrieve the CXStrings representing the mangled symbols of the ObjC"
|     `-TextComment 0x5555d4c43ed0 <line:4697:3, col:51> Text=" class interface or implementation at the cursor."
|-TypedefDecl 0x5555d4bc3000 <line:4713:1, col:15> col:15 referenced CXModule 'void *'
| |-PointerType 0x5555d4abe5e0 'void *'
| | `-BuiltinType 0x5555d4abdec0 'void'
| `-FullComment 0x5555d4c44140 <line:4706:3, line:4710:5>
|   |-ParagraphComment 0x5555d4c43fd0 <line:4706:3>
|   | `-TextComment 0x5555d4c43fa0 <col:3> Text=" "
|   |-VerbatimLineComment 0x5555d4c43ff0 <col:4, col:48> Text=" CINDEX_MODULE Module introspection"
|   |-ParagraphComment 0x5555d4c44060 <line:4708:3, col:75>
|   | `-TextComment 0x5555d4c44030 <col:3, col:75> Text=" The functions in this group provide access to information about modules."
|   `-ParagraphComment 0x5555d4c44100 <line:4710:3, col:5>
|     |-TextComment 0x5555d4c44080 <col:3> Text=" "
|     |-TextComment 0x5555d4c440a0 <col:4> Text="@"
|     `-TextComment 0x5555d4c440c0 <col:5> Text="{"
|-FunctionDecl 0x5555d4bc31e8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4718:58> col:25 clang_Cursor_getModule 'CXModule (CXCursor)'
| |-ParmVarDecl 0x5555d4bc3120 <col:48, col:57> col:57 C 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4bc3298 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c44210 </workspace/clang-c/Index.h:4716:3, col:74>
|   `-ParagraphComment 0x5555d4c441e0 <col:3, col:74>
|     `-TextComment 0x5555d4c441b0 <col:3, col:74> Text=" Given a CXCursor_ModuleImportDecl cursor, return the associated module."
|-FunctionDecl 0x5555d4bc34d8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4724:73> col:25 clang_getModuleForFile 'CXModule (CXTranslationUnit, CXFile)'
| |-ParmVarDecl 0x5555d4bc3348 <col:48> col:65 'CXTranslationUnit':'struct CXTranslationUnitImpl *'
| |-ParmVarDecl 0x5555d4bc33c0 <col:67> col:73 'CXFile':'void *'
| |-VisibilityAttr 0x5555d4bc3590 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c44300 </workspace/clang-c/Index.h:4721:3, line:4722:10>
|   `-ParagraphComment 0x5555d4c442d0 <line:4721:3, line:4722:10>
|     |-TextComment 0x5555d4c44280 <line:4721:3, col:73> Text=" Given a CXFile header file, return the module that contains it, if one"
|     `-TextComment 0x5555d4c442a0 <line:4722:3, col:10> Text=" exists."
|-FunctionDecl 0x5555d4bc3708 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4731:62> col:23 clang_Module_getASTFile 'CXFile (CXModule)'
| |-ParmVarDecl 0x5555d4bc3648 <col:47, col:56> col:56 Module 'CXModule':'void *'
| |-VisibilityAttr 0x5555d4bc37b8 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c44560 </workspace/clang-c/Index.h:4727:3, line:4729:71>
|   |-ParagraphComment 0x5555d4c443a0 <line:4727:3>
|   | `-TextComment 0x5555d4c44370 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c443c0 <col:4, col:33> [in] implicitly Param="Module" ParamIndex=0
|   | `-ParagraphComment 0x5555d4c44450 <col:17, col:33>
|   |   `-TextComment 0x5555d4c44420 <col:17, col:33> Text=" a module object."
|   |-ParagraphComment 0x5555d4c444a0 <line:4729:3>
|   | `-TextComment 0x5555d4c44470 <col:3> Text=" "
|   `-BlockCommandComment 0x5555d4c444c0 <col:4, col:71> Name="returns"
|     `-ParagraphComment 0x5555d4c44520 <col:12, col:71>
|       `-TextComment 0x5555d4c444f0 <col:12, col:71> Text=" the module file where the provided module object came from."
|-FunctionDecl 0x5555d4bc3928 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4739:63> col:25 clang_Module_getParent 'CXModule (CXModule)'
| |-ParmVarDecl 0x5555d4bc3868 <col:48, col:57> col:57 Module 'CXModule':'void *'
| |-VisibilityAttr 0x5555d4bc39d8 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c447e0 </workspace/clang-c/Index.h:4734:3, line:4737:57>
|   |-ParagraphComment 0x5555d4c44600 <line:4734:3>
|   | `-TextComment 0x5555d4c445d0 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c44620 <col:4, col:33> [in] implicitly Param="Module" ParamIndex=0
|   | `-ParagraphComment 0x5555d4c446b0 <col:17, col:33>
|   |   `-TextComment 0x5555d4c44680 <col:17, col:33> Text=" a module object."
|   |-ParagraphComment 0x5555d4c44700 <line:4736:3>
|   | `-TextComment 0x5555d4c446d0 <col:3> Text=" "
|   `-BlockCommandComment 0x5555d4c44720 <col:4, line:4737:57> Name="returns"
|     `-ParagraphComment 0x5555d4c447a0 <line:4736:12, line:4737:57>
|       |-TextComment 0x5555d4c44750 <line:4736:12, col:80> Text=" the parent of a sub-module or NULL if the given module is top-level,"
|       `-TextComment 0x5555d4c44770 <line:4737:3, col:57> Text=" e.g. for 'std.vector' it will return the 'std' module."
|-FunctionDecl 0x5555d4bc3b48 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4747:61> col:25 clang_Module_getName 'CXString (CXModule)'
| |-ParmVarDecl 0x5555d4bc3a88 <col:46, col:55> col:55 Module 'CXModule':'void *'
| |-VisibilityAttr 0x5555d4bc3bf8 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c44a60 </workspace/clang-c/Index.h:4742:3, line:4745:24>
|   |-ParagraphComment 0x5555d4c44880 <line:4742:3>
|   | `-TextComment 0x5555d4c44850 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c448a0 <col:4, col:33> [in] implicitly Param="Module" ParamIndex=0
|   | `-ParagraphComment 0x5555d4c44930 <col:17, col:33>
|   |   `-TextComment 0x5555d4c44900 <col:17, col:33> Text=" a module object."
|   |-ParagraphComment 0x5555d4c44980 <line:4744:3>
|   | `-TextComment 0x5555d4c44950 <col:3> Text=" "
|   `-BlockCommandComment 0x5555d4c449a0 <col:4, line:4745:24> Name="returns"
|     `-ParagraphComment 0x5555d4c44a20 <line:4744:12, line:4745:24>
|       |-TextComment 0x5555d4c449d0 <line:4744:12, col:75> Text=" the name of the module, e.g. for the 'std.vector' sub-module it"
|       `-TextComment 0x5555d4c449f0 <line:4745:3, col:24> Text=" will return "vector"."
|-FunctionDecl 0x5555d4bc3d48 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4754:65> col:25 clang_Module_getFullName 'CXString (CXModule)'
| |-ParmVarDecl 0x5555d4bc3cb8 <col:50, col:59> col:59 Module 'CXModule':'void *'
| |-VisibilityAttr 0x5555d4bc3df8 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c44cc0 </workspace/clang-c/Index.h:4750:3, line:4752:59>
|   |-ParagraphComment 0x5555d4c44b00 <line:4750:3>
|   | `-TextComment 0x5555d4c44ad0 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c44b20 <col:4, col:33> [in] implicitly Param="Module" ParamIndex=0
|   | `-ParagraphComment 0x5555d4c44bb0 <col:17, col:33>
|   |   `-TextComment 0x5555d4c44b80 <col:17, col:33> Text=" a module object."
|   |-ParagraphComment 0x5555d4c44c00 <line:4752:3>
|   | `-TextComment 0x5555d4c44bd0 <col:3> Text=" "
|   `-BlockCommandComment 0x5555d4c44c20 <col:4, col:59> Name="returns"
|     `-ParagraphComment 0x5555d4c44c80 <col:12, col:59>
|       `-TextComment 0x5555d4c44c50 <col:12, col:59> Text=" the full name of the module, e.g. "std.vector"."
|-FunctionDecl 0x5555d4bc3f70 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4761:57> col:20 clang_Module_isSystem 'int (CXModule)'
| |-ParmVarDecl 0x5555d4bc3ea8 <col:42, col:51> col:51 Module 'CXModule':'void *'
| |-VisibilityAttr 0x5555d4bc4020 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c44f20 </workspace/clang-c/Index.h:4757:3, line:4759:51>
|   |-ParagraphComment 0x5555d4c44d60 <line:4757:3>
|   | `-TextComment 0x5555d4c44d30 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c44d80 <col:4, col:33> [in] implicitly Param="Module" ParamIndex=0
|   | `-ParagraphComment 0x5555d4c44e10 <col:17, col:33>
|   |   `-TextComment 0x5555d4c44de0 <col:17, col:33> Text=" a module object."
|   |-ParagraphComment 0x5555d4c44e60 <line:4759:3>
|   | `-TextComment 0x5555d4c44e30 <col:3> Text=" "
|   `-BlockCommandComment 0x5555d4c44e80 <col:4, col:51> Name="returns"
|     `-ParagraphComment 0x5555d4c44ee0 <col:12, col:51>
|       `-TextComment 0x5555d4c44eb0 <col:12, col:51> Text=" non-zero if the module is a system one."
|-FunctionDecl 0x5555d4bc4230 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4769:75> line:4768:25 clang_Module_getNumTopLevelHeaders 'unsigned int (CXTranslationUnit, CXModule)'
| |-ParmVarDecl 0x5555d4bc40d8 <col:60> col:77 'CXTranslationUnit':'struct CXTranslationUnitImpl *'
| |-ParmVarDecl 0x5555d4bc4150 <line:4769:60, col:69> col:69 Module 'CXModule':'void *'
| |-VisibilityAttr 0x5555d4bc42e8 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c45180 </workspace/clang-c/Index.h:4764:3, line:4766:72>
|   |-ParagraphComment 0x5555d4c44fc0 <line:4764:3>
|   | `-TextComment 0x5555d4c44f90 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c44fe0 <col:4, col:33> [in] implicitly Param="Module" ParamIndex=1
|   | `-ParagraphComment 0x5555d4c45070 <col:17, col:33>
|   |   `-TextComment 0x5555d4c45040 <col:17, col:33> Text=" a module object."
|   |-ParagraphComment 0x5555d4c450c0 <line:4766:3>
|   | `-TextComment 0x5555d4c45090 <col:3> Text=" "
|   `-BlockCommandComment 0x5555d4c450e0 <col:4, col:72> Name="returns"
|     `-ParagraphComment 0x5555d4c45140 <col:12, col:72>
|       `-TextComment 0x5555d4c45110 <col:12, col:72> Text=" the number of top level headers associated with this module."
|-FunctionDecl 0x5555d4bc45b8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4780:53> line:4779:8 clang_Module_getTopLevelHeader 'CXFile (CXTranslationUnit, CXModule, unsigned int)'
| |-ParmVarDecl 0x5555d4bc4398 <col:39> col:56 'CXTranslationUnit':'struct CXTranslationUnitImpl *'
| |-ParmVarDecl 0x5555d4bc4410 <col:58, col:67> col:67 Module 'CXModule':'void *'
| |-ParmVarDecl 0x5555d4bc4490 <line:4780:39, col:48> col:48 Index 'unsigned int'
| |-VisibilityAttr 0x5555d4bc4678 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c454f0 </workspace/clang-c/Index.h:4772:3, line:4776:70>
|   |-ParagraphComment 0x5555d4c45220 <line:4772:3>
|   | `-TextComment 0x5555d4c451f0 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c45240 <col:4, col:33> [in] implicitly Param="Module" ParamIndex=1
|   | `-ParagraphComment 0x5555d4c452d0 <col:17, col:33>
|   |   `-TextComment 0x5555d4c452a0 <col:17, col:33> Text=" a module object."
|   |-ParagraphComment 0x5555d4c45320 <line:4774:3>
|   | `-TextComment 0x5555d4c452f0 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c45340 <col:4, col:52> [in] implicitly Param="Index" ParamIndex=2
|   | `-ParagraphComment 0x5555d4c453d0 <col:16, col:52>
|   |   `-TextComment 0x5555d4c453a0 <col:16, col:52> Text=" top level header index (zero-based)."
|   |-ParagraphComment 0x5555d4c45420 <line:4776:3>
|   | `-TextComment 0x5555d4c453f0 <col:3> Text=" "
|   `-BlockCommandComment 0x5555d4c45440 <col:4, col:70> Name="returns"
|     `-ParagraphComment 0x5555d4c454a0 <col:12, col:70>
|       `-TextComment 0x5555d4c45470 <col:12, col:70> Text=" the specified top level header associated with the module."
|-FunctionDecl 0x5555d4bc4820 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4799:56> col:1 clang_CXXConstructor_isConvertingConstructor 'unsigned int (CXCursor)'
| |-ParmVarDecl 0x5555d4bc4788 <col:46, col:55> col:55 C 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4bc48d0 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c455c0 </workspace/clang-c/Index.h:4796:3, col:62>
|   `-ParagraphComment 0x5555d4c45590 <col:3, col:62>
|     `-TextComment 0x5555d4c45560 <col:3, col:62> Text=" Determine if a C++ constructor is a converting constructor."
|-FunctionDecl 0x5555d4bc4a20 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4804:74> col:25 clang_CXXConstructor_isCopyConstructor 'unsigned int (CXCursor)'
| |-ParmVarDecl 0x5555d4bc4988 <col:64, col:73> col:73 C 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4bc4ad0 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c45690 </workspace/clang-c/Index.h:4802:3, col:56>
|   `-ParagraphComment 0x5555d4c45660 <col:3, col:56>
|     `-TextComment 0x5555d4c45630 <col:3, col:56> Text=" Determine if a C++ constructor is a copy constructor."
|-FunctionDecl 0x5555d4bc4c70 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4809:77> col:25 clang_CXXConstructor_isDefaultConstructor 'unsigned int (CXCursor)'
| |-ParmVarDecl 0x5555d4bc4b88 <col:67, col:76> col:76 C 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4bc4d20 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c45760 </workspace/clang-c/Index.h:4807:3, col:61>
|   `-ParagraphComment 0x5555d4c45730 <col:3, col:61>
|     `-TextComment 0x5555d4c45700 <col:3, col:61> Text=" Determine if a C++ constructor is the default constructor."
|-FunctionDecl 0x5555d4bc4e70 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4814:74> col:25 clang_CXXConstructor_isMoveConstructor 'unsigned int (CXCursor)'
| |-ParmVarDecl 0x5555d4bc4dd8 <col:64, col:73> col:73 C 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4bc4f20 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c45830 </workspace/clang-c/Index.h:4812:3, col:56>
|   `-ParagraphComment 0x5555d4c45800 <col:3, col:56>
|     `-TextComment 0x5555d4c457d0 <col:3, col:56> Text=" Determine if a C++ constructor is a move constructor."
|-FunctionDecl 0x5555d4bc5070 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4819:60> col:25 clang_CXXField_isMutable 'unsigned int (CXCursor)'
| |-ParmVarDecl 0x5555d4bc4fd8 <col:50, col:59> col:59 C 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4bc5120 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c45900 </workspace/clang-c/Index.h:4817:3, col:50>
|   `-ParagraphComment 0x5555d4c458d0 <col:3, col:50>
|     `-TextComment 0x5555d4c458a0 <col:3, col:50> Text=" Determine if a C++ field is declared 'mutable'."
|-FunctionDecl 0x5555d4bc5270 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4824:63> col:25 clang_CXXMethod_isDefaulted 'unsigned int (CXCursor)'
| |-ParmVarDecl 0x5555d4bc51d8 <col:53, col:62> col:62 C 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4bc5320 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c459d0 </workspace/clang-c/Index.h:4822:3, col:53>
|   `-ParagraphComment 0x5555d4c459a0 <col:3, col:53>
|     `-TextComment 0x5555d4c45970 <col:3, col:53> Text=" Determine if a C++ method is declared '= default'."
|-FunctionDecl 0x5555d4bc5470 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4830:65> col:25 clang_CXXMethod_isPureVirtual 'unsigned int (CXCursor)'
| |-ParmVarDecl 0x5555d4bc53d8 <col:55, col:64> col:64 C 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4bc5520 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c45ac0 </workspace/clang-c/Index.h:4827:3, line:4828:16>
|   `-ParagraphComment 0x5555d4c45a90 <line:4827:3, line:4828:16>
|     |-TextComment 0x5555d4c45a40 <line:4827:3, col:68> Text=" Determine if a C++ member function or member function template is"
|     `-TextComment 0x5555d4c45a60 <line:4828:3, col:16> Text=" pure virtual."
|-FunctionDecl 0x5555d4bc5670 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4836:60> col:25 clang_CXXMethod_isStatic 'unsigned int (CXCursor)'
| |-ParmVarDecl 0x5555d4bc55d8 <col:50, col:59> col:59 C 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4bc5720 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c45bb0 </workspace/clang-c/Index.h:4833:3, line:4834:21>
|   `-ParagraphComment 0x5555d4c45b80 <line:4833:3, line:4834:21>
|     |-TextComment 0x5555d4c45b30 <line:4833:3, col:68> Text=" Determine if a C++ member function or member function template is"
|     `-TextComment 0x5555d4c45b50 <line:4834:3, col:21> Text=" declared 'static'."
|-FunctionDecl 0x5555d4bc5870 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4843:61> col:25 clang_CXXMethod_isVirtual 'unsigned int (CXCursor)'
| |-ParmVarDecl 0x5555d4bc57d8 <col:51, col:60> col:60 C 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4bc5920 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c45cd0 </workspace/clang-c/Index.h:4839:3, line:4841:27>
|   `-ParagraphComment 0x5555d4c45ca0 <line:4839:3, line:4841:27>
|     |-TextComment 0x5555d4c45c20 <line:4839:3, col:68> Text=" Determine if a C++ member function or member function template is"
|     |-TextComment 0x5555d4c45c40 <line:4840:3, col:73> Text=" explicitly declared 'virtual' or if it overrides a virtual method from"
|     `-TextComment 0x5555d4c45c60 <line:4841:3, col:27> Text=" one of the base classes."
|-FunctionDecl 0x5555d4bc5a70 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4849:62> col:25 clang_CXXRecord_isAbstract 'unsigned int (CXCursor)'
| |-ParmVarDecl 0x5555d4bc59d8 <col:52, col:61> col:61 C 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4bc5b20 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c45dc0 </workspace/clang-c/Index.h:4846:3, line:4847:38>
|   `-ParagraphComment 0x5555d4c45d90 <line:4846:3, line:4847:38>
|     |-TextComment 0x5555d4c45d40 <line:4846:3, col:72> Text=" Determine if a C++ record is abstract, i.e. whether a class or struct"
|     `-TextComment 0x5555d4c45d60 <line:4847:3, col:38> Text=" has a pure virtual member function."
|-FunctionDecl 0x5555d4bc5c80 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4854:59> col:25 clang_EnumDecl_isScoped 'unsigned int (CXCursor)'
| |-ParmVarDecl 0x5555d4bc5bd8 <col:49, col:58> col:58 C 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4bc5d30 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c45ec0 </workspace/clang-c/Index.h:4852:3, col:60>
|   `-ParagraphComment 0x5555d4c45e90 <col:3, col:60>
|     `-TextComment 0x5555d4c45e60 <col:3, col:60> Text=" Determine if an enum declaration refers to a scoped enum."
|-FunctionDecl 0x5555d4bc5e80 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4860:59> col:25 clang_CXXMethod_isConst 'unsigned int (CXCursor)'
| |-ParmVarDecl 0x5555d4bc5de8 <col:49, col:58> col:58 C 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4bc5f30 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c45fb0 </workspace/clang-c/Index.h:4857:3, line:4858:20>
|   `-ParagraphComment 0x5555d4c45f80 <line:4857:3, line:4858:20>
|     |-TextComment 0x5555d4c45f30 <line:4857:3, col:68> Text=" Determine if a C++ member function or member function template is"
|     `-TextComment 0x5555d4c45f50 <line:4858:3, col:20> Text=" declared 'const'."
|-FunctionDecl 0x5555d4bc6088 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4879:72> col:34 clang_getTemplateCursorKind 'enum CXCursorKind (CXCursor)'
| |-ParmVarDecl 0x5555d4bc5fe8 <col:62, col:71> col:71 C 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4bc6138 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c46550 </workspace/clang-c/Index.h:4863:3, line:4878:1>
|   |-ParagraphComment 0x5555d4c460a0 <line:4863:3, line:4865:16>
|   | |-TextComment 0x5555d4c46020 <line:4863:3, col:55> Text=" Given a cursor that represents a template, determine"
|   | |-TextComment 0x5555d4c46040 <line:4864:3, col:77> Text=" the cursor kind of the specializations would be generated by instantiating"
|   | `-TextComment 0x5555d4c46060 <line:4865:3, col:16> Text=" the template."
|   |-ParagraphComment 0x5555d4c46160 <line:4867:3, line:4870:46>
|   | |-TextComment 0x5555d4c460c0 <line:4867:3, col:74> Text=" This routine can be used to determine what flavor of function template,"
|   | |-TextComment 0x5555d4c460e0 <line:4868:3, col:76> Text=" class template, or class template partial specialization is stored in the"
|   | |-TextComment 0x5555d4c46100 <line:4869:3, col:74> Text=" cursor. For example, it can describe whether a class template cursor is"
|   | `-TextComment 0x5555d4c46120 <line:4870:3, col:46> Text=" declared with "struct", "class" or "union"."
|   |-ParagraphComment 0x5555d4c461b0 <line:4872:3>
|   | `-TextComment 0x5555d4c46180 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c461d0 <col:4, line:4873:15> [in] implicitly Param="C" ParamIndex=0
|   | `-ParagraphComment 0x5555d4c46280 <line:4872:12, line:4873:15>
|   |   |-TextComment 0x5555d4c46230 <line:4872:12, col:72> Text=" The cursor to query. This cursor should represent a template"
|   |   `-TextComment 0x5555d4c46250 <line:4873:3, col:15> Text=" declaration."
|   |-ParagraphComment 0x5555d4c462d0 <line:4875:3>
|   | `-TextComment 0x5555d4c462a0 <col:3> Text=" "
|   `-BlockCommandComment 0x5555d4c462f0 <col:4, line:4878:1> Name="returns"
|     `-ParagraphComment 0x5555d4c46500 <line:4875:12, line:4878:1>
|       |-TextComment 0x5555d4c46320 <line:4875:12, col:74> Text=" The cursor kind of the specializations that would be generated"
|       |-TextComment 0x5555d4c46340 <line:4876:3, col:33> Text=" by instantiating the template "
|       |-InlineCommandComment 0x5555d4c46380 <col:34, col:35> Name="p" RenderMonospaced Arg[0]="C."
|       |-TextComment 0x5555d4c463a0 <col:39, col:42> Text=" If "
|       |-InlineCommandComment 0x5555d4c463e0 <col:43, col:44> Name="p" RenderMonospaced Arg[0]="C"
|       |-TextComment 0x5555d4c46400 <col:47, col:73> Text=" is not a template, returns"
|       |-TextComment 0x5555d4c46420 <line:4877:3> Text=" "
|       |-InlineCommandComment 0x5555d4c46470 <col:4, col:5> Name="c" RenderMonospaced Arg[0]="CXCursor_NoDeclFound."
|       `-TextComment 0x5555d4c46490 <line:4878:1> Text=" "
|-FunctionDecl 0x5555d4bc6278 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4909:70> col:25 clang_getSpecializedCursorTemplate 'CXCursor (CXCursor)'
| |-ParmVarDecl 0x5555d4bc61e8 <col:60, col:69> col:69 C 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4bc6328 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c46c60 </workspace/clang-c/Index.h:4882:3, line:4907:68>
|   |-ParagraphComment 0x5555d4c46640 <line:4882:3, line:4884:49>
|   | |-TextComment 0x5555d4c465c0 <line:4882:3, col:70> Text=" Given a cursor that may represent a specialization or instantiation"
|   | |-TextComment 0x5555d4c465e0 <line:4883:3, col:74> Text=" of a template, retrieve the cursor that represents the template that it"
|   | `-TextComment 0x5555d4c46600 <line:4884:3, col:49> Text=" specializes or from which it was instantiated."
|   |-ParagraphComment 0x5555d4c468d0 <line:4886:3, line:4894:53>
|   | |-TextComment 0x5555d4c46660 <line:4886:3, col:66> Text=" This routine determines the template involved both for explicit"
|   | |-TextComment 0x5555d4c46680 <line:4887:3, col:80> Text=" specializations of templates and for implicit instantiations of the template,"
|   | |-TextComment 0x5555d4c466a0 <line:4888:3, col:75> Text=" both of which are referred to as "specializations". For a class template"
|   | |-TextComment 0x5555d4c466c0 <line:4889:3, col:25> Text=" specialization (e.g., "
|   | |-InlineCommandComment 0x5555d4c46710 <col:26, col:27> Name="c" RenderMonospaced Arg[0]="std::vector<bool>),"
|   | |-TextComment 0x5555d4c46730 <col:48, col:72> Text=" this routine will return"
|   | |-TextComment 0x5555d4c46750 <line:4890:3, col:32> Text=" either the primary template ("
|   | |-InlineCommandComment 0x5555d4c467a0 <col:33, col:34> Name="c" RenderMonospaced Arg[0]="std::vector)"
|   | |-TextComment 0x5555d4c467c0 <col:48, col:77> Text=" or, if the specialization was"
|   | |-TextComment 0x5555d4c467e0 <line:4891:3, col:80> Text=" instantiated from a class template partial specialization, the class template"
|   | |-TextComment 0x5555d4c46800 <line:4892:3, col:76> Text=" partial specialization. For a class template partial specialization and a"
|   | |-TextComment 0x5555d4c46820 <line:4893:3, col:68> Text=" function template specialization (including instantiations), this"
|   | `-TextComment 0x5555d4c46840 <line:4894:3, col:53> Text=" this routine will return the specialized template."
|   |-ParagraphComment 0x5555d4c469c0 <line:4896:3, line:4900:55>
|   | |-TextComment 0x5555d4c468f0 <line:4896:3, col:78> Text=" For members of a class template (e.g., member functions, member classes, or"
|   | |-TextComment 0x5555d4c46910 <line:4897:3, col:72> Text=" static data members), returns the specialized or instantiated member."
|   | |-TextComment 0x5555d4c46930 <line:4898:3, col:74> Text=" Although not strictly "templates" in the C++ language, members of class"
|   | |-TextComment 0x5555d4c46950 <line:4899:3, col:77> Text=" templates have the same notions of specializations and instantiations that"
|   | `-TextComment 0x5555d4c46970 <line:4900:3, col:55> Text=" templates do, so this routine treats them similarly."
|   |-ParagraphComment 0x5555d4c46a10 <line:4902:3>
|   | `-TextComment 0x5555d4c469e0 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c46a30 <col:4, line:4903:17> [in] implicitly Param="C" ParamIndex=0
|   | `-ParagraphComment 0x5555d4c46ae0 <line:4902:12, line:4903:17>
|   |   |-TextComment 0x5555d4c46a90 <line:4902:12, col:75> Text=" A cursor that may be a specialization of a template or a member"
|   |   `-TextComment 0x5555d4c46ab0 <line:4903:3, col:17> Text=" of a template."
|   |-ParagraphComment 0x5555d4c46b30 <line:4905:3>
|   | `-TextComment 0x5555d4c46b00 <col:3> Text=" "
|   `-BlockCommandComment 0x5555d4c46b50 <col:4, line:4907:68> Name="returns"
|     `-ParagraphComment 0x5555d4c46c00 <line:4905:12, line:4907:68>
|       |-TextComment 0x5555d4c46b80 <line:4905:12, col:73> Text=" If the given cursor is a specialization or instantiation of a"
|       |-TextComment 0x5555d4c46ba0 <line:4906:3, col:78> Text=" template or a member thereof, the template or member that it specializes or"
|       `-TextComment 0x5555d4c46bc0 <line:4907:3, col:68> Text=" from which it was instantiated. Otherwise, returns a NULL cursor."
|-FunctionDecl 0x5555d4bc6578 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:4930:56> line:4929:30 clang_getCursorReferenceNameRange 'CXSourceRange (CXCursor, unsigned int, unsigned int)'
| |-ParmVarDecl 0x5555d4bc63d8 <line:4930:5, col:14> col:14 C 'CXCursor':'CXCursor'
| |-ParmVarDecl 0x5555d4bc6458 <col:17, col:26> col:26 NameFlags 'unsigned int'
| |-ParmVarDecl 0x5555d4bc64d8 <col:37, col:46> col:46 PieceIndex 'unsigned int'
| |-VisibilityAttr 0x5555d4bc6638 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c47230 </workspace/clang-c/Index.h:4912:3, line:4927:78>
|   |-ParagraphComment 0x5555d4c46d20 <line:4912:3, line:4913:27>
|   | |-TextComment 0x5555d4c46cd0 <line:4912:3, col:73> Text=" Given a cursor that references something else, return the source range"
|   | `-TextComment 0x5555d4c46cf0 <line:4913:3, col:27> Text=" covering that reference."
|   |-ParagraphComment 0x5555d4c46d70 <line:4915:3>
|   | `-TextComment 0x5555d4c46d40 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c46d90 <col:4, line:4917:3> [in] implicitly Param="C" ParamIndex=0
|   | `-ParagraphComment 0x5555d4c46e70 <line:4915:12, line:4917:3>
|   |   |-TextComment 0x5555d4c46df0 <line:4915:12, col:80> Text=" A cursor pointing to a member reference, a declaration reference, or"
|   |   |-TextComment 0x5555d4c46e10 <line:4916:3, col:20> Text=" an operator call."
|   |   `-TextComment 0x5555d4c46e30 <line:4917:3> Text=" "
|   |-ParamCommandComment 0x5555d4c46e90 <col:4, line:4920:3> [in] implicitly Param="NameFlags" ParamIndex=1
|   | `-ParagraphComment 0x5555d4c46f90 <line:4917:20, line:4920:3>
|   |   |-TextComment 0x5555d4c46ef0 <line:4917:20, col:58> Text=" A bitset with three independent flags:"
|   |   |-TextComment 0x5555d4c46f10 <line:4918:3, col:63> Text=" CXNameRange_WantQualifier, CXNameRange_WantTemplateArgs, and"
|   |   |-TextComment 0x5555d4c46f30 <line:4919:3, col:31> Text=" CXNameRange_WantSinglePiece."
|   |   `-TextComment 0x5555d4c46f50 <line:4920:3> Text=" "
|   |-ParamCommandComment 0x5555d4c46fb0 <col:4, line:4924:60> [in] implicitly Param="PieceIndex" ParamIndex=2
|   | `-ParagraphComment 0x5555d4c470e0 <line:4920:21, line:4924:60>
|   |   |-TextComment 0x5555d4c47010 <line:4920:21, col:66> Text=" For contiguous names or when passing the flag"
|   |   |-TextComment 0x5555d4c47030 <line:4921:3, col:62> Text=" CXNameRange_WantSinglePiece, only one piece with index 0 is"
|   |   |-TextComment 0x5555d4c47050 <line:4922:3, col:75> Text=" available. When the CXNameRange_WantSinglePiece flag is not passed for a"
|   |   |-TextComment 0x5555d4c47070 <line:4923:3, col:74> Text=" non-contiguous names, this index can be used to retrieve the individual"
|   |   `-TextComment 0x5555d4c47090 <line:4924:3, col:60> Text=" pieces of the name. See also CXNameRange_WantSinglePiece."
|   |-ParagraphComment 0x5555d4c47130 <line:4926:3>
|   | `-TextComment 0x5555d4c47100 <col:3> Text=" "
|   `-BlockCommandComment 0x5555d4c47150 <col:4, line:4927:78> Name="returns"
|     `-ParagraphComment 0x5555d4c471d0 <line:4926:12, line:4927:78>
|       |-TextComment 0x5555d4c47180 <line:4926:12, col:80> Text=" The piece of the name pointed to by the given cursor. If there is no"
|       `-TextComment 0x5555d4c471a0 <line:4927:3, col:78> Text=" name, or if the PieceIndex is out-of-range, a null-cursor will be returned."
|-EnumDecl 0x5555d4bc6690 <line:4932:1, line:4956:1> line:4932:6 CXNameRefFlags
| |-EnumConstantDecl 0x5555d4bc67b8 <line:4937:3, col:31> col:3 CXNameRange_WantQualifier 'int'
| | |-ConstantExpr 0x5555d4bc6798 <col:31> 'int'
| | | |-value: Int 1
| | | `-IntegerLiteral 0x5555d4bc6778 <col:31> 'int' 1
| | `-FullComment 0x5555d4c47320 <line:4934:5, line:4935:11>
| |   `-ParagraphComment 0x5555d4c472f0 <line:4934:5, line:4935:11>
| |     |-TextComment 0x5555d4c472a0 <line:4934:5, col:70> Text=" Include the nested-name-specifier, e.g. Foo:: in x.Foo::y, in the"
| |     `-TextComment 0x5555d4c472c0 <line:4935:5, col:11> Text=" range."
| |-EnumConstantDecl 0x5555d4bc6878 <line:4943:3, col:34> col:3 CXNameRange_WantTemplateArgs 'int'
| | |-ConstantExpr 0x5555d4bc6858 <col:34> 'int'
| | | |-value: Int 2
| | | `-IntegerLiteral 0x5555d4bc6838 <col:34> 'int' 2
| | `-FullComment 0x5555d4c474b0 <line:4940:5, line:4941:18>
| |   `-ParagraphComment 0x5555d4c47480 <line:4940:5, line:4941:18>
| |     |-TextComment 0x5555d4c47390 <line:4940:5, col:51> Text=" Include the explicit template arguments, e.g. "
| |     |-TextComment 0x5555d4c473b0 <col:52, col:53> Text="<"
| |     |-TextComment 0x5555d4c473d0 <col:54, col:64> Text="int> in x.f"
| |     |-TextComment 0x5555d4c473f0 <col:65, col:68> Text="<int"
| |     |-TextComment 0x5555d4c47410 <col:69, col:70> Text=">,"
| |     `-TextComment 0x5555d4c47430 <line:4941:5, col:18> Text=" in the range."
| `-EnumConstantDecl 0x5555d4bc6938 <line:4955:3, col:33> col:3 CXNameRange_WantSinglePiece 'int'
|   |-ConstantExpr 0x5555d4bc6918 <col:33> 'int'
|   | |-value: Int 4
|   | `-IntegerLiteral 0x5555d4bc68f8 <col:33> 'int' 4
|   `-FullComment 0x5555d4c47720 <line:4946:5, line:4954:3>
|     |-ParagraphComment 0x5555d4c47550 <line:4946:5, col:67>
|     | `-TextComment 0x5555d4c47520 <col:5, col:67> Text=" If the name is non-contiguous, return the full spanning range."
|     |-ParagraphComment 0x5555d4c475f0 <line:4948:5, line:4950:5>
|     | |-TextComment 0x5555d4c47570 <line:4948:5, col:79> Text=" Non-contiguous names occur in Objective-C when a selector with two or more"
|     | |-TextComment 0x5555d4c47590 <line:4949:5, col:58> Text=" parameters is used, or in C++ when using an operator:"
|     | `-TextComment 0x5555d4c475b0 <line:4950:5> Text=" "
|     |-VerbatimBlockComment 0x5555d4c47610 <col:6, col:11> Name="code" CloseName="endcode"
|     | |-VerbatimBlockLineComment 0x5555d4c47660 <line:4951:5, col:63> Text=" [object doSomething:here withValue:there]; // Objective-C"
|     | `-VerbatimBlockLineComment 0x5555d4c47680 <line:4952:5, col:35> Text=" return some_vector[1]; // C++"
|     `-ParagraphComment 0x5555d4c476e0 <line:4954:1, col:3>
|       `-TextComment 0x5555d4c476b0 <col:1, col:3> Text="   "
|-EnumDecl 0x5555d4bc6a18 <line:4975:9, line:5000:1> line:4975:14 CXTokenKind
| |-FullComment 0x5555d4c477f0 <line:4973:3, col:29>
| | `-ParagraphComment 0x5555d4c477c0 <col:3, col:29>
| |   `-TextComment 0x5555d4c47790 <col:3, col:29> Text=" Describes a kind of token."
| |-EnumConstantDecl 0x5555d4bc6b08 <line:4979:3> col:3 CXToken_Punctuation 'int'
| | `-FullComment 0x5555d4c478c0 <line:4977:5, col:52>
| |   `-ParagraphComment 0x5555d4c47890 <col:5, col:52>
| |     `-TextComment 0x5555d4c47860 <col:5, col:52> Text=" A token that contains some kind of punctuation."
| |-EnumConstantDecl 0x5555d4bc6b88 <line:4984:3> col:3 CXToken_Keyword 'int'
| | `-FullComment 0x5555d4c47990 <line:4982:5, col:24>
| |   `-ParagraphComment 0x5555d4c47960 <col:5, col:24>
| |     `-TextComment 0x5555d4c47930 <col:5, col:24> Text=" A language keyword."
| |-EnumConstantDecl 0x5555d4bc6c08 <line:4989:3> col:3 CXToken_Identifier 'int'
| | `-FullComment 0x5555d4c47a60 <line:4987:5, col:43>
| |   `-ParagraphComment 0x5555d4c47a30 <col:5, col:43>
| |     `-TextComment 0x5555d4c47a00 <col:5, col:43> Text=" An identifier (that is not a keyword)."
| |-EnumConstantDecl 0x5555d4bc6cb8 <line:4994:3> col:3 CXToken_Literal 'int'
| | `-FullComment 0x5555d4c47b30 <line:4992:5, col:45>
| |   `-ParagraphComment 0x5555d4c47b00 <col:5, col:45>
| |     `-TextComment 0x5555d4c47ad0 <col:5, col:45> Text=" A numeric, string, or character literal."
| `-EnumConstantDecl 0x5555d4bc6d38 <line:4999:3> col:3 CXToken_Comment 'int'
|   `-FullComment 0x5555d4c47c00 <line:4997:5, col:15>
|     `-ParagraphComment 0x5555d4c47bd0 <col:5, col:15>
|       `-TextComment 0x5555d4c47ba0 <col:5, col:15> Text=" A comment."
|-TypedefDecl 0x5555d4bc6de8 <line:4975:1, line:5000:3> col:3 referenced CXTokenKind 'enum CXTokenKind':'enum CXTokenKind'
| |-ElaboratedType 0x5555d4bc6d90 'enum CXTokenKind' sugar
| | `-EnumType 0x5555d4bc6ac0 'enum CXTokenKind'
| |   `-Enum 0x5555d4bc6a18 'CXTokenKind'
| `-FullComment 0x5555d4c47cd0 <line:4973:3, col:29>
|   `-ParagraphComment 0x5555d4c47ca0 <col:3, col:29>
|     `-TextComment 0x5555d4c47c70 <col:3, col:29> Text=" Describes a kind of token."
|-RecordDecl 0x5555d4bc6e80 <line:5005:9, line:5008:1> line:5005:9 struct definition
| |-FullComment 0x5555d4c47da0 <line:5003:3, col:42>
| | `-ParagraphComment 0x5555d4c47d70 <col:3, col:42>
| |   `-TextComment 0x5555d4c47d40 <col:3, col:42> Text=" Describes a single preprocessing token."
| |-FieldDecl 0x5555d4bc6fc0 <line:5006:3, col:22> col:12 int_data 'unsigned int[4]'
| `-FieldDecl 0x5555d4bc7028 <line:5007:3, col:9> col:9 ptr_data 'void *'
|-TypedefDecl 0x5555d4bc70d8 <line:5005:1, line:5008:3> col:3 referenced CXToken 'struct CXToken':'CXToken'
| |-ElaboratedType 0x5555d4bc7080 'struct CXToken' sugar
| | `-RecordType 0x5555d4bc6f00 'CXToken'
| |   `-Record 0x5555d4bc6e80 ''
| `-FullComment 0x5555d4c47e90 <line:5003:3, col:42>
|   `-ParagraphComment 0x5555d4c47e60 <col:3, col:42>
|     `-TextComment 0x5555d4c47e30 <col:3, col:42> Text=" Describes a single preprocessing token."
|-FunctionDecl 0x5555d4bc73f0 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:5022:65> line:5021:25 clang_getToken 'CXToken *(CXTranslationUnit, CXSourceLocation)'
| |-ParmVarDecl 0x5555d4bc7200 <col:40, col:58> col:58 TU 'CXTranslationUnit':'struct CXTranslationUnitImpl *'
| |-ParmVarDecl 0x5555d4bc7278 <line:5022:40, col:57> col:57 Location 'CXSourceLocation':'CXSourceLocation'
| |-VisibilityAttr 0x5555d4bc74a8 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c482b0 </workspace/clang-c/Index.h:5011:3, line:5019:33>
|   |-ParagraphComment 0x5555d4c47f30 <line:5011:3, col:62>
|   | `-TextComment 0x5555d4c47f00 <col:3, col:62> Text=" Get the raw lexical token starting with the given location."
|   |-ParagraphComment 0x5555d4c47f80 <line:5013:3>
|   | `-TextComment 0x5555d4c47f50 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c47fa0 <col:4, col:64> [in] implicitly Param="TU" ParamIndex=0
|   | `-ParagraphComment 0x5555d4c48030 <col:13, col:64>
|   |   `-TextComment 0x5555d4c48000 <col:13, col:64> Text=" the translation unit whose text is being tokenized."
|   |-ParagraphComment 0x5555d4c48080 <line:5015:3>
|   | `-TextComment 0x5555d4c48050 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c480a0 <col:4, col:67> [in] implicitly Param="Location" ParamIndex=1
|   | `-ParagraphComment 0x5555d4c48130 <col:19, col:67>
|   |   `-TextComment 0x5555d4c48100 <col:19, col:67> Text=" the source location with which the token starts."
|   |-ParagraphComment 0x5555d4c48180 <line:5017:3>
|   | `-TextComment 0x5555d4c48150 <col:3> Text=" "
|   `-BlockCommandComment 0x5555d4c481a0 <col:4, line:5019:33> Name="returns"
|     `-ParagraphComment 0x5555d4c48250 <line:5017:12, line:5019:33>
|       |-TextComment 0x5555d4c481d0 <line:5017:12, col:79> Text=" The token starting with the given location or NULL if no such token"
|       |-TextComment 0x5555d4c481f0 <line:5018:3, col:80> Text=" exist. The returned pointer must be freed with clang_disposeTokens before the"
|       `-TextComment 0x5555d4c48210 <line:5019:3, col:33> Text=" translation unit is destroyed."
|-FunctionDecl 0x5555d4bc76b8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:5027:54> col:28 clang_getTokenKind 'CXTokenKind (CXToken)'
| |-ParmVarDecl 0x5555d4bc75c0 <col:47> col:54 'CXToken':'CXToken'
| |-VisibilityAttr 0x5555d4bc7768 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c48380 </workspace/clang-c/Index.h:5025:3, col:41>
|   `-ParagraphComment 0x5555d4c48350 <col:3, col:41>
|     `-TextComment 0x5555d4c48320 <col:3, col:41> Text=" Determine the kind of the given token."
|-FunctionDecl 0x5555d4bc79a8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:5035:74> col:25 clang_getTokenSpelling 'CXString (CXTranslationUnit, CXToken)'
| |-ParmVarDecl 0x5555d4bc7818 <col:48> col:65 'CXTranslationUnit':'struct CXTranslationUnitImpl *'
| |-ParmVarDecl 0x5555d4bc7890 <col:67> col:74 'CXToken':'CXToken'
| |-VisibilityAttr 0x5555d4bc7a60 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c484c0 </workspace/clang-c/Index.h:5030:3, line:5033:40>
|   |-ParagraphComment 0x5555d4c48420 <line:5030:3, col:45>
|   | `-TextComment 0x5555d4c483f0 <col:3, col:45> Text=" Determine the spelling of the given token."
|   `-ParagraphComment 0x5555d4c48490 <line:5032:3, line:5033:40>
|     |-TextComment 0x5555d4c48440 <line:5032:3, col:77> Text=" The spelling of a token is the textual representation of that token, e.g.,"
|     `-TextComment 0x5555d4c48460 <line:5033:3, col:40> Text=" the text of an identifier or keyword."
|-FunctionDecl 0x5555d4bc7d90 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:5041:63> line:5040:33 clang_getTokenLocation 'CXSourceLocation (CXTranslationUnit, CXToken)'
| |-ParmVarDecl 0x5555d4bc7b18 <col:56> col:73 'CXTranslationUnit':'struct CXTranslationUnitImpl *'
| |-ParmVarDecl 0x5555d4bc7b90 <line:5041:56> col:63 'CXToken':'CXToken'
| |-VisibilityAttr 0x5555d4bc7e48 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c48590 </workspace/clang-c/Index.h:5038:3, col:51>
|   `-ParagraphComment 0x5555d4c48560 <col:3, col:51>
|     `-TextComment 0x5555d4c48530 <col:3, col:51> Text=" Retrieve the source location of the given token."
|-FunctionDecl 0x5555d4bc8088 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:5046:77> col:30 clang_getTokenExtent 'CXSourceRange (CXTranslationUnit, CXToken)'
| |-ParmVarDecl 0x5555d4bc7ef8 <col:51> col:68 'CXTranslationUnit':'struct CXTranslationUnitImpl *'
| |-ParmVarDecl 0x5555d4bc7f70 <col:70> col:77 'CXToken':'CXToken'
| |-VisibilityAttr 0x5555d4bc8140 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c48660 </workspace/clang-c/Index.h:5044:3, col:55>
|   `-ParagraphComment 0x5555d4c48630 <col:3, col:55>
|     `-TextComment 0x5555d4c48600 <col:3, col:55> Text=" Retrieve a source range that covers the given token."
|-FunctionDecl 0x5555d4bc8518 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:5066:73> line:5065:21 clang_tokenize 'void (CXTranslationUnit, CXSourceRange, CXToken **, unsigned int *)'
| |-ParmVarDecl 0x5555d4bc81f8 <col:36, col:54> col:54 TU 'CXTranslationUnit':'struct CXTranslationUnitImpl *'
| |-ParmVarDecl 0x5555d4bc8270 <col:58, col:72> col:72 Range 'CXSourceRange':'CXSourceRange'
| |-ParmVarDecl 0x5555d4bc8350 <line:5066:36, col:46> col:46 Tokens 'CXToken **'
| |-ParmVarDecl 0x5555d4bc83d0 <col:54, col:64> col:64 NumTokens 'unsigned int *'
| |-VisibilityAttr 0x5555d4bc85e0 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c48cc0 </workspace/clang-c/Index.h:5049:3, line:5064:1>
|   |-ParagraphComment 0x5555d4c48720 <line:5049:3, line:5050:18>
|   | |-TextComment 0x5555d4c486d0 <line:5049:3, col:65> Text=" Tokenize the source code described by the given range into raw"
|   | `-TextComment 0x5555d4c486f0 <line:5050:3, col:18> Text=" lexical tokens."
|   |-ParagraphComment 0x5555d4c48770 <line:5052:3>
|   | `-TextComment 0x5555d4c48740 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c48790 <col:4, col:64> [in] implicitly Param="TU" ParamIndex=0
|   | `-ParagraphComment 0x5555d4c48820 <col:13, col:64>
|   |   `-TextComment 0x5555d4c487f0 <col:13, col:64> Text=" the translation unit whose text is being tokenized."
|   |-ParagraphComment 0x5555d4c48870 <line:5054:3>
|   | `-TextComment 0x5555d4c48840 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c48890 <col:4, line:5055:70> [in] implicitly Param="Range" ParamIndex=1
|   | `-ParagraphComment 0x5555d4c48940 <line:5054:16, line:5055:70>
|   |   |-TextComment 0x5555d4c488f0 <line:5054:16, col:78> Text=" the source range in which text should be tokenized. All of the"
|   |   `-TextComment 0x5555d4c48910 <line:5055:3, col:70> Text=" tokens produced by tokenization will fall within this source range,"
|   |-ParagraphComment 0x5555d4c48990 <line:5057:3>
|   | `-TextComment 0x5555d4c48960 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c489b0 <col:4, line:5059:77> [in] implicitly Param="Tokens" ParamIndex=2
|   | `-ParagraphComment 0x5555d4c48a90 <line:5057:17, line:5059:77>
|   |   |-TextComment 0x5555d4c48a10 <line:5057:17, col:73> Text=" this pointer will be set to point to the array of tokens"
|   |   |-TextComment 0x5555d4c48a30 <line:5058:3, col:73> Text=" that occur within the given source range. The returned pointer must be"
|   |   `-TextComment 0x5555d4c48a50 <line:5059:3, col:77> Text=" freed with clang_disposeTokens() before the translation unit is destroyed."
|   |-ParagraphComment 0x5555d4c48ae0 <line:5061:3>
|   | `-TextComment 0x5555d4c48ab0 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c48b00 <col:4, line:5062:9> [in] implicitly Param="NumTokens" ParamIndex=3
|   | `-ParagraphComment 0x5555d4c48c00 <line:5061:20, line:5062:9>
|   |   |-TextComment 0x5555d4c48b60 <line:5061:20, col:63> Text=" will be set to the number of tokens in the "
|   |   |-InlineCommandComment 0x5555d4c48ba0 <col:64, col:65> Name="c" RenderMonospaced Arg[0]="*Tokens"
|   |   `-TextComment 0x5555d4c48bc0 <line:5062:3, col:9> Text=" array."
|   `-ParagraphComment 0x5555d4c48c50 <line:5064:1>
|     `-TextComment 0x5555d4c48c20 <col:1> Text=" "
|-FunctionDecl 0x5555d4bc8958 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:5099:79> line:5098:21 clang_annotateTokens 'void (CXTranslationUnit, CXToken *, unsigned int, CXCursor *)'
| |-ParmVarDecl 0x5555d4bc8698 <col:42, col:60> col:60 TU 'CXTranslationUnit':'struct CXTranslationUnitImpl *'
| |-ParmVarDecl 0x5555d4bc8718 <col:64, col:73> col:73 Tokens 'CXToken *'
| |-ParmVarDecl 0x5555d4bc8798 <line:5099:42, col:51> col:51 NumTokens 'unsigned int'
| |-ParmVarDecl 0x5555d4bc8818 <col:62, col:72> col:72 Cursors 'CXCursor *'
| |-VisibilityAttr 0x5555d4bc8a20 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c495d0 </workspace/clang-c/Index.h:5069:3, line:5096:57>
|   |-ParagraphComment 0x5555d4c48d80 <line:5069:3, line:5070:75>
|   | |-TextComment 0x5555d4c48d30 <line:5069:3, col:71> Text=" Annotate the given set of tokens by providing cursors for each token"
|   | `-TextComment 0x5555d4c48d50 <line:5070:3, col:75> Text=" that can be mapped to a specific entity within the abstract syntax tree."
|   |-ParagraphComment 0x5555d4c48ee0 <line:5072:3, line:5077:57>
|   | |-TextComment 0x5555d4c48da0 <line:5072:3, col:58> Text=" This token-annotation routine is equivalent to invoking"
|   | |-TextComment 0x5555d4c48dc0 <line:5073:3, col:60> Text=" clang_getCursor() for the source locations of each of the"
|   | |-TextComment 0x5555d4c48de0 <line:5074:3, col:64> Text=" tokens. The cursors provided are filtered, so that only those"
|   | |-TextComment 0x5555d4c48e00 <line:5075:3, col:61> Text=" cursors that have a direct correspondence to the token are"
|   | |-TextComment 0x5555d4c48e20 <line:5076:3, col:48> Text=" accepted. For example, given a function call "
|   | |-InlineCommandComment 0x5555d4c48e60 <col:49, col:50> Name="c" RenderMonospaced Arg[0]="f(x),"
|   | `-TextComment 0x5555d4c48e80 <line:5077:3, col:57> Text=" clang_getCursor() would provide the following cursors:"
|   |-ParagraphComment 0x5555d4c48f80 <line:5079:3, line:5081:78>
|   | |-TextComment 0x5555d4c48f00 <line:5079:3, col:78> Text="   * when the cursor is over the 'f', a DeclRefExpr cursor referring to 'f'."
|   | |-TextComment 0x5555d4c48f20 <line:5080:3, col:79> Text="   * when the cursor is over the '(' or the ')', a CallExpr referring to 'f'."
|   | `-TextComment 0x5555d4c48f40 <line:5081:3, col:78> Text="   * when the cursor is over the 'x', a DeclRefExpr cursor referring to 'x'."
|   |-ParagraphComment 0x5555d4c49070 <line:5083:3, line:5087:33>
|   | |-TextComment 0x5555d4c48fa0 <line:5083:3, col:65> Text=" Only the first and last of these cursors will occur within the"
|   | |-TextComment 0x5555d4c48fc0 <line:5084:3, col:70> Text=" annotate, since the tokens "f" and "x' directly refer to a function"
|   | |-TextComment 0x5555d4c48fe0 <line:5085:3, col:69> Text=" and a variable, respectively, but the parentheses are just a small"
|   | |-TextComment 0x5555d4c49000 <line:5086:3, col:68> Text=" part of the full syntax of the function call expression, which is"
|   | `-TextComment 0x5555d4c49020 <line:5087:3, col:33> Text=" not provided as an annotation."
|   |-ParagraphComment 0x5555d4c490c0 <line:5089:3>
|   | `-TextComment 0x5555d4c49090 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c490e0 <col:4, col:61> [in] implicitly Param="TU" ParamIndex=0
|   | `-ParagraphComment 0x5555d4c49170 <col:13, col:61>
|   |   `-TextComment 0x5555d4c49140 <col:13, col:61> Text=" the translation unit that owns the given tokens."
|   |-ParagraphComment 0x5555d4c491c0 <line:5091:3>
|   | `-TextComment 0x5555d4c49190 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c491e0 <col:4, col:47> [in] implicitly Param="Tokens" ParamIndex=1
|   | `-ParagraphComment 0x5555d4c49270 <col:17, col:47>
|   |   `-TextComment 0x5555d4c49240 <col:17, col:47> Text=" the set of tokens to annotate."
|   |-ParagraphComment 0x5555d4c492c0 <line:5093:3>
|   | `-TextComment 0x5555d4c49290 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c492e0 <col:4, col:46> [in] implicitly Param="NumTokens" ParamIndex=2
|   | `-ParagraphComment 0x5555d4c493b0 <col:20, col:46>
|   |   |-TextComment 0x5555d4c49340 <col:20, col:44> Text=" the number of tokens in "
|   |   `-InlineCommandComment 0x5555d4c49380 <col:45, col:46> Name="p" RenderMonospaced Arg[0]="Tokens."
|   |-ParagraphComment 0x5555d4c49400 <line:5095:3>
|   | `-TextComment 0x5555d4c493d0 <col:3> Text=" "
|   `-ParamCommandComment 0x5555d4c49420 <col:4, line:5096:57> [in] implicitly Param="Cursors" ParamIndex=3
|     `-ParagraphComment 0x5555d4c49550 <line:5095:18, line:5096:57>
|       |-TextComment 0x5555d4c49480 <line:5095:18, col:30> Text=" an array of "
|       |-InlineCommandComment 0x5555d4c494d0 <col:31, col:32> Name="p" RenderMonospaced Arg[0]="NumTokens"
|       |-TextComment 0x5555d4c494f0 <col:43, col:74> Text=" cursors, whose contents will be"
|       `-TextComment 0x5555d4c49510 <line:5096:3, col:57> Text=" replaced with the cursors corresponding to each token."
|-FunctionDecl 0x5555d4bc9e80 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:5105:59> line:5104:21 clang_disposeTokens 'void (CXTranslationUnit, CXToken *, unsigned int)'
| |-ParmVarDecl 0x5555d4bc8ad8 <col:41, col:59> col:59 TU 'CXTranslationUnit':'struct CXTranslationUnitImpl *'
| |-ParmVarDecl 0x5555d4bc8b58 <col:63, col:72> col:72 Tokens 'CXToken *'
| |-ParmVarDecl 0x5555d4bc8bd8 <line:5105:41, col:50> col:50 NumTokens 'unsigned int'
| |-VisibilityAttr 0x5555d4bc9f40 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c496a0 </workspace/clang-c/Index.h:5102:3, col:32>
|   `-ParagraphComment 0x5555d4c49670 <col:3, col:32>
|     `-TextComment 0x5555d4c49640 <col:3, col:32> Text=" Free the given set of tokens."
|-FunctionDecl 0x5555d4bca128 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:5121:75> col:25 clang_getCursorKindSpelling 'CXString (enum CXCursorKind)'
| |-ParmVarDecl 0x5555d4bca038 <col:53, col:71> col:71 Kind 'enum CXCursorKind':'enum CXCursorKind'
| |-VisibilityAttr 0x5555d4bca1d8 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c498d0 </workspace/clang-c/Index.h:5112:3, line:5117:5>
|   |-ParagraphComment 0x5555d4c49740 <line:5112:3>
|   | `-TextComment 0x5555d4c49710 <col:3> Text=" "
|   |-VerbatimLineComment 0x5555d4c49760 <col:4, col:47> Text=" CINDEX_DEBUG Debugging facilities"
|   |-ParagraphComment 0x5555d4c497f0 <line:5114:3, line:5115:18>
|   | |-TextComment 0x5555d4c497a0 <line:5114:3, col:74> Text=" These routines are used for testing and debugging, only, and should not"
|   | `-TextComment 0x5555d4c497c0 <line:5115:3, col:18> Text=" be relied upon."
|   `-ParagraphComment 0x5555d4c49890 <line:5117:3, col:5>
|     |-TextComment 0x5555d4c49810 <col:3> Text=" "
|     |-TextComment 0x5555d4c49830 <col:4> Text="@"
|     `-TextComment 0x5555d4c49850 <col:5> Text="{"
|-FunctionDecl 0x5555d4bca718 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:5124:66> line:5122:21 clang_getDefinitionSpellingAndExtent 'void (CXCursor, const char **, const char **, unsigned int *, unsigned int *, unsigned int *, unsigned int *)'
| |-ParmVarDecl 0x5555d4bca260 <line:5123:5> col:13 'CXCursor':'CXCursor'
| |-ParmVarDecl 0x5555d4bca310 <col:15, col:28> col:28 startBuf 'const char **'
| |-ParmVarDecl 0x5555d4bca390 <col:38, col:51> col:51 endBuf 'const char **'
| |-ParmVarDecl 0x5555d4bca410 <col:59, col:69> col:69 startLine 'unsigned int *'
| |-ParmVarDecl 0x5555d4bca490 <line:5124:5, col:15> col:15 startColumn 'unsigned int *'
| |-ParmVarDecl 0x5555d4bca510 <col:28, col:38> col:38 endLine 'unsigned int *'
| |-ParmVarDecl 0x5555d4bca590 <col:47, col:57> col:57 endColumn 'unsigned int *'
| `-VisibilityAttr 0x5555d4bca7f8 </workspace/clang-c/Platform.h:34:41, col:61> Default
|-FunctionDecl 0x5555d4bca908 <col:26, /workspace/clang-c/Index.h:5125:49> col:21 clang_enableStackTraces 'void (void)'
| `-VisibilityAttr 0x5555d4bca9b0 </workspace/clang-c/Platform.h:34:41, col:61> Default
|-FunctionDecl 0x5555d4bcad98 <col:26, /workspace/clang-c/Index.h:5127:62> line:5126:21 clang_executeOnThread 'void (void (*)(void *), void *, unsigned int)'
| |-ParmVarDecl 0x5555d4bcab70 <col:43, col:60> col:50 fn 'void (*)(void *)'
| |-ParmVarDecl 0x5555d4bcabf0 <col:63, col:69> col:69 user_data 'void *'
| |-ParmVarDecl 0x5555d4bcac70 <line:5127:43, col:52> col:52 stack_size 'unsigned int'
| `-VisibilityAttr 0x5555d4bcae58 </workspace/clang-c/Platform.h:34:41, col:61> Default
|-TypedefDecl 0x5555d4bcb200 </workspace/clang-c/Index.h:5158:1, col:15> col:15 referenced CXCompletionString 'void *'
| |-PointerType 0x5555d4abe5e0 'void *'
| | `-BuiltinType 0x5555d4abdec0 'void'
| `-FullComment 0x5555d4c49bb0 <line:5146:3, line:5156:48>
|   |-ParagraphComment 0x5555d4c49970 <line:5146:3, col:61>
|   | `-TextComment 0x5555d4c49940 <col:3, col:61> Text=" A semantic string that describes a code-completion result."
|   `-ParagraphComment 0x5555d4c49b80 <line:5148:3, line:5156:48>
|     |-TextComment 0x5555d4c49990 <line:5148:3, col:71> Text=" A semantic string that describes the formatting of a code-completion"
|     |-TextComment 0x5555d4c499b0 <line:5149:3, col:73> Text=" result as a single "template" of text that should be inserted into the"
|     |-TextComment 0x5555d4c499d0 <line:5150:3, col:70> Text=" source buffer when a particular code-completion result is selected."
|     |-TextComment 0x5555d4c499f0 <line:5151:3, col:76> Text=" Each semantic string is made up of some number of "chunks", each of which"
|     |-TextComment 0x5555d4c49a10 <line:5152:3, col:77> Text=" contains some text along with a description of what that text means, e.g.,"
|     |-TextComment 0x5555d4c49a30 <line:5153:3, col:77> Text=" the name of the entity being referenced, whether the text chunk is part of"
|     |-TextComment 0x5555d4c49a50 <line:5154:3, col:78> Text=" the template, or whether it is a "placeholder" that the user should replace"
|     |-TextComment 0x5555d4c49a70 <line:5155:3, col:44> Text=" with actual code,of a specific kind. See "
|     |-InlineCommandComment 0x5555d4c49ac0 <col:45, col:46> Name="c" RenderMonospaced Arg[0]="CXCompletionChunkKind"
|     |-TextComment 0x5555d4c49ae0 <col:69, col:74> Text=" for a"
|     `-TextComment 0x5555d4c49b00 <line:5156:3, col:48> Text=" description of the different kinds of chunks."
|-RecordDecl 0x5555d4bcb288 <line:5163:9, line:5181:1> line:5163:9 struct definition
| |-FullComment 0x5555d4c49c80 <line:5161:3, col:38>
| | `-ParagraphComment 0x5555d4c49c50 <col:3, col:38>
| |   `-TextComment 0x5555d4c49c20 <col:3, col:38> Text=" A single result of code completion."
| |-FieldDecl 0x5555d4bcb378 <line:5174:3, col:21> col:21 CursorKind 'enum CXCursorKind':'enum CXCursorKind'
| | `-FullComment 0x5555d4c49f00 <line:5165:5, line:5172:67>
| |   |-ParagraphComment 0x5555d4c49d20 <line:5165:5, col:55>
| |   | `-TextComment 0x5555d4c49cf0 <col:5, col:55> Text=" The kind of entity that this completion refers to."
| |   |-ParagraphComment 0x5555d4c49dc0 <line:5167:5, line:5169:18>
| |   | |-TextComment 0x5555d4c49d40 <line:5167:5, col:75> Text=" The cursor kind will be a macro, keyword, or a declaration (one of the"
| |   | |-TextComment 0x5555d4c49d60 <line:5168:5, col:70> Text=" *Decl cursor kinds), describing the entity that the completion is"
| |   | `-TextComment 0x5555d4c49d80 <line:5169:5, col:18> Text=" referring to."
| |   |-ParagraphComment 0x5555d4c49e10 <line:5171:5>
| |   | `-TextComment 0x5555d4c49de0 <col:5> Text=" "
| |   `-BlockCommandComment 0x5555d4c49e40 <col:6, line:5172:67> Name="todo"
| |     `-ParagraphComment 0x5555d4c49ec0 <line:5171:11, line:5172:67>
| |       |-TextComment 0x5555d4c49e70 <line:5171:11, col:74> Text=" In the future, we would like to provide a full cursor, to allow"
| |       `-TextComment 0x5555d4c49e90 <line:5172:5, col:67> Text=" the client to extract additional information from declaration."
| `-FieldDecl 0x5555d4bcb470 <line:5180:3, col:22> col:22 CompletionString 'CXCompletionString':'void *'
|   `-FullComment 0x5555d4c49ff0 <line:5177:5, line:5178:52>
|     `-ParagraphComment 0x5555d4c49fc0 <line:5177:5, line:5178:52>
|       |-TextComment 0x5555d4c49f70 <line:5177:5, col:65> Text=" The code-completion string that describes how to insert this"
|       `-TextComment 0x5555d4c49f90 <line:5178:5, col:52> Text=" code-completion result into the editing buffer."
|-TypedefDecl 0x5555d4bcb518 <line:5163:1, line:5181:3> col:3 referenced CXCompletionResult 'struct CXCompletionResult':'CXCompletionResult'
| |-ElaboratedType 0x5555d4bcb4c0 'struct CXCompletionResult' sugar
| | `-RecordType 0x5555d4bcb310 'CXCompletionResult'
| |   `-Record 0x5555d4bcb288 ''
| `-FullComment 0x5555d4c4a0c0 <line:5161:3, col:38>
|   `-ParagraphComment 0x5555d4c4a090 <col:3, col:38>
|     `-TextComment 0x5555d4c4a060 <col:3, col:38> Text=" A single result of code completion."
|-EnumDecl 0x5555d4bcb5b0 <line:5190:1, line:5352:1> line:5190:6 CXCompletionChunkKind
| |-FullComment 0x5555d4c4a2b0 <line:5184:3, line:5188:71>
| | |-ParagraphComment 0x5555d4c4a160 <line:5184:3, col:68>
| | | `-TextComment 0x5555d4c4a130 <col:3, col:68> Text=" Describes a single piece of text within a code-completion string."
| | `-ParagraphComment 0x5555d4c4a280 <line:5186:3, line:5188:71>
| |   |-TextComment 0x5555d4c4a180 <line:5186:3, col:49> Text=" Each "chunk" within a code-completion string ("
| |   |-InlineCommandComment 0x5555d4c4a1d0 <col:50, col:51> Name="c" RenderMonospaced Arg[0]="CXCompletionString)"
| |   |-TextComment 0x5555d4c4a1f0 <col:72, col:74> Text=" is"
| |   |-TextComment 0x5555d4c4a210 <line:5187:3, col:77> Text=" either a piece of text with a specific "kind" that describes how that text"
| |   `-TextComment 0x5555d4c4a230 <line:5188:3, col:71> Text=" should be interpreted by the client or is another completion string."
| |-EnumConstantDecl 0x5555d4bcb698 <line:5224:3> col:3 CXCompletionChunk_Optional 'int'
| | `-FullComment 0x5555d4c4a910 <line:5192:5, line:5222:55>
| |   |-ParagraphComment 0x5555d4c4a370 <line:5192:5, line:5193:59>
| |   | |-TextComment 0x5555d4c4a320 <line:5192:5, col:65> Text=" A code-completion string that describes "optional" text that"
| |   | `-TextComment 0x5555d4c4a340 <line:5193:5, col:59> Text=" could be a part of the template (but is not required)."
| |   |-ParagraphComment 0x5555d4c4a520 <line:5195:5, line:5200:76>
| |   | |-TextComment 0x5555d4c4a390 <line:5195:5, col:76> Text=" The Optional chunk is the only kind of chunk that has a code-completion"
| |   | |-TextComment 0x5555d4c4a3b0 <line:5196:5, col:59> Text=" string for its representation, which is accessible via"
| |   | |-TextComment 0x5555d4c4a3d0 <line:5197:5> Text=" "
| |   | |-InlineCommandComment 0x5555d4c4a440 <col:6, col:7> Name="c" RenderMonospaced Arg[0]="clang_getCompletionChunkCompletionString()."
| |   | |-TextComment 0x5555d4c4a460 <col:52, col:78> Text=" The code-completion string"
| |   | |-TextComment 0x5555d4c4a480 <line:5198:5, col:78> Text=" describes an additional part of the template that is completely optional."
| |   | |-TextComment 0x5555d4c4a4a0 <line:5199:5, col:78> Text=" For example, optional chunks can be used to describe the placeholders for"
| |   | `-TextComment 0x5555d4c4a4c0 <line:5200:5, col:76> Text=" arguments that match up with defaulted function parameters, e.g. given:"
| |   |-ParagraphComment 0x5555d4c4a570 <line:5202:5>
| |   | `-TextComment 0x5555d4c4a540 <col:5> Text=" "
| |   |-VerbatimBlockComment 0x5555d4c4a590 <col:6, col:11> Name="code" CloseName="endcode"
| |   | `-VerbatimBlockLineComment 0x5555d4c4a5e0 <line:5203:5, col:56> Text=" void f(int x, float y = 3.14, double z = 2.71828);"
| |   |-ParagraphComment 0x5555d4c4a7d0 <line:5206:5, line:5216:35>
| |   | |-TextComment 0x5555d4c4a610 <line:5206:5, col:64> Text=" The code-completion string for this function would contain:"
| |   | |-TextComment 0x5555d4c4a630 <line:5207:5, col:35> Text="   - a TypedText chunk for "f"."
| |   | |-TextComment 0x5555d4c4a650 <line:5208:5, col:35> Text="   - a LeftParen chunk for "("."
| |   | |-TextComment 0x5555d4c4a670 <line:5209:5, col:40> Text="   - a Placeholder chunk for "int x""
| |   | |-TextComment 0x5555d4c4a690 <line:5210:5, col:78> Text="   - an Optional chunk containing the remaining defaulted arguments, e.g.,"
| |   | |-TextComment 0x5555d4c4a6b0 <line:5211:5, col:34> Text="       - a Comma chunk for ",""
| |   | |-TextComment 0x5555d4c4a6d0 <line:5212:5, col:46> Text="       - a Placeholder chunk for "float y""
| |   | |-TextComment 0x5555d4c4a6f0 <line:5213:5, col:70> Text="       - an Optional chunk containing the last defaulted argument:"
| |   | |-TextComment 0x5555d4c4a710 <line:5214:5, col:38> Text="           - a Comma chunk for ",""
| |   | |-TextComment 0x5555d4c4a730 <line:5215:5, col:51> Text="           - a Placeholder chunk for "double z""
| |   | `-TextComment 0x5555d4c4a750 <line:5216:5, col:35> Text="   - a RightParen chunk for ")""
| |   `-ParagraphComment 0x5555d4c4a8c0 <line:5218:5, line:5222:55>
| |     |-TextComment 0x5555d4c4a7f0 <line:5218:5, col:78> Text=" There are many ways to handle Optional chunks. Two simple approaches are:"
| |     |-TextComment 0x5555d4c4a810 <line:5219:5, col:78> Text="   - Completely ignore optional chunks, in which case the template for the"
| |     |-TextComment 0x5555d4c4a830 <line:5220:5, col:71> Text="     function "f" would only include the first parameter ("int x")."
| |     |-TextComment 0x5555d4c4a850 <line:5221:5, col:77> Text="   - Fully expand all optional chunks, in which case the template for the"
| |     `-TextComment 0x5555d4c4a870 <line:5222:5, col:55> Text="     function "f" would have all of the parameters."
| |-EnumConstantDecl 0x5555d4bcb718 <line:5235:3> col:3 CXCompletionChunk_TypedText 'int'
| | `-FullComment 0x5555d4c4aaf0 <line:5226:5, line:5233:11>
| |   |-ParagraphComment 0x5555d4c4a9d0 <line:5226:5, line:5227:28>
| |   | |-TextComment 0x5555d4c4a980 <line:5226:5, col:59> Text=" Text that a user would be expected to type to get this"
| |   | `-TextComment 0x5555d4c4a9a0 <line:5227:5, col:28> Text=" code-completion result."
| |   `-ParagraphComment 0x5555d4c4aac0 <line:5229:5, line:5233:11>
| |     |-TextComment 0x5555d4c4a9f0 <line:5229:5, col:77> Text=" There will be exactly one "typed text" chunk in a semantic string, which"
| |     |-TextComment 0x5555d4c4aa10 <line:5230:5, col:70> Text=" will typically provide the spelling of a keyword or the name of a"
| |     |-TextComment 0x5555d4c4aa30 <line:5231:5, col:74> Text=" declaration that could be used at the current code point. Clients are"
| |     |-TextComment 0x5555d4c4aa50 <line:5232:5, col:77> Text=" expected to filter the code-completion results based on the text in this"
| |     `-TextComment 0x5555d4c4aa70 <line:5233:5, col:11> Text=" chunk."
| |-EnumConstantDecl 0x5555d4bcb798 <line:5243:3> col:3 CXCompletionChunk_Text 'int'
| | `-FullComment 0x5555d4c4ac60 <line:5237:5, line:5241:17>
| |   |-ParagraphComment 0x5555d4c4ab90 <line:5237:5, col:70>
| |   | `-TextComment 0x5555d4c4ab60 <col:5, col:70> Text=" Text that should be inserted as part of a code-completion result."
| |   `-ParagraphComment 0x5555d4c4ac30 <line:5239:5, line:5241:17>
| |     |-TextComment 0x5555d4c4abb0 <line:5239:5, col:70> Text=" A "text" chunk represents text that is part of the template to be"
| |     |-TextComment 0x5555d4c4abd0 <line:5240:5, col:74> Text=" inserted into user code should this particular code-completion result"
| |     `-TextComment 0x5555d4c4abf0 <line:5241:5, col:17> Text=" be selected."
| |-EnumConstantDecl 0x5555d4bcb818 <line:5254:3> col:3 CXCompletionChunk_Placeholder 'int'
| | `-FullComment 0x5555d4c4ae40 <line:5245:5, line:5252:54>
| |   |-ParagraphComment 0x5555d4c4ad00 <line:5245:5, col:58>
| |   | `-TextComment 0x5555d4c4acd0 <col:5, col:58> Text=" Placeholder text that should be replaced by the user."
| |   `-ParagraphComment 0x5555d4c4ae10 <line:5247:5, line:5252:54>
| |     |-TextComment 0x5555d4c4ad20 <line:5247:5, col:74> Text=" A "placeholder" chunk marks a place where the user should insert text"
| |     |-TextComment 0x5555d4c4ad40 <line:5248:5, col:76> Text=" into the code-completion template. For example, placeholders might mark"
| |     |-TextComment 0x5555d4c4ad60 <line:5249:5, col:77> Text=" the function parameters for a function declaration, to indicate that the"
| |     |-TextComment 0x5555d4c4ad80 <line:5250:5, col:75> Text=" user should provide arguments for each of those parameters. The actual"
| |     |-TextComment 0x5555d4c4ada0 <line:5251:5, col:73> Text=" text in a placeholder is a suggestion for the text to display before"
| |     `-TextComment 0x5555d4c4adc0 <line:5252:5, col:54> Text=" the user replaces the placeholder with real code."
| |-EnumConstantDecl 0x5555d4bcb898 <line:5264:3> col:3 CXCompletionChunk_Informative 'int'
| | `-FullComment 0x5555d4c4aff0 <line:5256:5, line:5262:24>
| |   |-ParagraphComment 0x5555d4c4af00 <line:5256:5, line:5257:26>
| |   | |-TextComment 0x5555d4c4aeb0 <line:5256:5, col:68> Text=" Informative text that should be displayed but never inserted as"
| |   | `-TextComment 0x5555d4c4aed0 <line:5257:5, col:26> Text=" part of the template."
| |   `-ParagraphComment 0x5555d4c4afc0 <line:5259:5, line:5262:24>
| |     |-TextComment 0x5555d4c4af20 <line:5259:5, col:73> Text=" An "informative" chunk contains annotations that can be displayed to"
| |     |-TextComment 0x5555d4c4af40 <line:5260:5, col:76> Text=" help the user decide whether a particular code-completion result is the"
| |     |-TextComment 0x5555d4c4af60 <line:5261:5, col:78> Text=" right option, but which is not part of the actual template to be inserted"
| |     `-TextComment 0x5555d4c4af80 <line:5262:5, col:24> Text=" by code completion."
| |-EnumConstantDecl 0x5555d4bcb918 <line:5284:3> col:3 CXCompletionChunk_CurrentParameter 'int'
| | `-FullComment 0x5555d4c4b460 <line:5266:5, line:5282:42>
| |   |-ParagraphComment 0x5555d4c4b0b0 <line:5266:5, line:5267:74>
| |   | |-TextComment 0x5555d4c4b060 <line:5266:5, col:70> Text=" Text that describes the current parameter when code-completion is"
| |   | `-TextComment 0x5555d4c4b080 <line:5267:5, col:74> Text=" referring to function call, message send, or template specialization."
| |   |-ParagraphComment 0x5555d4c4b150 <line:5269:5, line:5271:57>
| |   | |-TextComment 0x5555d4c4b0d0 <line:5269:5, col:73> Text=" A "current parameter" chunk occurs when code-completion is providing"
| |   | |-TextComment 0x5555d4c4b0f0 <line:5270:5, col:71> Text=" information about a parameter corresponding to the argument at the"
| |   | `-TextComment 0x5555d4c4b110 <line:5271:5, col:57> Text=" code-completion point. For example, given a function"
| |   |-ParagraphComment 0x5555d4c4b1a0 <line:5273:5>
| |   | `-TextComment 0x5555d4c4b170 <col:5> Text=" "
| |   |-VerbatimBlockComment 0x5555d4c4b1c0 <col:6, col:11> Name="code" CloseName="endcode"
| |   | `-VerbatimBlockLineComment 0x5555d4c4b210 <line:5274:5, col:28> Text=" int add(int x, int y);"
| |   `-ParagraphComment 0x5555d4c4b410 <line:5277:5, line:5282:42>
| |     |-TextComment 0x5555d4c4b240 <line:5277:5, col:25> Text=" and the source code "
| |     |-InlineCommandComment 0x5555d4c4b280 <col:26, col:27> Name="c" RenderMonospaced Arg[0]="add(,"
| |     |-TextComment 0x5555d4c4b2a0 <col:34, col:78> Text=" where the code-completion point is after the"
| |     |-TextComment 0x5555d4c4b2c0 <line:5278:5, col:77> Text=" "(", the code-completion string will contain a "current parameter" chunk"
| |     |-TextComment 0x5555d4c4b2e0 <line:5279:5, col:75> Text=" for "int x", indicating that the current argument will initialize that"
| |     |-TextComment 0x5555d4c4b300 <line:5280:5, col:41> Text=" parameter. After typing further, to "
| |     |-InlineCommandComment 0x5555d4c4b340 <col:42, col:43> Name="c" RenderMonospaced Arg[0]="add(17,"
| |     |-TextComment 0x5555d4c4b360 <col:52, col:78> Text=" (where the code-completion"
| |     |-TextComment 0x5555d4c4b380 <line:5281:5, col:71> Text=" point is after the ","), the code-completion string will contain a"
| |     `-TextComment 0x5555d4c4b3a0 <line:5282:5, col:42> Text=" "current parameter" chunk to "int y"."
| |-EnumConstantDecl 0x5555d4bcb998 <line:5289:3> col:3 CXCompletionChunk_LeftParen 'int'
| | `-FullComment 0x5555d4c4b550 <line:5286:5, line:5287:55>
| |   `-ParagraphComment 0x5555d4c4b520 <line:5286:5, line:5287:55>
| |     |-TextComment 0x5555d4c4b4d0 <line:5286:5, col:66> Text=" A left parenthesis ('('), used to initiate a function call or"
| |     `-TextComment 0x5555d4c4b4f0 <line:5287:5, col:55> Text=" signal the beginning of a function parameter list."
| |-EnumConstantDecl 0x5555d4bcba18 <line:5294:3> col:3 CXCompletionChunk_RightParen 'int'
| | `-FullComment 0x5555d4c4b640 <line:5291:5, line:5292:49>
| |   `-ParagraphComment 0x5555d4c4b610 <line:5291:5, line:5292:49>
| |     |-TextComment 0x5555d4c4b5c0 <line:5291:5, col:65> Text=" A right parenthesis (')'), used to finish a function call or"
| |     `-TextComment 0x5555d4c4b5e0 <line:5292:5, col:49> Text=" signal the end of a function parameter list."
| |-EnumConstantDecl 0x5555d4bcba98 <line:5298:3> col:3 CXCompletionChunk_LeftBracket 'int'
| | `-FullComment 0x5555d4c4b710 <line:5296:5, col:26>
| |   `-ParagraphComment 0x5555d4c4b6e0 <col:5, col:26>
| |     `-TextComment 0x5555d4c4b6b0 <col:5, col:26> Text=" A left bracket ('[')."
| |-EnumConstantDecl 0x5555d4bcbb18 <line:5302:3> col:3 CXCompletionChunk_RightBracket 'int'
| | `-FullComment 0x5555d4c4b7e0 <line:5300:5, col:27>
| |   `-ParagraphComment 0x5555d4c4b7b0 <col:5, col:27>
| |     `-TextComment 0x5555d4c4b780 <col:5, col:27> Text=" A right bracket (']')."
| |-EnumConstantDecl 0x5555d4bcbb98 <line:5306:3> col:3 CXCompletionChunk_LeftBrace 'int'
| | `-FullComment 0x5555d4c4b8b0 <line:5304:5, col:24>
| |   `-ParagraphComment 0x5555d4c4b880 <col:5, col:24>
| |     `-TextComment 0x5555d4c4b850 <col:5, col:24> Text=" A left brace ('{')."
| |-EnumConstantDecl 0x5555d4bcbc18 <line:5310:3> col:3 CXCompletionChunk_RightBrace 'int'
| | `-FullComment 0x5555d4c4b980 <line:5308:5, col:25>
| |   `-ParagraphComment 0x5555d4c4b950 <col:5, col:25>
| |     `-TextComment 0x5555d4c4b920 <col:5, col:25> Text=" A right brace ('}')."
| |-EnumConstantDecl 0x5555d4bcbc98 <line:5314:3> col:3 CXCompletionChunk_LeftAngle 'int'
| | `-FullComment 0x5555d4c4baa0 <line:5312:5, col:32>
| |   `-ParagraphComment 0x5555d4c4ba70 <col:5, col:32>
| |     |-TextComment 0x5555d4c4b9f0 <col:5, col:28> Text=" A left angle bracket ('"
| |     |-TextComment 0x5555d4c4ba10 <col:29> Text="<"
| |     `-TextComment 0x5555d4c4ba30 <col:30, col:32> Text="')."
| |-EnumConstantDecl 0x5555d4bcbd18 <line:5318:3> col:3 CXCompletionChunk_RightAngle 'int'
| | `-FullComment 0x5555d4c4bb70 <line:5316:5, col:33>
| |   `-ParagraphComment 0x5555d4c4bb40 <col:5, col:33>
| |     `-TextComment 0x5555d4c4bb10 <col:5, col:33> Text=" A right angle bracket ('>')."
| |-EnumConstantDecl 0x5555d4bcbd98 <line:5322:3> col:3 CXCompletionChunk_Comma 'int'
| | `-FullComment 0x5555d4c4bc40 <line:5320:5, col:29>
| |   `-ParagraphComment 0x5555d4c4bc10 <col:5, col:29>
| |     `-TextComment 0x5555d4c4bbe0 <col:5, col:29> Text=" A comma separator (',')."
| |-EnumConstantDecl 0x5555d4bcbe18 <line:5330:3> col:3 CXCompletionChunk_ResultType 'int'
| | `-FullComment 0x5555d4c4bdb0 <line:5324:5, line:5328:61>
| |   |-ParagraphComment 0x5555d4c4bce0 <line:5324:5, col:59>
| |   | `-TextComment 0x5555d4c4bcb0 <col:5, col:59> Text=" Text that specifies the result type of a given result."
| |   `-ParagraphComment 0x5555d4c4bd80 <line:5326:5, line:5328:61>
| |     |-TextComment 0x5555d4c4bd00 <line:5326:5, col:76> Text=" This special kind of informative chunk is not meant to be inserted into"
| |     |-TextComment 0x5555d4c4bd20 <line:5327:5, col:72> Text=" the text buffer. Rather, it is meant to illustrate the type that an"
| |     `-TextComment 0x5555d4c4bd40 <line:5328:5, col:61> Text=" expression using the given completion string would have."
| |-EnumConstantDecl 0x5555d4bcbe98 <line:5334:3> col:3 CXCompletionChunk_Colon 'int'
| | `-FullComment 0x5555d4c4be90 <line:5332:5, col:19>
| |   `-ParagraphComment 0x5555d4c4be60 <col:5, col:19>
| |     `-TextComment 0x5555d4c4be20 <col:5, col:19> Text=" A colon (':')."
| |-EnumConstantDecl 0x5555d4bcbf18 <line:5338:3> col:3 CXCompletionChunk_SemiColon 'int'
| | `-FullComment 0x5555d4c4bf60 <line:5336:5, col:23>
| |   `-ParagraphComment 0x5555d4c4bf30 <col:5, col:23>
| |     `-TextComment 0x5555d4c4bf00 <col:5, col:23> Text=" A semicolon (';')."
| |-EnumConstantDecl 0x5555d4bcbf98 <line:5342:3> col:3 CXCompletionChunk_Equal 'int'
| | `-FullComment 0x5555d4c4c030 <line:5340:5, col:17>
| |   `-ParagraphComment 0x5555d4c4c000 <col:5, col:17>
| |     `-TextComment 0x5555d4c4bfd0 <col:5, col:17> Text=" An '=' sign."
| |-EnumConstantDecl 0x5555d4bcc018 <line:5346:3> col:3 CXCompletionChunk_HorizontalSpace 'int'
| | `-FullComment 0x5555d4c4c100 <line:5344:5, col:28>
| |   `-ParagraphComment 0x5555d4c4c0d0 <col:5, col:28>
| |     `-TextComment 0x5555d4c4c0a0 <col:5, col:28> Text=" Horizontal space (' ')."
| `-EnumConstantDecl 0x5555d4bcc098 <line:5351:3> col:3 CXCompletionChunk_VerticalSpace 'int'
|   `-FullComment 0x5555d4c4c240 <line:5348:5, line:5349:25>
|     `-ParagraphComment 0x5555d4c4c210 <line:5348:5, line:5349:25>
|       |-TextComment 0x5555d4c4c170 <line:5348:5, col:22> Text=" Vertical space ('"
|       |-TextComment 0x5555d4c4c190 <col:23, col:24> Text="\"
|       |-TextComment 0x5555d4c4c1b0 <col:25, col:71> Text="n'), after which it is generally a good idea to"
|       `-TextComment 0x5555d4c4c1d0 <line:5349:5, col:25> Text=" perform indentation."
|-FunctionDecl 0x5555d4bcca88 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:5365:51> line:5364:1 clang_getCompletionChunkKind 'enum CXCompletionChunkKind (CXCompletionString, unsigned int)'
| |-ParmVarDecl 0x5555d4bcc8b0 <col:30, col:49> col:49 completion_string 'CXCompletionString':'void *'
| |-ParmVarDecl 0x5555d4bcc930 <line:5365:30, col:39> col:39 chunk_number 'unsigned int'
| |-VisibilityAttr 0x5555d4bccb40 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c4c6a0 </workspace/clang-c/Index.h:5355:3, line:5362:1>
|   |-ParagraphComment 0x5555d4c4c2e0 <line:5355:3, col:71>
|   | `-TextComment 0x5555d4c4c2b0 <col:3, col:71> Text=" Determine the kind of a particular chunk within a completion string."
|   |-ParagraphComment 0x5555d4c4c330 <line:5357:3>
|   | `-TextComment 0x5555d4c4c300 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c4c350 <col:4, col:59> [in] implicitly Param="completion_string" ParamIndex=0
|   | `-ParagraphComment 0x5555d4c4c3f0 <col:28, col:59>
|   |   `-TextComment 0x5555d4c4c3c0 <col:28, col:59> Text=" the completion string to query."
|   |-ParagraphComment 0x5555d4c4c440 <line:5359:3>
|   | `-TextComment 0x5555d4c4c410 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c4c460 <col:4, col:79> [in] implicitly Param="chunk_number" ParamIndex=1
|   | `-ParagraphComment 0x5555d4c4c4f0 <col:23, col:79>
|   |   `-TextComment 0x5555d4c4c4c0 <col:23, col:79> Text=" the 0-based index of the chunk in the completion string."
|   |-ParagraphComment 0x5555d4c4c540 <line:5361:3>
|   | `-TextComment 0x5555d4c4c510 <col:3> Text=" "
|   `-BlockCommandComment 0x5555d4c4c560 <col:4, line:5362:1> Name="returns"
|     `-ParagraphComment 0x5555d4c4c640 <line:5361:12, line:5362:1>
|       |-TextComment 0x5555d4c4c590 <line:5361:12, col:47> Text=" the kind of the chunk at the index "
|       |-InlineCommandComment 0x5555d4c4c5e0 <col:48, col:49> Name="c" RenderMonospaced Arg[0]="chunk_number."
|       `-TextComment 0x5555d4c4c600 <line:5362:1> Text=" "
|-FunctionDecl 0x5555d4bccd48 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:5378:64> line:5377:25 clang_getCompletionChunkText 'CXString (CXCompletionString, unsigned int)'
| |-ParmVarDecl 0x5555d4bccbf8 <line:5378:5, col:24> col:24 completion_string 'CXCompletionString':'void *'
| |-ParmVarDecl 0x5555d4bccc78 <col:43, col:52> col:52 chunk_number 'unsigned int'
| |-VisibilityAttr 0x5555d4bcce00 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c4cb20 </workspace/clang-c/Index.h:5368:3, line:5376:1>
|   |-ParagraphComment 0x5555d4c4c760 <line:5368:3, line:5369:21>
|   | |-TextComment 0x5555d4c4c710 <line:5368:3, col:64> Text=" Retrieve the text associated with a particular chunk within a"
|   | `-TextComment 0x5555d4c4c730 <line:5369:3, col:21> Text=" completion string."
|   |-ParagraphComment 0x5555d4c4c7b0 <line:5371:3>
|   | `-TextComment 0x5555d4c4c780 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c4c7d0 <col:4, col:59> [in] implicitly Param="completion_string" ParamIndex=0
|   | `-ParagraphComment 0x5555d4c4c870 <col:28, col:59>
|   |   `-TextComment 0x5555d4c4c840 <col:28, col:59> Text=" the completion string to query."
|   |-ParagraphComment 0x5555d4c4c8c0 <line:5373:3>
|   | `-TextComment 0x5555d4c4c890 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c4c8e0 <col:4, col:79> [in] implicitly Param="chunk_number" ParamIndex=1
|   | `-ParagraphComment 0x5555d4c4c970 <col:23, col:79>
|   |   `-TextComment 0x5555d4c4c940 <col:23, col:79> Text=" the 0-based index of the chunk in the completion string."
|   |-ParagraphComment 0x5555d4c4c9c0 <line:5375:3>
|   | `-TextComment 0x5555d4c4c990 <col:3> Text=" "
|   `-BlockCommandComment 0x5555d4c4c9e0 <col:4, line:5376:1> Name="returns"
|     `-ParagraphComment 0x5555d4c4cac0 <line:5375:12, line:5376:1>
|       |-TextComment 0x5555d4c4ca10 <line:5375:12, col:56> Text=" the text associated with the chunk at index "
|       |-InlineCommandComment 0x5555d4c4ca60 <col:57, col:58> Name="c" RenderMonospaced Arg[0]="chunk_number."
|       `-TextComment 0x5555d4c4ca80 <line:5376:1> Text=" "
|-FunctionDecl 0x5555d4bcd008 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:5392:64> line:5391:35 clang_getCompletionChunkCompletionString 'CXCompletionString (CXCompletionString, unsigned int)'
| |-ParmVarDecl 0x5555d4bcceb8 <line:5392:5, col:24> col:24 completion_string 'CXCompletionString':'void *'
| |-ParmVarDecl 0x5555d4bccf38 <col:43, col:52> col:52 chunk_number 'unsigned int'
| |-VisibilityAttr 0x5555d4bcd0c0 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c4cfc0 </workspace/clang-c/Index.h:5381:3, line:5390:1>
|   |-ParagraphComment 0x5555d4c4cbe0 <line:5381:3, line:5382:30>
|   | |-TextComment 0x5555d4c4cb90 <line:5381:3, col:68> Text=" Retrieve the completion string associated with a particular chunk"
|   | `-TextComment 0x5555d4c4cbb0 <line:5382:3, col:30> Text=" within a completion string."
|   |-ParagraphComment 0x5555d4c4cc30 <line:5384:3>
|   | `-TextComment 0x5555d4c4cc00 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c4cc50 <col:4, col:59> [in] implicitly Param="completion_string" ParamIndex=0
|   | `-ParagraphComment 0x5555d4c4ccf0 <col:28, col:59>
|   |   `-TextComment 0x5555d4c4ccc0 <col:28, col:59> Text=" the completion string to query."
|   |-ParagraphComment 0x5555d4c4cd40 <line:5386:3>
|   | `-TextComment 0x5555d4c4cd10 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c4cd60 <col:4, col:79> [in] implicitly Param="chunk_number" ParamIndex=1
|   | `-ParagraphComment 0x5555d4c4cdf0 <col:23, col:79>
|   |   `-TextComment 0x5555d4c4cdc0 <col:23, col:79> Text=" the 0-based index of the chunk in the completion string."
|   |-ParagraphComment 0x5555d4c4ce40 <line:5388:3>
|   | `-TextComment 0x5555d4c4ce10 <col:3> Text=" "
|   `-BlockCommandComment 0x5555d4c4ce60 <col:4, line:5390:1> Name="returns"
|     `-ParagraphComment 0x5555d4c4cf60 <line:5388:12, line:5390:1>
|       |-TextComment 0x5555d4c4ce90 <line:5388:12, col:68> Text=" the completion string associated with the chunk at index"
|       |-TextComment 0x5555d4c4ceb0 <line:5389:3> Text=" "
|       |-InlineCommandComment 0x5555d4c4cf00 <col:4, col:5> Name="c" RenderMonospaced Arg[0]="chunk_number."
|       `-TextComment 0x5555d4c4cf20 <line:5390:1> Text=" "
|-FunctionDecl 0x5555d4bcd240 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:5398:66> col:1 clang_getNumCompletionChunks 'unsigned int (CXCompletionString)'
| |-ParmVarDecl 0x5555d4bcd178 <col:30, col:49> col:49 completion_string 'CXCompletionString':'void *'
| |-VisibilityAttr 0x5555d4bcd2f0 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c4d090 </workspace/clang-c/Index.h:5395:3, col:69>
|   `-ParagraphComment 0x5555d4c4d060 <col:3, col:69>
|     `-TextComment 0x5555d4c4d030 <col:3, col:69> Text=" Retrieve the number of chunks in the given code-completion string."
|-FunctionDecl 0x5555d4bcd440 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:5413:65> col:1 clang_getCompletionPriority 'unsigned int (CXCompletionString)'
| |-ParmVarDecl 0x5555d4bcd3a8 <col:29, col:48> col:48 completion_string 'CXCompletionString':'void *'
| |-VisibilityAttr 0x5555d4bcd4f0 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c4d420 </workspace/clang-c/Index.h:5401:3, line:5410:45>
|   |-ParagraphComment 0x5555d4c4d130 <line:5401:3, col:50>
|   | `-TextComment 0x5555d4c4d100 <col:3, col:50> Text=" Determine the priority of this code completion."
|   |-ParagraphComment 0x5555d4c4d1d0 <line:5403:3, line:5405:55>
|   | |-TextComment 0x5555d4c4d150 <line:5403:3, col:73> Text=" The priority of a code completion indicates how likely it is that this"
|   | |-TextComment 0x5555d4c4d170 <line:5404:3, col:73> Text=" particular completion is the completion that the user will select. The"
|   | `-TextComment 0x5555d4c4d190 <line:5405:3, col:55> Text=" priority is selected by various internal heuristics."
|   |-ParagraphComment 0x5555d4c4d220 <line:5407:3>
|   | `-TextComment 0x5555d4c4d1f0 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c4d240 <col:4, col:59> [in] implicitly Param="completion_string" ParamIndex=0
|   | `-ParagraphComment 0x5555d4c4d2e0 <col:28, col:59>
|   |   `-TextComment 0x5555d4c4d2b0 <col:28, col:59> Text=" The completion string to query."
|   |-ParagraphComment 0x5555d4c4d330 <line:5409:3>
|   | `-TextComment 0x5555d4c4d300 <col:3> Text=" "
|   `-BlockCommandComment 0x5555d4c4d350 <col:4, line:5410:45> Name="returns"
|     `-ParagraphComment 0x5555d4c4d3d0 <line:5409:12, line:5410:45>
|       |-TextComment 0x5555d4c4d380 <line:5409:12, col:75> Text=" The priority of this completion string. Smaller values indicate"
|       `-TextComment 0x5555d4c4d3a0 <line:5410:3, col:45> Text=" higher-priority (more likely) completions."
|-FunctionDecl 0x5555d4bcd6a8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:5424:69> col:1 clang_getCompletionAvailability 'enum CXAvailabilityKind (CXCompletionString)'
| |-ParmVarDecl 0x5555d4bcd5a8 <col:33, col:52> col:52 completion_string 'CXCompletionString':'void *'
| |-VisibilityAttr 0x5555d4bcd758 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c4d710 </workspace/clang-c/Index.h:5416:3, line:5421:54>
|   |-ParagraphComment 0x5555d4c4d4e0 <line:5416:3, line:5417:20>
|   | |-TextComment 0x5555d4c4d490 <line:5416:3, col:69> Text=" Determine the availability of the entity that this code-completion"
|   | `-TextComment 0x5555d4c4d4b0 <line:5417:3, col:20> Text=" string refers to."
|   |-ParagraphComment 0x5555d4c4d530 <line:5419:3>
|   | `-TextComment 0x5555d4c4d500 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c4d550 <col:4, col:59> [in] implicitly Param="completion_string" ParamIndex=0
|   | `-ParagraphComment 0x5555d4c4d5f0 <col:28, col:59>
|   |   `-TextComment 0x5555d4c4d5c0 <col:28, col:59> Text=" The completion string to query."
|   |-ParagraphComment 0x5555d4c4d640 <line:5421:3>
|   | `-TextComment 0x5555d4c4d610 <col:3> Text=" "
|   `-BlockCommandComment 0x5555d4c4d660 <col:4, col:54> Name="returns"
|     `-ParagraphComment 0x5555d4c4d6c0 <col:12, col:54>
|       `-TextComment 0x5555d4c4d690 <col:12, col:54> Text=" The availability of the completion string."
|-FunctionDecl 0x5555d4bcda40 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:5436:71> col:1 clang_getCompletionNumAnnotations 'unsigned int (CXCompletionString)'
| |-ParmVarDecl 0x5555d4bcd808 <col:35, col:54> col:54 completion_string 'CXCompletionString':'void *'
| |-VisibilityAttr 0x5555d4bcdaf0 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c4da20 </workspace/clang-c/Index.h:5427:3, line:5433:10>
|   |-ParagraphComment 0x5555d4c4d7d0 <line:5427:3, line:5428:21>
|   | |-TextComment 0x5555d4c4d780 <line:5427:3, col:63> Text=" Retrieve the number of annotations associated with the given"
|   | `-TextComment 0x5555d4c4d7a0 <line:5428:3, col:21> Text=" completion string."
|   |-ParagraphComment 0x5555d4c4d820 <line:5430:3>
|   | `-TextComment 0x5555d4c4d7f0 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c4d840 <col:4, col:59> [in] implicitly Param="completion_string" ParamIndex=0
|   | `-ParagraphComment 0x5555d4c4d8e0 <col:28, col:59>
|   |   `-TextComment 0x5555d4c4d8b0 <col:28, col:59> Text=" the completion string to query."
|   |-ParagraphComment 0x5555d4c4d930 <line:5432:3>
|   | `-TextComment 0x5555d4c4d900 <col:3> Text=" "
|   `-BlockCommandComment 0x5555d4c4d950 <col:4, line:5433:10> Name="returns"
|     `-ParagraphComment 0x5555d4c4d9d0 <line:5432:12, line:5433:10>
|       |-TextComment 0x5555d4c4d980 <line:5432:12, col:74> Text=" the number of annotations associated with the given completion"
|       `-TextComment 0x5555d4c4d9a0 <line:5433:3, col:10> Text=" string."
|-FunctionDecl 0x5555d4bcdcc0 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:5450:69> line:5449:25 clang_getCompletionAnnotation 'CXString (CXCompletionString, unsigned int)'
| |-ParmVarDecl 0x5555d4bcdba8 <line:5450:5, col:24> col:24 completion_string 'CXCompletionString':'void *'
| |-ParmVarDecl 0x5555d4bcdc28 <col:43, col:52> col:52 annotation_number 'unsigned int'
| |-VisibilityAttr 0x5555d4bcdd78 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c4dee0 </workspace/clang-c/Index.h:5439:3, line:5447:78>
|   |-ParagraphComment 0x5555d4c4dac0 <line:5439:3, col:71>
|   | `-TextComment 0x5555d4c4da90 <col:3, col:71> Text=" Retrieve the annotation associated with the given completion string."
|   |-ParagraphComment 0x5555d4c4db10 <line:5441:3>
|   | `-TextComment 0x5555d4c4dae0 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c4db30 <col:4, col:59> [in] implicitly Param="completion_string" ParamIndex=0
|   | `-ParagraphComment 0x5555d4c4dbd0 <col:28, col:59>
|   |   `-TextComment 0x5555d4c4dba0 <col:28, col:59> Text=" the completion string to query."
|   |-ParagraphComment 0x5555d4c4dc20 <line:5443:3>
|   | `-TextComment 0x5555d4c4dbf0 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c4dc40 <col:4, line:5444:21> [in] implicitly Param="annotation_number" ParamIndex=1
|   | `-ParagraphComment 0x5555d4c4dd00 <line:5443:28, line:5444:21>
|   |   |-TextComment 0x5555d4c4dcb0 <line:5443:28, col:70> Text=" the 0-based index of the annotation of the"
|   |   `-TextComment 0x5555d4c4dcd0 <line:5444:3, col:21> Text=" completion string."
|   |-ParagraphComment 0x5555d4c4dd50 <line:5446:3>
|   | `-TextComment 0x5555d4c4dd20 <col:3> Text=" "
|   `-BlockCommandComment 0x5555d4c4dd70 <col:4, line:5447:78> Name="returns"
|     `-ParagraphComment 0x5555d4c4de80 <line:5446:12, line:5447:78>
|       |-TextComment 0x5555d4c4dda0 <line:5446:12, col:69> Text=" annotation string associated with the completion at index"
|       |-TextComment 0x5555d4c4ddc0 <line:5447:3> Text=" "
|       |-InlineCommandComment 0x5555d4c4de10 <col:4, col:5> Name="c" RenderMonospaced Arg[0]="annotation_number,"
|       `-TextComment 0x5555d4c4de30 <col:25, col:78> Text=" or a NULL string if that annotation is not available."
|-FunctionDecl 0x5555d4bce028 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:5469:66> line:5468:25 clang_getCompletionParent 'CXString (CXCompletionString, enum CXCursorKind *)'
| |-ParmVarDecl 0x5555d4bcde28 <line:5469:5, col:24> col:24 completion_string 'CXCompletionString':'void *'
| |-ParmVarDecl 0x5555d4bcdf10 <col:43, col:62> col:62 kind 'enum CXCursorKind *'
| |-VisibilityAttr 0x5555d4bce0e0 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c4e3c0 </workspace/clang-c/Index.h:5453:3, line:5466:67>
|   |-ParagraphComment 0x5555d4c4df80 <line:5453:3, col:62>
|   | `-TextComment 0x5555d4c4df50 <col:3, col:62> Text=" Retrieve the parent context of the given completion string."
|   |-ParagraphComment 0x5555d4c4e040 <line:5455:3, line:5458:30>
|   | |-TextComment 0x5555d4c4dfa0 <line:5455:3, col:70> Text=" The parent context of a completion string is the semantic parent of"
|   | |-TextComment 0x5555d4c4dfc0 <line:5456:3, col:77> Text=" the declaration (if any) that the code completion represents. For example,"
|   | |-TextComment 0x5555d4c4dfe0 <line:5457:3, col:76> Text=" a code completion for an Objective-C method would have the method's class"
|   | `-TextComment 0x5555d4c4e000 <line:5458:3, col:30> Text=" or protocol as its context."
|   |-ParagraphComment 0x5555d4c4e090 <line:5460:3>
|   | `-TextComment 0x5555d4c4e060 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c4e0b0 <col:4, line:5461:17> [in] implicitly Param="completion_string" ParamIndex=0
|   | `-ParagraphComment 0x5555d4c4e170 <line:5460:28, line:5461:17>
|   |   |-TextComment 0x5555d4c4e120 <line:5460:28, col:70> Text=" The code completion string whose parent is"
|   |   `-TextComment 0x5555d4c4e140 <line:5461:3, col:17> Text=" being queried."
|   |-ParagraphComment 0x5555d4c4e1c0 <line:5463:3>
|   | `-TextComment 0x5555d4c4e190 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c4e1e0 <col:4, col:77> [in] implicitly Param="kind" ParamIndex=1
|   | `-ParagraphComment 0x5555d4c4e270 <col:15, col:77>
|   |   `-TextComment 0x5555d4c4e240 <col:15, col:77> Text=" DEPRECATED: always set to CXCursor_NotImplemented if non-NULL."
|   |-ParagraphComment 0x5555d4c4e2c0 <line:5465:3>
|   | `-TextComment 0x5555d4c4e290 <col:3> Text=" "
|   `-BlockCommandComment 0x5555d4c4e2e0 <col:4, line:5466:67> Name="returns"
|     `-ParagraphComment 0x5555d4c4e360 <line:5465:12, line:5466:67>
|       |-TextComment 0x5555d4c4e310 <line:5465:12, col:66> Text=" The name of the completion parent, e.g., "NSObject" if"
|       `-TextComment 0x5555d4c4e330 <line:5466:3, col:67> Text=" the completion string represents a method in the NSObject class."
|-FunctionDecl 0x5555d4bce258 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:5476:69> col:1 clang_getCompletionBriefComment 'CXString (CXCompletionString)'
| |-ParmVarDecl 0x5555d4bce198 <col:33, col:52> col:52 completion_string 'CXCompletionString':'void *'
| |-VisibilityAttr 0x5555d4bce308 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c4e4b0 </workspace/clang-c/Index.h:5472:3, line:5473:51>
|   `-ParagraphComment 0x5555d4c4e480 <line:5472:3, line:5473:51>
|     |-TextComment 0x5555d4c4e430 <line:5472:3, col:71> Text=" Retrieve the brief documentation comment attached to the declaration"
|     `-TextComment 0x5555d4c4e450 <line:5473:3, col:51> Text=" that corresponds to the given completion string."
|-FunctionDecl 0x5555d4bce478 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:5488:48> col:1 clang_getCursorCompletionString 'CXCompletionString (CXCursor)'
| |-ParmVarDecl 0x5555d4bce3b8 <col:33, col:42> col:42 cursor 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4bce528 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c4e7b0 </workspace/clang-c/Index.h:5479:3, line:5485:58>
|   |-ParagraphComment 0x5555d4c4e570 <line:5479:3, line:5480:21>
|   | |-TextComment 0x5555d4c4e520 <line:5479:3, col:69> Text=" Retrieve a completion string for an arbitrary declaration or macro"
|   | `-TextComment 0x5555d4c4e540 <line:5480:3, col:21> Text=" definition cursor."
|   |-ParagraphComment 0x5555d4c4e5c0 <line:5482:3>
|   | `-TextComment 0x5555d4c4e590 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c4e5e0 <col:4, col:37> [in] implicitly Param="cursor" ParamIndex=0
|   | `-ParagraphComment 0x5555d4c4e670 <col:17, col:37>
|   |   `-TextComment 0x5555d4c4e640 <col:17, col:37> Text=" The cursor to query."
|   |-ParagraphComment 0x5555d4c4e6c0 <line:5484:3>
|   | `-TextComment 0x5555d4c4e690 <col:3> Text=" "
|   `-BlockCommandComment 0x5555d4c4e6e0 <col:4, line:5485:58> Name="returns"
|     `-ParagraphComment 0x5555d4c4e760 <line:5484:12, line:5485:58>
|       |-TextComment 0x5555d4c4e710 <line:5484:12, col:79> Text=" A non-context-sensitive completion string for declaration and macro"
|       `-TextComment 0x5555d4c4e730 <line:5485:3, col:58> Text=" definition cursors, or NULL for other kinds of cursors."
|-RecordDecl 0x5555d4bce5a8 <line:5497:9, line:5508:1> line:5497:9 struct definition
| |-FullComment 0x5555d4c4ea30 <line:5491:3, line:5496:1>
| | |-ParagraphComment 0x5555d4c4e850 <line:5491:3, col:43>
| | | `-TextComment 0x5555d4c4e820 <col:3, col:43> Text=" Contains the results of code-completion."
| | `-ParagraphComment 0x5555d4c4ea00 <line:5493:3, line:5496:1>
| |   |-TextComment 0x5555d4c4e870 <line:5493:3, col:66> Text=" This data structure contains the results of code completion, as"
| |   |-TextComment 0x5555d4c4e890 <line:5494:3, col:15> Text=" produced by "
| |   |-InlineCommandComment 0x5555d4c4e8e0 <col:16, col:17> Name="c" RenderMonospaced Arg[0]="clang_codeCompleteAt()."
| |   |-TextComment 0x5555d4c4e900 <col:42, col:71> Text=" Its contents must be freed by"
| |   |-TextComment 0x5555d4c4e920 <line:5495:3> Text=" "
| |   |-InlineCommandComment 0x5555d4c4e980 <col:4, col:5> Name="c" RenderMonospaced Arg[0]="clang_disposeCodeCompleteResults."
| |   `-TextComment 0x5555d4c4e9a0 <line:5496:1> Text=" "
| |-FieldDecl 0x5555d4bce750 <line:5501:3, col:23> col:23 Results 'CXCompletionResult *'
| | `-FullComment 0x5555d4c4eb00 <line:5499:5, col:33>
| |   `-ParagraphComment 0x5555d4c4ead0 <col:5, col:33>
| |     `-TextComment 0x5555d4c4eaa0 <col:5, col:33> Text=" The code-completion results."
| `-FieldDecl 0x5555d4bce7e0 <line:5507:3, col:12> col:12 NumResults 'unsigned int'
|   `-FullComment 0x5555d4c4ec60 <line:5504:5, line:5505:22>
|     `-ParagraphComment 0x5555d4c4ec30 <line:5504:5, line:5505:22>
|       |-TextComment 0x5555d4c4eb70 <line:5504:5, col:56> Text=" The number of code-completion results stored in the"
|       |-TextComment 0x5555d4c4eb90 <line:5505:5> Text=" "
|       |-InlineCommandComment 0x5555d4c4ebd0 <col:6, col:7> Name="c" RenderMonospaced Arg[0]="Results"
|       `-TextComment 0x5555d4c4ebf0 <col:16, col:22> Text=" array."
|-TypedefDecl 0x5555d4bce888 <line:5497:1, line:5508:3> col:3 referenced CXCodeCompleteResults 'struct CXCodeCompleteResults':'CXCodeCompleteResults'
| |-ElaboratedType 0x5555d4bce830 'struct CXCodeCompleteResults' sugar
| | `-RecordType 0x5555d4bce630 'CXCodeCompleteResults'
| |   `-Record 0x5555d4bce5a8 ''
| `-FullComment 0x5555d4c4eee0 <line:5491:3, line:5496:1>
|   |-ParagraphComment 0x5555d4c4ed00 <line:5491:3, col:43>
|   | `-TextComment 0x5555d4c4ecd0 <col:3, col:43> Text=" Contains the results of code-completion."
|   `-ParagraphComment 0x5555d4c4eeb0 <line:5493:3, line:5496:1>
|     |-TextComment 0x5555d4c4ed20 <line:5493:3, col:66> Text=" This data structure contains the results of code completion, as"
|     |-TextComment 0x5555d4c4ed40 <line:5494:3, col:15> Text=" produced by "
|     |-InlineCommandComment 0x5555d4c4ed90 <col:16, col:17> Name="c" RenderMonospaced Arg[0]="clang_codeCompleteAt()."
|     |-TextComment 0x5555d4c4edb0 <col:42, col:71> Text=" Its contents must be freed by"
|     |-TextComment 0x5555d4c4edd0 <line:5495:3> Text=" "
|     |-InlineCommandComment 0x5555d4c4ee30 <col:4, col:5> Name="c" RenderMonospaced Arg[0]="clang_disposeCodeCompleteResults."
|     `-TextComment 0x5555d4c4ee50 <line:5496:1> Text=" "
|-FunctionDecl 0x5555d4bcfdd0 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:5525:55> line:5524:1 clang_getCompletionNumFixIts 'unsigned int (CXCodeCompleteResults *, unsigned int)'
| |-ParmVarDecl 0x5555d4bcfc30 <col:30, col:53> col:53 results 'CXCodeCompleteResults *'
| |-ParmVarDecl 0x5555d4bcfcb0 <line:5525:30, col:39> col:39 completion_index 'unsigned int'
| |-VisibilityAttr 0x5555d4bcfe88 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c4f350 </workspace/clang-c/Index.h:5511:3, line:5521:34>
|   |-ParagraphComment 0x5555d4c4ef80 <line:5511:3, col:65>
|   | `-TextComment 0x5555d4c4ef50 <col:3, col:65> Text=" Retrieve the number of fix-its for the given completion index."
|   |-ParagraphComment 0x5555d4c4eff0 <line:5513:3, line:5514:18>
|   | |-TextComment 0x5555d4c4efa0 <line:5513:3, col:79> Text=" Calling this makes sense only if CXCodeComplete_IncludeCompletionsWithFixIts"
|   | `-TextComment 0x5555d4c4efc0 <line:5514:3, col:18> Text=" option was set."
|   |-ParagraphComment 0x5555d4c4f040 <line:5516:3>
|   | `-TextComment 0x5555d4c4f010 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c4f060 <col:4, col:62> [in] implicitly Param="results" ParamIndex=0
|   | `-ParagraphComment 0x5555d4c4f0f0 <col:18, col:62>
|   |   `-TextComment 0x5555d4c4f0c0 <col:18, col:62> Text=" The structure keeping all completion results"
|   |-ParagraphComment 0x5555d4c4f140 <line:5518:3>
|   | `-TextComment 0x5555d4c4f110 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c4f160 <col:4, col:54> [in] implicitly Param="completion_index" ParamIndex=1
|   | `-ParagraphComment 0x5555d4c4f200 <col:27, col:54>
|   |   `-TextComment 0x5555d4c4f1d0 <col:27, col:54> Text=" The index of the completion"
|   |-ParagraphComment 0x5555d4c4f250 <line:5520:3>
|   | `-TextComment 0x5555d4c4f220 <col:3> Text=" "
|   `-BlockCommandComment 0x5555d4c4f270 <col:4, line:5521:34> Name="return"
|     `-ParagraphComment 0x5555d4c4f2f0 <line:5520:11, line:5521:34>
|       |-TextComment 0x5555d4c4f2a0 <line:5520:11, col:79> Text=" The number of fix-its which must be applied before the completion at"
|       `-TextComment 0x5555d4c4f2c0 <line:5521:3, col:34> Text=" completion_index can be applied"
|-FunctionDecl 0x5555d4bd0208 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:5572:59> line:5570:25 clang_getCompletionFixIt 'CXString (CXCodeCompleteResults *, unsigned int, unsigned int, CXSourceRange *)'
| |-ParmVarDecl 0x5555d4bcff40 <line:5571:5, col:28> col:28 results 'CXCodeCompleteResults *'
| |-ParmVarDecl 0x5555d4bcffc0 <col:37, col:46> col:46 completion_index 'unsigned int'
| |-ParmVarDecl 0x5555d4bd0040 <line:5572:5, col:14> col:14 fixit_index 'unsigned int'
| |-ParmVarDecl 0x5555d4bd00c0 <col:27, col:42> col:42 replacement_range 'CXSourceRange *'
| |-VisibilityAttr 0x5555d4bd02d0 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c4fef0 </workspace/clang-c/Index.h:5528:3, line:5568:59>
|   |-ParagraphComment 0x5555d4c4f410 <line:5528:3, line:5529:28>
|   | |-TextComment 0x5555d4c4f3c0 <line:5528:3, col:67> Text=" Fix-its that *must* be applied before inserting the text for the"
|   | `-TextComment 0x5555d4c4f3e0 <line:5529:3, col:28> Text=" corresponding completion."
|   |-ParagraphComment 0x5555d4c4f4b0 <line:5531:3, line:5533:68>
|   | |-TextComment 0x5555d4c4f430 <line:5531:3, col:73> Text=" By default, clang_codeCompleteAt() only returns completions with empty"
|   | |-TextComment 0x5555d4c4f450 <line:5532:3, col:73> Text=" fix-its. Extra completions with non-empty fix-its should be explicitly"
|   | `-TextComment 0x5555d4c4f470 <line:5533:3, col:68> Text=" requested by setting CXCodeComplete_IncludeCompletionsWithFixIts."
|   |-ParagraphComment 0x5555d4c4f660 <line:5535:3, line:5544:36>
|   | |-TextComment 0x5555d4c4f4d0 <line:5535:3, col:78> Text=" For the clients to be able to compute position of the cursor after applying"
|   | |-TextComment 0x5555d4c4f4f0 <line:5536:3, col:63> Text=" fix-its, the following conditions are guaranteed to hold for"
|   | |-TextComment 0x5555d4c4f510 <line:5537:3, col:43> Text=" replacement_range of the stored fix-its:"
|   | |-TextComment 0x5555d4c4f530 <line:5538:3, col:74> Text="  - Ranges in the fix-its are guaranteed to never contain the completion"
|   | |-TextComment 0x5555d4c4f550 <line:5539:3, col:76> Text="  point (or identifier under completion point, if any) inside them, except"
|   | |-TextComment 0x5555d4c4f570 <line:5540:3, col:44> Text="  at the start or at the end of the range."
|   | |-TextComment 0x5555d4c4f590 <line:5541:3, col:74> Text="  - If a fix-it range starts or ends with completion point (or starts or"
|   | |-TextComment 0x5555d4c4f5b0 <line:5542:3, col:73> Text="  ends after the identifier under completion point), it will contain at"
|   | |-TextComment 0x5555d4c4f5d0 <line:5543:3, col:72> Text="  least one character. It allows to unambiguously recompute completion"
|   | `-TextComment 0x5555d4c4f5f0 <line:5544:3, col:36> Text="  point after applying the fix-it."
|   |-ParagraphComment 0x5555d4c4f720 <line:5546:3, line:5549:42>
|   | |-TextComment 0x5555d4c4f680 <line:5546:3, col:78> Text=" The intuition is that provided fix-its change code around the identifier we"
|   | |-TextComment 0x5555d4c4f6a0 <line:5547:3, col:70> Text=" complete, but are not allowed to touch the identifier itself or the"
|   | |-TextComment 0x5555d4c4f6c0 <line:5548:3, col:77> Text=" completion point. One example of completions with corrections are the ones"
|   | `-TextComment 0x5555d4c4f6e0 <line:5549:3, col:42> Text=" replacing '.' with '->' and vice versa:"
|   |-ParagraphComment 0x5555d4c4f8b0 <line:5551:3, line:5555:27>
|   | |-TextComment 0x5555d4c4f740 <line:5551:3, col:18> Text=" std::unique_ptr"
|   | |-TextComment 0x5555d4c4f760 <col:19, col:22> Text="<std"
|   | |-TextComment 0x5555d4c4f780 <col:23, col:30> Text="::vector"
|   | |-TextComment 0x5555d4c4f7a0 <col:31, col:34> Text="<int"
|   | |-TextComment 0x5555d4c4f7c0 <col:35, col:45> Text=">> vec_ptr;"
|   | |-TextComment 0x5555d4c4f7e0 <line:5552:3, col:69> Text=" In 'vec_ptr.^', one of the completions is 'push_back', it requires"
|   | |-TextComment 0x5555d4c4f800 <line:5553:3, col:27> Text=" replacing '.' with '->'."
|   | |-TextComment 0x5555d4c4f820 <line:5554:3, col:68> Text=" In 'vec_ptr->^', one of the completions is 'release', it requires"
|   | `-TextComment 0x5555d4c4f840 <line:5555:3, col:27> Text=" replacing '->' with '.'."
|   |-ParagraphComment 0x5555d4c4f900 <line:5557:3>
|   | `-TextComment 0x5555d4c4f8d0 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c4f920 <col:4, col:62> [in] implicitly Param="results" ParamIndex=0
|   | `-ParagraphComment 0x5555d4c4f9b0 <col:18, col:62>
|   |   `-TextComment 0x5555d4c4f980 <col:18, col:62> Text=" The structure keeping all completion results"
|   |-ParagraphComment 0x5555d4c4fa00 <line:5559:3>
|   | `-TextComment 0x5555d4c4f9d0 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c4fa20 <col:4, col:54> [in] implicitly Param="completion_index" ParamIndex=1
|   | `-ParagraphComment 0x5555d4c4fac0 <col:27, col:54>
|   |   `-TextComment 0x5555d4c4fa90 <col:27, col:54> Text=" The index of the completion"
|   |-ParagraphComment 0x5555d4c4fb10 <line:5561:3>
|   | `-TextComment 0x5555d4c4fae0 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c4fb30 <col:4, line:5562:19> [in] implicitly Param="fixit_index" ParamIndex=2
|   | `-ParagraphComment 0x5555d4c4fbe0 <line:5561:22, line:5562:19>
|   |   |-TextComment 0x5555d4c4fb90 <line:5561:22, col:67> Text=" The index of the fix-it for the completion at"
|   |   `-TextComment 0x5555d4c4fbb0 <line:5562:3, col:19> Text=" completion_index"
|   |-ParagraphComment 0x5555d4c4fc30 <line:5564:3>
|   | `-TextComment 0x5555d4c4fc00 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c4fc50 <col:4, line:5565:48> [in] implicitly Param="replacement_range" ParamIndex=3
|   | `-ParagraphComment 0x5555d4c4fd10 <line:5564:28, line:5565:48>
|   |   |-TextComment 0x5555d4c4fcc0 <line:5564:28, col:77> Text=" The fix-it range that must be replaced before the"
|   |   `-TextComment 0x5555d4c4fce0 <line:5565:3, col:48> Text=" completion at completion_index can be applied"
|   |-ParagraphComment 0x5555d4c4fd60 <line:5567:3>
|   | `-TextComment 0x5555d4c4fd30 <col:3> Text=" "
|   `-BlockCommandComment 0x5555d4c4fd80 <col:4, line:5568:59> Name="returns"
|     `-ParagraphComment 0x5555d4c4fe00 <line:5567:12, line:5568:59>
|       |-TextComment 0x5555d4c4fdb0 <line:5567:12, col:77> Text=" The fix-it string that must replace the code at replacement_range"
|       `-TextComment 0x5555d4c4fdd0 <line:5568:3, col:59> Text=" before the completion at completion_index can be applied"
|-EnumDecl 0x5555d4bd0358 <line:5581:1, line:5612:1> line:5581:6 CXCodeComplete_Flags
| |-FullComment 0x5555d4c50150 <line:5575:3, line:5580:1>
| | |-ParagraphComment 0x5555d4c50030 <line:5575:3, line:5576:23>
| | | |-TextComment 0x5555d4c4ff60 <line:5575:3, col:31> Text=" Flags that can be passed to "
| | | |-InlineCommandComment 0x5555d4c4ffb0 <col:32, col:33> Name="c" RenderMonospaced Arg[0]="clang_codeCompleteAt()"
| | | |-TextComment 0x5555d4c4ffd0 <col:57, col:59> Text=" to"
| | | `-TextComment 0x5555d4c4fff0 <line:5576:3, col:23> Text=" modify its behavior."
| | `-ParagraphComment 0x5555d4c50120 <line:5578:3, line:5580:1>
| |   |-TextComment 0x5555d4c50050 <line:5578:3, col:70> Text=" The enumerators in this enumeration can be bitwise-OR'd together to"
| |   |-TextComment 0x5555d4c50070 <line:5579:3, col:31> Text=" provide multiple options to "
| |   |-InlineCommandComment 0x5555d4c500c0 <col:32, col:33> Name="c" RenderMonospaced Arg[0]="clang_codeCompleteAt()."
| |   `-TextComment 0x5555d4c500e0 <line:5580:1> Text=" "
| |-EnumConstantDecl 0x5555d4bd0488 <line:5586:3, col:34> col:3 CXCodeComplete_IncludeMacros 'int'
| | |-ConstantExpr 0x5555d4bd0468 <col:34> 'int'
| | | |-value: Int 1
| | | `-IntegerLiteral 0x5555d4bd0448 <col:34> 'int' 1
| | `-FullComment 0x5555d4c50240 <line:5583:5, line:5584:26>
| |   `-ParagraphComment 0x5555d4c50210 <line:5583:5, line:5584:26>
| |     |-TextComment 0x5555d4c501c0 <line:5583:5, col:53> Text=" Whether to include macros within the set of code"
| |     `-TextComment 0x5555d4c501e0 <line:5584:5, col:26> Text=" completions returned."
| |-EnumConstantDecl 0x5555d4bd0548 <line:5592:3, col:40> col:3 CXCodeComplete_IncludeCodePatterns 'int'
| | |-ConstantExpr 0x5555d4bd0528 <col:40> 'int'
| | | |-value: Int 2
| | | `-IntegerLiteral 0x5555d4bd0508 <col:40> 'int' 2
| | `-FullComment 0x5555d4c50330 <line:5589:5, line:5590:57>
| |   `-ParagraphComment 0x5555d4c50300 <line:5589:5, line:5590:57>
| |     |-TextComment 0x5555d4c502b0 <line:5589:5, col:61> Text=" Whether to include code patterns for language constructs"
| |     `-TextComment 0x5555d4c502d0 <line:5590:5, col:57> Text=" within the set of code completions, e.g., for loops."
| |-EnumConstantDecl 0x5555d4bd0608 <line:5598:3, col:41> col:3 CXCodeComplete_IncludeBriefComments 'int'
| | |-ConstantExpr 0x5555d4bd05e8 <col:41> 'int'
| | | |-value: Int 4
| | | `-IntegerLiteral 0x5555d4bd05c8 <col:41> 'int' 4
| | `-FullComment 0x5555d4c50420 <line:5595:5, line:5596:26>
| |   `-ParagraphComment 0x5555d4c503f0 <line:5595:5, line:5596:26>
| |     |-TextComment 0x5555d4c503a0 <line:5595:5, col:66> Text=" Whether to include brief documentation within the set of code"
| |     `-TextComment 0x5555d4c503c0 <line:5596:5, col:26> Text=" completions returned."
| |-EnumConstantDecl 0x5555d4bd06c8 <line:5605:3, col:33> col:3 CXCodeComplete_SkipPreamble 'int'
| | |-ConstantExpr 0x5555d4bd06a8 <col:33> 'int'
| | | |-value: Int 8
| | | `-IntegerLiteral 0x5555d4bd0688 <col:33> 'int' 8
| | `-FullComment 0x5555d4c50540 <line:5601:5, line:5603:71>
| |   `-ParagraphComment 0x5555d4c50510 <line:5601:5, line:5603:71>
| |     |-TextComment 0x5555d4c50490 <line:5601:5, col:80> Text=" Whether to speed up completion by omitting top- or namespace-level entities"
| |     |-TextComment 0x5555d4c504b0 <line:5602:5, col:75> Text=" defined in the preamble. There's no guarantee any particular entity is"
| |     `-TextComment 0x5555d4c504d0 <line:5603:5, col:71> Text=" omitted. This may be useful if the headers are indexed externally."
| `-EnumConstantDecl 0x5555d4bd0788 <line:5611:3, col:49> col:3 CXCodeComplete_IncludeCompletionsWithFixIts 'int'
|   |-ConstantExpr 0x5555d4bd0768 <col:49> 'int'
|   | |-value: Int 16
|   | `-IntegerLiteral 0x5555d4bd0748 <col:49> 'int' 16
|   `-FullComment 0x5555d4c50630 <line:5608:5, line:5609:60>
|     `-ParagraphComment 0x5555d4c50600 <line:5608:5, line:5609:60>
|       |-TextComment 0x5555d4c505b0 <line:5608:5, col:46> Text=" Whether to include completions with small"
|       `-TextComment 0x5555d4c505d0 <line:5609:5, col:60> Text=" fix-its, e.g. change '.' to '->' on member access, etc."
|-EnumDecl 0x5555d4bd0808 <line:5620:1, line:5748:1> line:5620:6 CXCompletionContext
| |-FullComment 0x5555d4c50770 <line:5615:3, line:5618:41>
| | |-ParagraphComment 0x5555d4c506d0 <line:5615:3, col:71>
| | | `-TextComment 0x5555d4c506a0 <col:3, col:71> Text=" Bits that represent the context under which completion is occurring."
| | `-ParagraphComment 0x5555d4c50740 <line:5617:3, line:5618:41>
| |   |-TextComment 0x5555d4c506f0 <line:5617:3, col:79> Text=" The enumerators in this enumeration may be bitwise-OR'd together if multiple"
| |   `-TextComment 0x5555d4c50710 <line:5618:3, col:41> Text=" contexts are occurring simultaneously."
| |-EnumConstantDecl 0x5555d4bd0938 <line:5625:3, col:35> col:3 CXCompletionContext_Unexposed 'int'
| | |-ConstantExpr 0x5555d4bd0918 <col:35> 'int'
| | | |-value: Int 0
| | | `-IntegerLiteral 0x5555d4bd08f8 <col:35> 'int' 0
| | `-FullComment 0x5555d4c50860 <line:5622:5, line:5623:76>
| |   `-ParagraphComment 0x5555d4c50830 <line:5622:5, line:5623:76>
| |     |-TextComment 0x5555d4c507e0 <line:5622:5, col:68> Text=" The context for completions is unexposed, as only Clang results"
| |     `-TextComment 0x5555d4c50800 <line:5623:5, col:76> Text=" should be included. (This is equivalent to having no context bits set.)"
| |-EnumConstantDecl 0x5555d4bd0a38 <line:5630:3, col:38> col:3 CXCompletionContext_AnyType 'int'
| | |-ConstantExpr 0x5555d4bd0a18 <col:33, col:38> 'int'
| | | |-value: Int 1
| | | `-BinaryOperator 0x5555d4bd09f8 <col:33, col:38> 'int' '<<'
| | |   |-IntegerLiteral 0x5555d4bd09b8 <col:33> 'int' 1
| | |   `-IntegerLiteral 0x5555d4bd09d8 <col:38> 'int' 0
| | `-FullComment 0x5555d4c50930 <line:5628:5, col:73>
| |   `-ParagraphComment 0x5555d4c50900 <col:5, col:73>
| |     `-TextComment 0x5555d4c508d0 <col:5, col:73> Text=" Completions for any possible type should be included in the results."
| |-EnumConstantDecl 0x5555d4bd0b38 <line:5636:3, col:39> col:3 CXCompletionContext_AnyValue 'int'
| | |-ConstantExpr 0x5555d4bd0b18 <col:34, col:39> 'int'
| | | |-value: Int 2
| | | `-BinaryOperator 0x5555d4bd0af8 <col:34, col:39> 'int' '<<'
| | |   |-IntegerLiteral 0x5555d4bd0ab8 <col:34> 'int' 1
| | |   `-IntegerLiteral 0x5555d4bd0ad8 <col:39> 'int' 1
| | `-FullComment 0x5555d4c50a20 <line:5633:5, line:5634:39>
| |   `-ParagraphComment 0x5555d4c509f0 <line:5633:5, line:5634:39>
| |     |-TextComment 0x5555d4c509a0 <line:5633:5, col:73> Text=" Completions for any possible value (variables, function calls, etc.)"
| |     `-TextComment 0x5555d4c509c0 <line:5634:5, col:39> Text=" should be included in the results."
| |-EnumConstantDecl 0x5555d4bd0f60 <line:5641:3, col:46> col:3 CXCompletionContext_ObjCObjectValue 'int'
| | |-ConstantExpr 0x5555d4bd0f40 <col:41, col:46> 'int'
| | | |-value: Int 4
| | | `-BinaryOperator 0x5555d4bd0bf8 <col:41, col:46> 'int' '<<'
| | |   |-IntegerLiteral 0x5555d4bd0bb8 <col:41> 'int' 1
| | |   `-IntegerLiteral 0x5555d4bd0bd8 <col:46> 'int' 2
| | `-FullComment 0x5555d4c50b10 <line:5638:5, line:5639:32>
| |   `-ParagraphComment 0x5555d4c50ae0 <line:5638:5, line:5639:32>
| |     |-TextComment 0x5555d4c50a90 <line:5638:5, col:72> Text=" Completions for values that resolve to an Objective-C object should"
| |     `-TextComment 0x5555d4c50ab0 <line:5639:5, col:32> Text=" be included in the results."
| |-EnumConstantDecl 0x5555d4bd1058 <line:5646:3, col:48> col:3 CXCompletionContext_ObjCSelectorValue 'int'
| | |-ConstantExpr 0x5555d4bd1038 <col:43, col:48> 'int'
| | | |-value: Int 8
| | | `-BinaryOperator 0x5555d4bd1018 <col:43, col:48> 'int' '<<'
| | |   |-IntegerLiteral 0x5555d4bd0fd8 <col:43> 'int' 1
| | |   `-IntegerLiteral 0x5555d4bd0ff8 <col:48> 'int' 3
| | `-FullComment 0x5555d4c50c00 <line:5643:5, line:5644:39>
| |   `-ParagraphComment 0x5555d4c50bd0 <line:5643:5, line:5644:39>
| |     |-TextComment 0x5555d4c50b80 <line:5643:5, col:67> Text=" Completions for values that resolve to an Objective-C selector"
| |     `-TextComment 0x5555d4c50ba0 <line:5644:5, col:39> Text=" should be included in the results."
| |-EnumConstantDecl 0x5555d4bd1158 <line:5651:3, col:48> col:3 CXCompletionContext_CXXClassTypeValue 'int'
| | |-ConstantExpr 0x5555d4bd1138 <col:43, col:48> 'int'
| | | |-value: Int 16
| | | `-BinaryOperator 0x5555d4bd1118 <col:43, col:48> 'int' '<<'
| | |   |-IntegerLiteral 0x5555d4bd10d8 <col:43> 'int' 1
| | |   `-IntegerLiteral 0x5555d4bd10f8 <col:48> 'int' 4
| | `-FullComment 0x5555d4c50cf0 <line:5648:5, line:5649:29>
| |   `-ParagraphComment 0x5555d4c50cc0 <line:5648:5, line:5649:29>
| |     |-TextComment 0x5555d4c50c70 <line:5648:5, col:70> Text=" Completions for values that resolve to a C++ class type should be"
| |     `-TextComment 0x5555d4c50c90 <line:5649:5, col:29> Text=" included in the results."
| |-EnumConstantDecl 0x5555d4bd1258 <line:5657:3, col:46> col:3 CXCompletionContext_DotMemberAccess 'int'
| | |-ConstantExpr 0x5555d4bd1238 <col:41, col:46> 'int'
| | | |-value: Int 32
| | | `-BinaryOperator 0x5555d4bd1218 <col:41, col:46> 'int' '<<'
| | |   |-IntegerLiteral 0x5555d4bd11d8 <col:41> 'int' 1
| | |   `-IntegerLiteral 0x5555d4bd11f8 <col:46> 'int' 5
| | `-FullComment 0x5555d4c50de0 <line:5654:5, line:5655:48>
| |   `-ParagraphComment 0x5555d4c50db0 <line:5654:5, line:5655:48>
| |     |-TextComment 0x5555d4c50d60 <line:5654:5, col:70> Text=" Completions for fields of the member being accessed using the dot"
| |     `-TextComment 0x5555d4c50d80 <line:5655:5, col:48> Text=" operator should be included in the results."
| |-EnumConstantDecl 0x5555d4bd1358 <line:5662:3, col:48> col:3 CXCompletionContext_ArrowMemberAccess 'int'
| | |-ConstantExpr 0x5555d4bd1338 <col:43, col:48> 'int'
| | | |-value: Int 64
| | | `-BinaryOperator 0x5555d4bd1318 <col:43, col:48> 'int' '<<'
| | |   |-IntegerLiteral 0x5555d4bd12d8 <col:43> 'int' 1
| | |   `-IntegerLiteral 0x5555d4bd12f8 <col:48> 'int' 6
| | `-FullComment 0x5555d4c50ed0 <line:5659:5, line:5660:48>
| |   `-ParagraphComment 0x5555d4c50ea0 <line:5659:5, line:5660:48>
| |     |-TextComment 0x5555d4c50e50 <line:5659:5, col:72> Text=" Completions for fields of the member being accessed using the arrow"
| |     `-TextComment 0x5555d4c50e70 <line:5660:5, col:48> Text=" operator should be included in the results."
| |-EnumConstantDecl 0x5555d4bd1458 <line:5667:3, col:49> col:3 CXCompletionContext_ObjCPropertyAccess 'int'
| | |-ConstantExpr 0x5555d4bd1438 <col:44, col:49> 'int'
| | | |-value: Int 128
| | | `-BinaryOperator 0x5555d4bd1418 <col:44, col:49> 'int' '<<'
| | |   |-IntegerLiteral 0x5555d4bd13d8 <col:44> 'int' 1
| | |   `-IntegerLiteral 0x5555d4bd13f8 <col:49> 'int' 7
| | `-FullComment 0x5555d4c50fc0 <line:5664:5, line:5665:62>
| |   `-ParagraphComment 0x5555d4c50f90 <line:5664:5, line:5665:62>
| |     |-TextComment 0x5555d4c50f40 <line:5664:5, col:72> Text=" Completions for properties of the Objective-C object being accessed"
| |     `-TextComment 0x5555d4c50f60 <line:5665:5, col:62> Text=" using the dot operator should be included in the results."
| |-EnumConstantDecl 0x5555d4bd1558 <line:5672:3, col:38> col:3 CXCompletionContext_EnumTag 'int'
| | |-ConstantExpr 0x5555d4bd1538 <col:33, col:38> 'int'
| | | |-value: Int 256
| | | `-BinaryOperator 0x5555d4bd1518 <col:33, col:38> 'int' '<<'
| | |   |-IntegerLiteral 0x5555d4bd14d8 <col:33> 'int' 1
| | |   `-IntegerLiteral 0x5555d4bd14f8 <col:38> 'int' 8
| | `-FullComment 0x5555d4c51090 <line:5670:5, col:65>
| |   `-ParagraphComment 0x5555d4c51060 <col:5, col:65>
| |     `-TextComment 0x5555d4c51030 <col:5, col:65> Text=" Completions for enum tags should be included in the results."
| |-EnumConstantDecl 0x5555d4bd1658 <line:5676:3, col:39> col:3 CXCompletionContext_UnionTag 'int'
| | |-ConstantExpr 0x5555d4bd1638 <col:34, col:39> 'int'
| | | |-value: Int 512
| | | `-BinaryOperator 0x5555d4bd1618 <col:34, col:39> 'int' '<<'
| | |   |-IntegerLiteral 0x5555d4bd15d8 <col:34> 'int' 1
| | |   `-IntegerLiteral 0x5555d4bd15f8 <col:39> 'int' 9
| | `-FullComment 0x5555d4c51160 <line:5674:5, col:66>
| |   `-ParagraphComment 0x5555d4c51130 <col:5, col:66>
| |     `-TextComment 0x5555d4c51100 <col:5, col:66> Text=" Completions for union tags should be included in the results."
| |-EnumConstantDecl 0x5555d4bd1758 <line:5680:3, col:40> col:3 CXCompletionContext_StructTag 'int'
| | |-ConstantExpr 0x5555d4bd1738 <col:35, col:40> 'int'
| | | |-value: Int 1024
| | | `-BinaryOperator 0x5555d4bd1718 <col:35, col:40> 'int' '<<'
| | |   |-IntegerLiteral 0x5555d4bd16d8 <col:35> 'int' 1
| | |   `-IntegerLiteral 0x5555d4bd16f8 <col:40> 'int' 10
| | `-FullComment 0x5555d4c51230 <line:5678:5, col:67>
| |   `-ParagraphComment 0x5555d4c51200 <col:5, col:67>
| |     `-TextComment 0x5555d4c511d0 <col:5, col:67> Text=" Completions for struct tags should be included in the results."
| |-EnumConstantDecl 0x5555d4bd1858 <line:5685:3, col:39> col:3 CXCompletionContext_ClassTag 'int'
| | |-ConstantExpr 0x5555d4bd1838 <col:34, col:39> 'int'
| | | |-value: Int 2048
| | | `-BinaryOperator 0x5555d4bd1818 <col:34, col:39> 'int' '<<'
| | |   |-IntegerLiteral 0x5555d4bd17d8 <col:34> 'int' 1
| | |   `-IntegerLiteral 0x5555d4bd17f8 <col:39> 'int' 11
| | `-FullComment 0x5555d4c51300 <line:5683:5, col:71>
| |   `-ParagraphComment 0x5555d4c512d0 <col:5, col:71>
| |     `-TextComment 0x5555d4c512a0 <col:5, col:71> Text=" Completions for C++ class names should be included in the results."
| |-EnumConstantDecl 0x5555d4bd1958 <line:5690:3, col:40> col:3 CXCompletionContext_Namespace 'int'
| | |-ConstantExpr 0x5555d4bd1938 <col:35, col:40> 'int'
| | | |-value: Int 4096
| | | `-BinaryOperator 0x5555d4bd1918 <col:35, col:40> 'int' '<<'
| | |   |-IntegerLiteral 0x5555d4bd18d8 <col:35> 'int' 1
| | |   `-IntegerLiteral 0x5555d4bd18f8 <col:40> 'int' 12
| | `-FullComment 0x5555d4c513f0 <line:5687:5, line:5688:29>
| |   `-ParagraphComment 0x5555d4c513c0 <line:5687:5, line:5688:29>
| |     |-TextComment 0x5555d4c51370 <line:5687:5, col:67> Text=" Completions for C++ namespaces and namespace aliases should be"
| |     `-TextComment 0x5555d4c51390 <line:5688:5, col:29> Text=" included in the results."
| |-EnumConstantDecl 0x5555d4bd1a58 <line:5695:3, col:50> col:3 CXCompletionContext_NestedNameSpecifier 'int'
| | |-ConstantExpr 0x5555d4bd1a38 <col:45, col:50> 'int'
| | | |-value: Int 8192
| | | `-BinaryOperator 0x5555d4bd1a18 <col:45, col:50> 'int' '<<'
| | |   |-IntegerLiteral 0x5555d4bd19d8 <col:45> 'int' 1
| | |   `-IntegerLiteral 0x5555d4bd19f8 <col:50> 'int' 13
| | `-FullComment 0x5555d4c514e0 <line:5692:5, line:5693:17>
| |   `-ParagraphComment 0x5555d4c514b0 <line:5692:5, line:5693:17>
| |     |-TextComment 0x5555d4c51460 <line:5692:5, col:69> Text=" Completions for C++ nested name specifiers should be included in"
| |     `-TextComment 0x5555d4c51480 <line:5693:5, col:17> Text=" the results."
| |-EnumConstantDecl 0x5555d4bd1b58 <line:5701:3, col:44> col:3 CXCompletionContext_ObjCInterface 'int'
| | |-ConstantExpr 0x5555d4bd1b38 <col:39, col:44> 'int'
| | | |-value: Int 16384
| | | `-BinaryOperator 0x5555d4bd1b18 <col:39, col:44> 'int' '<<'
| | |   |-IntegerLiteral 0x5555d4bd1ad8 <col:39> 'int' 1
| | |   `-IntegerLiteral 0x5555d4bd1af8 <col:44> 'int' 14
| | `-FullComment 0x5555d4c515d0 <line:5698:5, line:5699:20>
| |   `-ParagraphComment 0x5555d4c515a0 <line:5698:5, line:5699:20>
| |     |-TextComment 0x5555d4c51550 <line:5698:5, col:72> Text=" Completions for Objective-C interfaces (classes) should be included"
| |     `-TextComment 0x5555d4c51570 <line:5699:5, col:20> Text=" in the results."
| |-EnumConstantDecl 0x5555d4bd1c58 <line:5706:3, col:43> col:3 CXCompletionContext_ObjCProtocol 'int'
| | |-ConstantExpr 0x5555d4bd1c38 <col:38, col:43> 'int'
| | | |-value: Int 32768
| | | `-BinaryOperator 0x5555d4bd1c18 <col:38, col:43> 'int' '<<'
| | |   |-IntegerLiteral 0x5555d4bd1bd8 <col:38> 'int' 1
| | |   `-IntegerLiteral 0x5555d4bd1bf8 <col:43> 'int' 15
| | `-FullComment 0x5555d4c516c0 <line:5703:5, line:5704:17>
| |   `-ParagraphComment 0x5555d4c51690 <line:5703:5, line:5704:17>
| |     |-TextComment 0x5555d4c51640 <line:5703:5, col:64> Text=" Completions for Objective-C protocols should be included in"
| |     `-TextComment 0x5555d4c51660 <line:5704:5, col:17> Text=" the results."
| |-EnumConstantDecl 0x5555d4bd1d58 <line:5711:3, col:43> col:3 CXCompletionContext_ObjCCategory 'int'
| | |-ConstantExpr 0x5555d4bd1d38 <col:38, col:43> 'int'
| | | |-value: Int 65536
| | | `-BinaryOperator 0x5555d4bd1d18 <col:38, col:43> 'int' '<<'
| | |   |-IntegerLiteral 0x5555d4bd1cd8 <col:38> 'int' 1
| | |   `-IntegerLiteral 0x5555d4bd1cf8 <col:43> 'int' 16
| | `-FullComment 0x5555d4c517b0 <line:5708:5, line:5709:17>
| |   `-ParagraphComment 0x5555d4c51780 <line:5708:5, line:5709:17>
| |     |-TextComment 0x5555d4c51730 <line:5708:5, col:65> Text=" Completions for Objective-C categories should be included in"
| |     `-TextComment 0x5555d4c51750 <line:5709:5, col:17> Text=" the results."
| |-EnumConstantDecl 0x5555d4bd1e58 <line:5716:3, col:50> col:3 CXCompletionContext_ObjCInstanceMessage 'int'
| | |-ConstantExpr 0x5555d4bd1e38 <col:45, col:50> 'int'
| | | |-value: Int 131072
| | | `-BinaryOperator 0x5555d4bd1e18 <col:45, col:50> 'int' '<<'
| | |   |-IntegerLiteral 0x5555d4bd1dd8 <col:45> 'int' 1
| | |   `-IntegerLiteral 0x5555d4bd1df8 <col:50> 'int' 17
| | `-FullComment 0x5555d4c518a0 <line:5713:5, line:5714:20>
| |   `-ParagraphComment 0x5555d4c51870 <line:5713:5, line:5714:20>
| |     |-TextComment 0x5555d4c51820 <line:5713:5, col:69> Text=" Completions for Objective-C instance messages should be included"
| |     `-TextComment 0x5555d4c51840 <line:5714:5, col:20> Text=" in the results."
| |-EnumConstantDecl 0x5555d4bd2370 <line:5721:3, col:47> col:3 CXCompletionContext_ObjCClassMessage 'int'
| | |-ConstantExpr 0x5555d4bd2350 <col:42, col:47> 'int'
| | | |-value: Int 262144
| | | `-BinaryOperator 0x5555d4bd1f18 <col:42, col:47> 'int' '<<'
| | |   |-IntegerLiteral 0x5555d4bd1ed8 <col:42> 'int' 1
| | |   `-IntegerLiteral 0x5555d4bd1ef8 <col:47> 'int' 18
| | `-FullComment 0x5555d4c51990 <line:5718:5, line:5719:17>
| |   `-ParagraphComment 0x5555d4c51960 <line:5718:5, line:5719:17>
| |     |-TextComment 0x5555d4c51910 <line:5718:5, col:69> Text=" Completions for Objective-C class messages should be included in"
| |     `-TextComment 0x5555d4c51930 <line:5719:5, col:17> Text=" the results."
| |-EnumConstantDecl 0x5555d4bd2468 <line:5726:3, col:47> col:3 CXCompletionContext_ObjCSelectorName 'int'
| | |-ConstantExpr 0x5555d4bd2448 <col:42, col:47> 'int'
| | | |-value: Int 524288
| | | `-BinaryOperator 0x5555d4bd2428 <col:42, col:47> 'int' '<<'
| | |   |-IntegerLiteral 0x5555d4bd23e8 <col:42> 'int' 1
| | |   `-IntegerLiteral 0x5555d4bd2408 <col:47> 'int' 19
| | `-FullComment 0x5555d4c51a80 <line:5723:5, line:5724:17>
| |   `-ParagraphComment 0x5555d4c51a50 <line:5723:5, line:5724:17>
| |     |-TextComment 0x5555d4c51a00 <line:5723:5, col:69> Text=" Completions for Objective-C selector names should be included in"
| |     `-TextComment 0x5555d4c51a20 <line:5724:5, col:17> Text=" the results."
| |-EnumConstantDecl 0x5555d4bd2568 <line:5732:3, col:40> col:3 CXCompletionContext_MacroName 'int'
| | |-ConstantExpr 0x5555d4bd2548 <col:35, col:40> 'int'
| | | |-value: Int 1048576
| | | `-BinaryOperator 0x5555d4bd2528 <col:35, col:40> 'int' '<<'
| | |   |-IntegerLiteral 0x5555d4bd24e8 <col:35> 'int' 1
| | |   `-IntegerLiteral 0x5555d4bd2508 <col:40> 'int' 20
| | `-FullComment 0x5555d4c51b70 <line:5729:5, line:5730:17>
| |   `-ParagraphComment 0x5555d4c51b40 <line:5729:5, line:5730:17>
| |     |-TextComment 0x5555d4c51af0 <line:5729:5, col:67> Text=" Completions for preprocessor macro names should be included in"
| |     `-TextComment 0x5555d4c51b10 <line:5730:5, col:17> Text=" the results."
| |-EnumConstantDecl 0x5555d4bd2668 <line:5737:3, col:46> col:3 CXCompletionContext_NaturalLanguage 'int'
| | |-ConstantExpr 0x5555d4bd2648 <col:41, col:46> 'int'
| | | |-value: Int 2097152
| | | `-BinaryOperator 0x5555d4bd2628 <col:41, col:46> 'int' '<<'
| | |   |-IntegerLiteral 0x5555d4bd25e8 <col:41> 'int' 1
| | |   `-IntegerLiteral 0x5555d4bd2608 <col:46> 'int' 21
| | `-FullComment 0x5555d4c51c40 <line:5735:5, col:68>
| |   `-ParagraphComment 0x5555d4c51c10 <col:5, col:68>
| |     `-TextComment 0x5555d4c51be0 <col:5, col:68> Text=" Natural language completions should be included in the results."
| |-EnumConstantDecl 0x5555d4bd2768 <line:5742:3, col:43> col:3 CXCompletionContext_IncludedFile 'int'
| | |-ConstantExpr 0x5555d4bd2748 <col:38, col:43> 'int'
| | | |-value: Int 4194304
| | | `-BinaryOperator 0x5555d4bd2728 <col:38, col:43> 'int' '<<'
| | |   |-IntegerLiteral 0x5555d4bd26e8 <col:38> 'int' 1
| | |   `-IntegerLiteral 0x5555d4bd2708 <col:43> 'int' 22
| | `-FullComment 0x5555d4c51d10 <line:5740:5, col:65>
| |   `-ParagraphComment 0x5555d4c51ce0 <col:5, col:65>
| |     `-TextComment 0x5555d4c51cb0 <col:5, col:65> Text=" #include file completions should be included in the results."
| `-EnumConstantDecl 0x5555d4bd28e8 <line:5747:3, col:47> col:3 CXCompletionContext_Unknown 'int'
|   |-ConstantExpr 0x5555d4bd28c8 <col:33, col:47> 'int'
|   | |-value: Int 8388607
|   | `-ParenExpr 0x5555d4bd28a8 <col:33, col:47> 'int'
|   |   `-BinaryOperator 0x5555d4bd2888 <col:34, col:46> 'int' '-'
|   |     |-ParenExpr 0x5555d4bd2848 <col:34, col:42> 'int'
|   |     | `-BinaryOperator 0x5555d4bd2828 <col:35, col:40> 'int' '<<'
|   |     |   |-IntegerLiteral 0x5555d4bd27e8 <col:35> 'int' 1
|   |     |   `-IntegerLiteral 0x5555d4bd2808 <col:40> 'int' 23
|   |     `-IntegerLiteral 0x5555d4bd2868 <col:46> 'int' 1
|   `-FullComment 0x5555d4c51de0 <line:5745:5, col:57>
|     `-ParagraphComment 0x5555d4c51db0 <col:5, col:57>
|       `-TextComment 0x5555d4c51d80 <col:5, col:57> Text=" The current context is unknown, so set all contexts."
|-FunctionDecl 0x5555d4bd2a28 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:5754:62> col:25 clang_defaultCodeCompleteOptions 'unsigned int (void)'
| |-VisibilityAttr 0x5555d4bd2ad0 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c51f60 </workspace/clang-c/Index.h:5751:3, line:5753:1>
|   `-ParagraphComment 0x5555d4c51f30 <line:5751:3, line:5753:1>
|     |-TextComment 0x5555d4c51e50 <line:5751:3, col:63> Text=" Returns a default set of code-completion options that can be"
|     |-TextComment 0x5555d4c51e80 <line:5752:3, col:12> Text=" passed to"
|     |-InlineCommandComment 0x5555d4c51ed0 <col:13, col:14> Name="c" RenderMonospaced Arg[0]="clang_codeCompleteAt()."
|     `-TextComment 0x5555d4c51ef0 <line:5753:1> Text=" "
|-FunctionDecl 0x5555d4bd3020 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:5829:66> line:5826:1 clang_codeCompleteAt 'CXCodeCompleteResults *(CXTranslationUnit, const char *, unsigned int, unsigned int, struct CXUnsavedFile *, unsigned int, unsigned int)'
| |-ParmVarDecl 0x5555d4bd2b88 <col:22, col:40> col:40 TU 'CXTranslationUnit':'struct CXTranslationUnitImpl *'
| |-ParmVarDecl 0x5555d4bd2c08 <col:44, col:56> col:56 complete_filename 'const char *'
| |-ParmVarDecl 0x5555d4bd2c88 <line:5827:22, col:31> col:31 complete_line 'unsigned int'
| |-ParmVarDecl 0x5555d4bd2d08 <col:46, col:55> col:55 complete_column 'unsigned int'
| |-ParmVarDecl 0x5555d4bd2d98 <line:5828:22, col:44> col:44 unsaved_files 'struct CXUnsavedFile *'
| |-ParmVarDecl 0x5555d4bd2e18 <line:5829:22, col:31> col:31 num_unsaved_files 'unsigned int'
| |-ParmVarDecl 0x5555d4bd2e98 <col:50, col:59> col:59 options 'unsigned int'
| |-VisibilityAttr 0x5555d4bd3100 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c53430 </workspace/clang-c/Index.h:5757:3, line:5822:34>
|   |-ParagraphComment 0x5555d4c52000 <line:5757:3, col:69>
|   | `-TextComment 0x5555d4c51fd0 <col:3, col:69> Text=" Perform code completion at a given location in a translation unit."
|   |-ParagraphComment 0x5555d4c52230 <line:5759:3, line:5768:57>
|   | |-TextComment 0x5555d4c52020 <line:5759:3, col:73> Text=" This function performs code completion at a particular file, line, and"
|   | |-TextComment 0x5555d4c52040 <line:5760:3, col:70> Text=" column within source code, providing results that suggest potential"
|   | |-TextComment 0x5555d4c52060 <line:5761:3, col:72> Text=" code snippets based on the context of the completion. The basic model"
|   | |-TextComment 0x5555d4c52080 <line:5762:3, col:71> Text=" for code completion is that Clang will parse a complete source file,"
|   | |-TextComment 0x5555d4c520a0 <line:5763:3, col:74> Text=" performing syntax checking up to the location where code-completion has"
|   | |-TextComment 0x5555d4c520c0 <line:5764:3, col:75> Text=" been requested. At that point, a special code-completion token is passed"
|   | |-TextComment 0x5555d4c520e0 <line:5765:3, col:74> Text=" to the parser, which recognizes this token and determines, based on the"
|   | |-TextComment 0x5555d4c52100 <line:5766:3, col:69> Text=" current location in the C/Objective-C/C++ grammar and the state of"
|   | |-TextComment 0x5555d4c52120 <line:5767:3, col:72> Text=" semantic analysis, what completions to provide. These completions are"
|   | |-TextComment 0x5555d4c52140 <line:5768:3, col:22> Text=" returned via a new "
|   | |-InlineCommandComment 0x5555d4c52190 <col:23, col:24> Name="c" RenderMonospaced Arg[0]="CXCodeCompleteResults"
|   | `-TextComment 0x5555d4c521b0 <col:47, col:57> Text=" structure."
|   |-ParagraphComment 0x5555d4c52600 <line:5770:3, line:5785:24>
|   | |-TextComment 0x5555d4c52250 <line:5770:3, col:73> Text=" Code completion itself is meant to be triggered by the client when the"
|   | |-TextComment 0x5555d4c52270 <line:5771:3, col:70> Text=" user types punctuation characters or whitespace, at which point the"
|   | |-TextComment 0x5555d4c52290 <line:5772:3, col:75> Text=" code-completion location will coincide with the cursor. For example, if "
|   | |-InlineCommandComment 0x5555d4c522d0 <col:76, col:77> Name="c" RenderMonospaced Arg[0]="p"
|   | |-TextComment 0x5555d4c522f0 <line:5773:3, col:74> Text=" is a pointer, code-completion might be triggered after the "-" and then"
|   | |-TextComment 0x5555d4c52310 <line:5774:3, col:20> Text=" after the ">" in "
|   | |-InlineCommandComment 0x5555d4c52350 <col:21, col:22> Name="c" RenderMonospaced Arg[0]="p->."
|   | |-TextComment 0x5555d4c52370 <col:28, col:79> Text=" When the code-completion location is after the ">","
|   | |-TextComment 0x5555d4c52390 <line:5775:3, col:76> Text=" the completion results will provide, e.g., the members of the struct that"
|   | |-TextComment 0x5555d4c523b0 <line:5776:3, col:73> Text=" "p" points to. The client is responsible for placing the cursor at the"
|   | |-TextComment 0x5555d4c523d0 <line:5777:3, col:75> Text=" beginning of the token currently being typed, then filtering the results"
|   | |-TextComment 0x5555d4c523f0 <line:5778:3, col:76> Text=" based on the contents of the token. For example, when code-completing for"
|   | |-TextComment 0x5555d4c52410 <line:5779:3, col:18> Text=" the expression "
|   | |-InlineCommandComment 0x5555d4c52450 <col:19, col:20> Name="c" RenderMonospaced Arg[0]="p->get,"
|   | |-TextComment 0x5555d4c52470 <col:29, col:78> Text=" the client should provide the location just after"
|   | |-TextComment 0x5555d4c52490 <line:5780:3, col:78> Text=" the ">" (e.g., pointing at the "g") to this code-completion hook. Then, the"
|   | |-TextComment 0x5555d4c524b0 <line:5781:3, col:78> Text=" client can filter the results based on the current token text ("get"), only"
|   | |-TextComment 0x5555d4c524d0 <line:5782:3, col:76> Text=" showing those results that start with "get". The intent of this interface"
|   | |-TextComment 0x5555d4c524f0 <line:5783:3, col:76> Text=" is to separate the relatively high-latency acquisition of code-completion"
|   | |-TextComment 0x5555d4c52510 <line:5784:3, col:77> Text=" results from the filtering of results on a per-character basis, which must"
|   | `-TextComment 0x5555d4c52530 <line:5785:3, col:24> Text=" have a lower latency."
|   |-ParagraphComment 0x5555d4c52650 <line:5787:3>
|   | `-TextComment 0x5555d4c52620 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c52670 <col:4, line:5791:58> [in] implicitly Param="TU" ParamIndex=0
|   | `-ParagraphComment 0x5555d4c52820 <line:5787:13, line:5791:58>
|   |   |-TextComment 0x5555d4c526d0 <line:5787:13, col:65> Text=" The translation unit in which code-completion should"
|   |   |-TextComment 0x5555d4c526f0 <line:5788:3, col:64> Text=" occur. The source files for this translation unit need not be"
|   |   |-TextComment 0x5555d4c52710 <line:5789:3, col:68> Text=" completely up-to-date (and the contents of those source files may"
|   |   |-TextComment 0x5555d4c52730 <line:5790:3, col:21> Text=" be overridden via "
|   |   |-InlineCommandComment 0x5555d4c52780 <col:22, col:23> Name="p" RenderMonospaced Arg[0]="unsaved_files)."
|   |   |-TextComment 0x5555d4c527a0 <col:40, col:66> Text=" Cursors referring into the"
|   |   `-TextComment 0x5555d4c527c0 <line:5791:3, col:58> Text=" translation unit may be invalidated by this invocation."
|   |-ParagraphComment 0x5555d4c52870 <line:5793:3>
|   | `-TextComment 0x5555d4c52840 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c52890 <col:4, line:5795:36> [in] implicitly Param="complete_filename" ParamIndex=1
|   | `-ParagraphComment 0x5555d4c52980 <line:5793:28, line:5795:36>
|   |   |-TextComment 0x5555d4c52900 <line:5793:28, col:66> Text=" The name of the source file where code"
|   |   |-TextComment 0x5555d4c52920 <line:5794:3, col:64> Text=" completion should be performed. This filename may be any file"
|   |   `-TextComment 0x5555d4c52940 <line:5795:3, col:36> Text=" included in the translation unit."
|   |-ParagraphComment 0x5555d4c529d0 <line:5797:3>
|   | `-TextComment 0x5555d4c529a0 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c529f0 <col:4, col:71> [in] implicitly Param="complete_line" ParamIndex=2
|   | `-ParagraphComment 0x5555d4c52a80 <col:24, col:71>
|   |   `-TextComment 0x5555d4c52a50 <col:24, col:71> Text=" The line at which code-completion should occur."
|   |-ParagraphComment 0x5555d4c52ad0 <line:5799:3>
|   | `-TextComment 0x5555d4c52aa0 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c52af0 <col:4, line:5801:71> [in] implicitly Param="complete_column" ParamIndex=3
|   | `-ParagraphComment 0x5555d4c52bd0 <line:5799:26, line:5801:71>
|   |   |-TextComment 0x5555d4c52b50 <line:5799:26, col:75> Text=" The column at which code-completion should occur."
|   |   |-TextComment 0x5555d4c52b70 <line:5800:3, col:76> Text=" Note that the column should point just after the syntactic construct that"
|   |   `-TextComment 0x5555d4c52b90 <line:5801:3, col:71> Text=" initiated code completion, and not in the middle of a lexical token."
|   |-ParagraphComment 0x5555d4c52c20 <line:5803:3>
|   | `-TextComment 0x5555d4c52bf0 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c52c40 <col:4, line:5808:25> [in] implicitly Param="unsaved_files" ParamIndex=4
|   | `-ParagraphComment 0x5555d4c52d90 <line:5803:24, line:5808:25>
|   |   |-TextComment 0x5555d4c52ca0 <line:5803:24, col:70> Text=" the Files that have not yet been saved to disk"
|   |   |-TextComment 0x5555d4c52cc0 <line:5804:3, col:68> Text=" but may be required for parsing or code completion, including the"
|   |   |-TextComment 0x5555d4c52ce0 <line:5805:3, col:69> Text=" contents of those files.  The contents and name of these files (as"
|   |   |-TextComment 0x5555d4c52d00 <line:5806:3, col:64> Text=" specified by CXUnsavedFile) are copied when necessary, so the"
|   |   |-TextComment 0x5555d4c52d20 <line:5807:3, col:66> Text=" client only needs to guarantee their validity until the call to"
|   |   `-TextComment 0x5555d4c52d40 <line:5808:3, col:25> Text=" this function returns."
|   |-ParagraphComment 0x5555d4c52de0 <line:5810:3>
|   | `-TextComment 0x5555d4c52db0 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c52e00 <col:4, col:68> [in] implicitly Param="num_unsaved_files" ParamIndex=5
|   | `-ParagraphComment 0x5555d4c52ef0 <col:28, col:68>
|   |   |-TextComment 0x5555d4c52e70 <col:28, col:66> Text=" The number of unsaved file entries in "
|   |   `-InlineCommandComment 0x5555d4c52ec0 <col:67, col:68> Name="p" RenderMonospaced Arg[0]="unsaved_files."
|   |-ParagraphComment 0x5555d4c52f40 <line:5813:3>
|   | `-TextComment 0x5555d4c52f10 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c52f60 <col:4, line:5817:30> [in] implicitly Param="options" ParamIndex=6
|   | `-ParagraphComment 0x5555d4c53120 <line:5813:18, line:5817:30>
|   |   |-TextComment 0x5555d4c52fc0 <line:5813:18, col:65> Text=" Extra options that control the behavior of code"
|   |   |-TextComment 0x5555d4c52fe0 <line:5814:3, col:66> Text=" completion, expressed as a bitwise OR of the enumerators of the"
|   |   |-TextComment 0x5555d4c53000 <line:5815:3, col:40> Text=" CXCodeComplete_Flags enumeration. The"
|   |   |-TextComment 0x5555d4c53020 <line:5816:3> Text=" "
|   |   |-InlineCommandComment 0x5555d4c53080 <col:4, col:5> Name="c" RenderMonospaced Arg[0]="clang_defaultCodeCompleteOptions()"
|   |   |-TextComment 0x5555d4c530a0 <col:41, col:71> Text=" function returns a default set"
|   |   `-TextComment 0x5555d4c530c0 <line:5817:3, col:30> Text=" of code-completion options."
|   |-ParagraphComment 0x5555d4c53170 <line:5819:3>
|   | `-TextComment 0x5555d4c53140 <col:3> Text=" "
|   `-BlockCommandComment 0x5555d4c53190 <col:4, line:5822:34> Name="returns"
|     `-ParagraphComment 0x5555d4c53370 <line:5819:12, line:5822:34>
|       |-TextComment 0x5555d4c531c0 <line:5819:12, col:33> Text=" If successful, a new "
|       |-InlineCommandComment 0x5555d4c53210 <col:34, col:35> Name="c" RenderMonospaced Arg[0]="CXCodeCompleteResults"
|       |-TextComment 0x5555d4c53230 <col:58, col:67> Text=" structure"
|       |-TextComment 0x5555d4c53250 <line:5820:3, col:65> Text=" containing code-completion results, which should eventually be"
|       |-TextComment 0x5555d4c53270 <line:5821:3, col:14> Text=" freed with "
|       |-InlineCommandComment 0x5555d4c532d0 <col:15, col:16> Name="c" RenderMonospaced Arg[0]="clang_disposeCodeCompleteResults()."
|       |-TextComment 0x5555d4c532f0 <col:53, col:60> Text=" If code"
|       `-TextComment 0x5555d4c53310 <line:5822:3, col:34> Text=" completion fails, returns NULL."
|-FunctionDecl 0x5555d4bd3590 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:5840:57> line:5839:6 clang_sortCodeCompletionResults 'void (CXCompletionResult *, unsigned int)'
| |-ParmVarDecl 0x5555d4bd31c0 <col:38, col:58> col:58 Results 'CXCompletionResult *'
| |-ParmVarDecl 0x5555d4bd3240 <line:5840:38, col:47> col:47 NumResults 'unsigned int'
| |-VisibilityAttr 0x5555d4bd3648 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c53780 </workspace/clang-c/Index.h:5832:3, line:5837:1>
|   |-ParagraphComment 0x5555d4c534f0 <line:5832:3, line:5833:9>
|   | |-TextComment 0x5555d4c534a0 <line:5832:3, col:68> Text=" Sort the code-completion results in case-insensitive alphabetical"
|   | `-TextComment 0x5555d4c534c0 <line:5833:3, col:9> Text=" order."
|   |-ParagraphComment 0x5555d4c53540 <line:5835:3>
|   | `-TextComment 0x5555d4c53510 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c53560 <col:4, line:5836:3> [in] implicitly Param="Results" ParamIndex=0
|   | `-ParagraphComment 0x5555d4c53610 <line:5835:18, line:5836:3>
|   |   |-TextComment 0x5555d4c535c0 <line:5835:18, col:45> Text=" The set of results to sort."
|   |   `-TextComment 0x5555d4c535e0 <line:5836:3> Text=" "
|   `-ParamCommandComment 0x5555d4c53630 <col:4, line:5837:1> [in] implicitly Param="NumResults" ParamIndex=1
|     `-ParagraphComment 0x5555d4c53740 <line:5836:21, line:5837:1>
|       |-TextComment 0x5555d4c53690 <line:5836:21, col:46> Text=" The number of results in "
|       |-InlineCommandComment 0x5555d4c536e0 <col:47, col:48> Name="p" RenderMonospaced Arg[0]="Results."
|       `-TextComment 0x5555d4c53700 <line:5837:1> Text=" "
|-FunctionDecl 0x5555d4bd37f8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:5846:69> col:6 clang_disposeCodeCompleteResults 'void (CXCodeCompleteResults *)'
| |-ParmVarDecl 0x5555d4bd3700 <col:39, col:62> col:62 Results 'CXCodeCompleteResults *'
| |-VisibilityAttr 0x5555d4bd38a8 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c53850 </workspace/clang-c/Index.h:5843:3, col:49>
|   `-ParagraphComment 0x5555d4c53820 <col:3, col:49>
|     `-TextComment 0x5555d4c537f0 <col:3, col:49> Text=" Free the given set of code-completion results."
|-FunctionDecl 0x5555d4bd3a60 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:5853:76> col:10 clang_codeCompleteGetNumDiagnostics 'unsigned int (CXCodeCompleteResults *)'
| |-ParmVarDecl 0x5555d4bd3960 <col:46, col:69> col:69 Results 'CXCodeCompleteResults *'
| |-VisibilityAttr 0x5555d4bd3b10 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c53940 </workspace/clang-c/Index.h:5849:3, line:5850:48>
|   `-ParagraphComment 0x5555d4c53910 <line:5849:3, line:5850:48>
|     |-TextComment 0x5555d4c538c0 <line:5849:3, col:60> Text=" Determine the number of diagnostics produced prior to the"
|     `-TextComment 0x5555d4c538e0 <line:5850:3, col:48> Text=" location where code completion was performed."
|-FunctionDecl 0x5555d4bd3d68 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:5866:60> line:5865:14 clang_codeCompleteGetDiagnostic 'CXDiagnostic (CXCodeCompleteResults *, unsigned int)'
| |-ParmVarDecl 0x5555d4bd3bd0 <col:46, col:69> col:69 Results 'CXCodeCompleteResults *'
| |-ParmVarDecl 0x5555d4bd3c50 <line:5866:46, col:55> col:55 Index 'unsigned int'
| |-VisibilityAttr 0x5555d4bd3e20 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c53d80 </workspace/clang-c/Index.h:5856:3, line:5863:1>
|   |-ParagraphComment 0x5555d4c539e0 <line:5856:3, col:67>
|   | `-TextComment 0x5555d4c539b0 <col:3, col:67> Text=" Retrieve a diagnostic associated with the given code completion."
|   |-ParagraphComment 0x5555d4c53a30 <line:5858:3>
|   | `-TextComment 0x5555d4c53a00 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c53a50 <col:4, line:5859:3> [in] implicitly Param="Results" ParamIndex=0
|   | `-ParagraphComment 0x5555d4c53b00 <line:5858:18, line:5859:3>
|   |   |-TextComment 0x5555d4c53ab0 <line:5858:18, col:55> Text=" the code completion results to query."
|   |   `-TextComment 0x5555d4c53ad0 <line:5859:3> Text=" "
|   |-ParamCommandComment 0x5555d4c53b20 <col:4, col:61> [in] implicitly Param="Index" ParamIndex=1
|   | `-ParagraphComment 0x5555d4c53bb0 <col:16, col:61>
|   |   `-TextComment 0x5555d4c53b80 <col:16, col:61> Text=" the zero-based diagnostic number to retrieve."
|   |-ParagraphComment 0x5555d4c53c00 <line:5861:3>
|   | `-TextComment 0x5555d4c53bd0 <col:3> Text=" "
|   `-BlockCommandComment 0x5555d4c53c20 <col:4, line:5863:1> Name="returns"
|     `-ParagraphComment 0x5555d4c53d30 <line:5861:12, line:5863:1>
|       |-TextComment 0x5555d4c53c50 <line:5861:12, col:67> Text=" the requested diagnostic. This diagnostic must be freed"
|       |-TextComment 0x5555d4c53c70 <line:5862:3, col:17> Text=" via a call to "
|       |-InlineCommandComment 0x5555d4c53cd0 <col:18, col:19> Name="c" RenderMonospaced Arg[0]="clang_disposeDiagnostic()."
|       `-TextComment 0x5555d4c53cf0 <line:5863:1> Text=" "
|-FunctionDecl 0x5555d4bd3fe0 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:5879:61> col:1 clang_codeCompleteGetContexts 'unsigned long long (CXCodeCompleteResults *)'
| |-ParmVarDecl 0x5555d4bd3ee0 <col:31, col:54> col:54 Results 'CXCodeCompleteResults *'
| |-VisibilityAttr 0x5555d4bd4090 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c54090 </workspace/clang-c/Index.h:5869:3, line:5875:48>
|   |-ParagraphComment 0x5555d4c53e40 <line:5869:3, line:5870:29>
|   | |-TextComment 0x5555d4c53df0 <line:5869:3, col:62> Text=" Determines what completions are appropriate for the context"
|   | `-TextComment 0x5555d4c53e10 <line:5870:3, col:29> Text=" the given code completion."
|   |-ParagraphComment 0x5555d4c53ea0 <line:5872:3>
|   | `-TextComment 0x5555d4c53e60 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c53ec0 <col:4, col:54> [in] implicitly Param="Results" ParamIndex=0
|   | `-ParagraphComment 0x5555d4c53f50 <col:18, col:54>
|   |   `-TextComment 0x5555d4c53f20 <col:18, col:54> Text=" the code completion results to query"
|   |-ParagraphComment 0x5555d4c53fa0 <line:5874:3>
|   | `-TextComment 0x5555d4c53f70 <col:3> Text=" "
|   `-BlockCommandComment 0x5555d4c53fc0 <col:4, line:5875:48> Name="returns"
|     `-ParagraphComment 0x5555d4c54040 <line:5874:12, line:5875:48>
|       |-TextComment 0x5555d4c53ff0 <line:5874:12, col:65> Text=" the kinds of completions that are appropriate for use"
|       `-TextComment 0x5555d4c54010 <line:5875:3, col:48> Text=" along with the given code completion results."
|-FunctionDecl 0x5555d4bd42f8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:5900:58> line:5899:1 clang_codeCompleteGetContainerKind 'enum CXCursorKind (CXCodeCompleteResults *, unsigned int *)'
| |-ParmVarDecl 0x5555d4bd4150 <col:36, col:59> col:59 Results 'CXCodeCompleteResults *'
| |-ParmVarDecl 0x5555d4bd41d0 <line:5900:36, col:46> col:46 IsIncomplete 'unsigned int *'
| |-VisibilityAttr 0x5555d4bd43b0 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c54570 </workspace/clang-c/Index.h:5882:3, line:5895:12>
|   |-ParagraphComment 0x5555d4c541d0 <line:5882:3, line:5886:24>
|   | |-TextComment 0x5555d4c54100 <line:5882:3, col:65> Text=" Returns the cursor kind for the container for the current code"
|   | |-TextComment 0x5555d4c54120 <line:5883:3, col:69> Text=" completion context. The container is only guaranteed to be set for"
|   | |-TextComment 0x5555d4c54140 <line:5884:3, col:73> Text=" contexts where a container exists (i.e. member accesses or Objective-C"
|   | |-TextComment 0x5555d4c54160 <line:5885:3, col:73> Text=" message sends); if there is not a container, this function will return"
|   | `-TextComment 0x5555d4c54180 <line:5886:3, col:24> Text=" CXCursor_InvalidCode."
|   |-ParagraphComment 0x5555d4c54220 <line:5888:3>
|   | `-TextComment 0x5555d4c541f0 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c54240 <col:4, col:54> [in] implicitly Param="Results" ParamIndex=0
|   | `-ParagraphComment 0x5555d4c542d0 <col:18, col:54>
|   |   `-TextComment 0x5555d4c542a0 <col:18, col:54> Text=" the code completion results to query"
|   |-ParagraphComment 0x5555d4c54320 <line:5890:3>
|   | `-TextComment 0x5555d4c542f0 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c54340 <col:4, line:5892:40> [in] implicitly Param="IsIncomplete" ParamIndex=1
|   | `-ParagraphComment 0x5555d4c54420 <line:5890:23, line:5892:40>
|   |   |-TextComment 0x5555d4c543a0 <line:5890:23, col:80> Text=" on return, this value will be false if Clang has complete"
|   |   |-TextComment 0x5555d4c543c0 <line:5891:3, col:67> Text=" information about the container. If Clang does not have complete"
|   |   `-TextComment 0x5555d4c543e0 <line:5892:3, col:40> Text=" information, this value will be true."
|   |-ParagraphComment 0x5555d4c54470 <line:5894:3>
|   | `-TextComment 0x5555d4c54440 <col:3> Text=" "
|   `-BlockCommandComment 0x5555d4c54490 <col:4, line:5895:12> Name="returns"
|     `-ParagraphComment 0x5555d4c54510 <line:5894:12, line:5895:12>
|       |-TextComment 0x5555d4c544c0 <line:5894:12, col:73> Text=" the container kind, or CXCursor_InvalidCode if there is not a"
|       `-TextComment 0x5555d4c544e0 <line:5895:3, col:12> Text=" container"
|-FunctionDecl 0x5555d4bd4718 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:5912:74> col:10 clang_codeCompleteGetContainerUSR 'CXString (CXCodeCompleteResults *)'
| |-ParmVarDecl 0x5555d4bd4470 <col:44, col:67> col:67 Results 'CXCodeCompleteResults *'
| |-VisibilityAttr 0x5555d4bd47c8 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c54880 </workspace/clang-c/Index.h:5903:3, line:5909:37>
|   |-ParagraphComment 0x5555d4c54660 <line:5903:3, line:5905:41>
|   | |-TextComment 0x5555d4c545e0 <line:5903:3, col:68> Text=" Returns the USR for the container for the current code completion"
|   | |-TextComment 0x5555d4c54600 <line:5904:3, col:69> Text=" context. If there is not a container for the current context, this"
|   | `-TextComment 0x5555d4c54620 <line:5905:3, col:41> Text=" function will return the empty string."
|   |-ParagraphComment 0x5555d4c546b0 <line:5907:3>
|   | `-TextComment 0x5555d4c54680 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c546d0 <col:4, col:54> [in] implicitly Param="Results" ParamIndex=0
|   | `-ParagraphComment 0x5555d4c54760 <col:18, col:54>
|   |   `-TextComment 0x5555d4c54730 <col:18, col:54> Text=" the code completion results to query"
|   |-ParagraphComment 0x5555d4c547b0 <line:5909:3>
|   | `-TextComment 0x5555d4c54780 <col:3> Text=" "
|   `-BlockCommandComment 0x5555d4c547d0 <col:4, col:37> Name="returns"
|     `-ParagraphComment 0x5555d4c54830 <col:12, col:37>
|       `-TextComment 0x5555d4c54800 <col:12, col:37> Text=" the USR for the container"
|-FunctionDecl 0x5555d4bd4910 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:5926:74> col:10 clang_codeCompleteGetObjCSelector 'CXString (CXCodeCompleteResults *)'
| |-ParmVarDecl 0x5555d4bd4880 <col:44, col:67> col:67 Results 'CXCodeCompleteResults *'
| |-VisibilityAttr 0x5555d4bd49c0 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c54bd0 </workspace/clang-c/Index.h:5915:3, line:5923:35>
|   |-ParagraphComment 0x5555d4c54990 <line:5915:3, line:5918:40>
|   | |-TextComment 0x5555d4c548f0 <line:5915:3, col:68> Text=" Returns the currently-entered selector for an Objective-C message"
|   | |-TextComment 0x5555d4c54910 <line:5916:3, col:71> Text=" send, formatted like "initWithFoo:bar:". Only guaranteed to return a"
|   | |-TextComment 0x5555d4c54930 <line:5917:3, col:67> Text=" non-empty string for CXCompletionContext_ObjCInstanceMessage and"
|   | `-TextComment 0x5555d4c54950 <line:5918:3, col:40> Text=" CXCompletionContext_ObjCClassMessage."
|   |-ParagraphComment 0x5555d4c549e0 <line:5920:3>
|   | `-TextComment 0x5555d4c549b0 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c54a00 <col:4, col:54> [in] implicitly Param="Results" ParamIndex=0
|   | `-ParagraphComment 0x5555d4c54a90 <col:18, col:54>
|   |   `-TextComment 0x5555d4c54a60 <col:18, col:54> Text=" the code completion results to query"
|   |-ParagraphComment 0x5555d4c54ae0 <line:5922:3>
|   | `-TextComment 0x5555d4c54ab0 <col:3> Text=" "
|   `-BlockCommandComment 0x5555d4c54b00 <col:4, line:5923:35> Name="returns"
|     `-ParagraphComment 0x5555d4c54b80 <line:5922:12, line:5923:35>
|       |-TextComment 0x5555d4c54b30 <line:5922:12, col:77> Text=" the selector (or partial selector) that has been entered thus far"
|       `-TextComment 0x5555d4c54b50 <line:5923:3, col:35> Text=" for an Objective-C message send."
|-FunctionDecl 0x5555d4bd4bb8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:5942:51> col:25 clang_getClangVersion 'CXString (void)'
| |-VisibilityAttr 0x5555d4bd4c60 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c54cc0 </workspace/clang-c/Index.h:5939:3, line:5940:76>
|   `-ParagraphComment 0x5555d4c54c90 <line:5939:3, line:5940:76>
|     |-TextComment 0x5555d4c54c40 <line:5939:3, col:67> Text=" Return a version string, suitable for showing to a user, but not"
|     `-TextComment 0x5555d4c54c60 <line:5940:3, col:76> Text="        intended to be parsed (the format is not guaranteed to be stable)."
|-FunctionDecl 0x5555d4bd4de8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:5950:65> col:21 clang_toggleCrashRecovery 'void (unsigned int)'
| |-ParmVarDecl 0x5555d4bd4d20 <col:47, col:56> col:56 isEnabled 'unsigned int'
| |-VisibilityAttr 0x5555d4bd4e98 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c54ec0 </workspace/clang-c/Index.h:5945:3, line:5948:60>
|   |-ParagraphComment 0x5555d4c54d60 <line:5945:3, col:33>
|   | `-TextComment 0x5555d4c54d30 <col:3, col:33> Text=" Enable/disable crash recovery."
|   |-ParagraphComment 0x5555d4c54db0 <line:5947:3>
|   | `-TextComment 0x5555d4c54d80 <col:3> Text=" "
|   `-ParamCommandComment 0x5555d4c54dd0 <col:4, line:5948:60> [in] implicitly Param="isEnabled" ParamIndex=0
|     `-ParagraphComment 0x5555d4c54e80 <line:5947:20, line:5948:60>
|       |-TextComment 0x5555d4c54e30 <line:5947:20, col:78> Text=" Flag to indicate if crash recovery is enabled.  A non-zero"
|       `-TextComment 0x5555d4c54e50 <line:5948:3, col:60> Text="        value enables crash recovery, while 0 disables it."
|-TypedefDecl 0x5555d4bd52d8 <line:5963:1, line:5966:60> line:5963:16 referenced CXInclusionVisitor 'void (*)(CXFile, CXSourceLocation *, unsigned int, CXClientData)'
| |-PointerType 0x5555d4bd5260 'void (*)(CXFile, CXSourceLocation *, unsigned int, CXClientData)'
| | `-ParenType 0x5555d4bd5200 'void (CXFile, CXSourceLocation *, unsigned int, CXClientData)' sugar
| |   `-FunctionProtoType 0x5555d4bd51b0 'void (CXFile, CXSourceLocation *, unsigned int, CXClientData)' cdecl
| |     |-BuiltinType 0x5555d4abdec0 'void'
| |     |-ElaboratedType 0x5555d4b64980 'CXFile' sugar
| |     | `-TypedefType 0x5555d4b64950 'CXFile' sugar
| |     |   |-Typedef 0x5555d4b648a0 'CXFile'
| |     |   `-PointerType 0x5555d4abe5e0 'void *'
| |     |     `-BuiltinType 0x5555d4abdec0 'void'
| |     |-PointerType 0x5555d4bd4fc0 'CXSourceLocation *'
| |     | `-ElaboratedType 0x5555d4b66e00 'CXSourceLocation' sugar
| |     |   `-TypedefType 0x5555d4b66dd0 'CXSourceLocation' sugar
| |     |     |-Typedef 0x5555d4b669f8 'CXSourceLocation'
| |     |     `-ElaboratedType 0x5555d4b669a0 'struct CXSourceLocation' sugar
| |     |       `-RecordType 0x5555d4b66820 'CXSourceLocation'
| |     |         `-Record 0x5555d4b66798 ''
| |     |-BuiltinType 0x5555d4abe000 'unsigned int'
| |     `-ElaboratedType 0x5555d4bb9a20 'CXClientData' sugar
| |       `-TypedefType 0x5555d4bb99f0 'CXClientData' sugar
| |         |-Typedef 0x5555d4b5d5a8 'CXClientData'
| |         `-PointerType 0x5555d4abe5e0 'void *'
| |           `-BuiltinType 0x5555d4abdec0 'void'
| `-FullComment 0x5555d4c55110 <line:5953:3, line:5961:74>
|   |-ParagraphComment 0x5555d4c54f80 <line:5953:3, line:5954:44>
|   | |-TextComment 0x5555d4c54f30 <line:5953:3, col:54> Text=" Visitor invoked for each file in a translation unit"
|   | `-TextComment 0x5555d4c54f50 <line:5954:3, col:44> Text="        (used with clang_getInclusions())."
|   `-ParagraphComment 0x5555d4c550e0 <line:5956:3, line:5961:74>
|     |-TextComment 0x5555d4c54fa0 <line:5956:3, col:74> Text=" This visitor function will be invoked by clang_getInclusions() for each"
|     |-TextComment 0x5555d4c54fc0 <line:5957:3, col:48> Text=" file included (either at the top-level or by "
|     |-TextComment 0x5555d4c54fe0 <col:49, col:50> Text="#"
|     |-TextComment 0x5555d4c55000 <col:51, col:76> Text="include directives) within"
|     |-TextComment 0x5555d4c55020 <line:5958:3, col:74> Text=" a translation unit.  The first argument is the file being included, and"
|     |-TextComment 0x5555d4c55040 <line:5959:3, col:67> Text=" the second and third arguments provide the inclusion stack.  The"
|     |-TextComment 0x5555d4c55060 <line:5960:3, col:65> Text=" array is sorted in order of immediate inclusion.  For example,"
|     `-TextComment 0x5555d4c55080 <line:5961:3, col:74> Text=" the first element refers to the location that included 'included_file'."
|-FunctionDecl 0x5555d4bd55f8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:5976:65> line:5974:21 clang_getInclusions 'void (CXTranslationUnit, CXInclusionVisitor, CXClientData)'
| |-ParmVarDecl 0x5555d4bd5388 <col:41, col:59> col:59 tu 'CXTranslationUnit':'struct CXTranslationUnitImpl *'
| |-ParmVarDecl 0x5555d4bd5460 <line:5975:41, col:60> col:60 visitor 'CXInclusionVisitor':'void (*)(CXFile, CXSourceLocation *, unsigned int, CXClientData)'
| |-ParmVarDecl 0x5555d4bd54d8 <line:5976:41, col:54> col:54 client_data 'CXClientData':'void *'
| |-VisibilityAttr 0x5555d4bd56b8 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c55250 </workspace/clang-c/Index.h:5969:3, line:5972:58>
|   `-ParagraphComment 0x5555d4c55220 <line:5969:3, line:5972:58>
|     |-TextComment 0x5555d4c55180 <line:5969:3, col:66> Text=" Visit the set of preprocessor inclusions in a translation unit."
|     |-TextComment 0x5555d4c551a0 <line:5970:3, col:77> Text="   The visitor function is called with the provided data for every included"
|     |-TextComment 0x5555d4c551c0 <line:5971:3, col:78> Text="   file.  This does not include headers included by the PCH file (unless one"
|     `-TextComment 0x5555d4c551e0 <line:5972:3, col:58> Text="   is inspecting the inclusions in the PCH file itself)."
|-EnumDecl 0x5555d4bd6900 <line:5978:9, line:5988:1> line:5978:9
| |-EnumConstantDecl 0x5555d4bd6a00 <line:5979:3, col:16> col:3 CXEval_Int 'int'
| | `-ConstantExpr 0x5555d4bd69e0 <col:16> 'int'
| |   |-value: Int 1
| |   `-IntegerLiteral 0x5555d4bd69c0 <col:16> 'int' 1
| |-EnumConstantDecl 0x5555d4bd6a90 <line:5980:3, col:18> col:3 CXEval_Float 'int'
| | `-ConstantExpr 0x5555d4bd6a70 <col:18> 'int'
| |   |-value: Int 2
| |   `-IntegerLiteral 0x5555d4bd6a50 <col:18> 'int' 2
| |-EnumConstantDecl 0x5555d4bd6b20 <line:5981:3, col:27> col:3 CXEval_ObjCStrLiteral 'int'
| | `-ConstantExpr 0x5555d4bd6b00 <col:27> 'int'
| |   |-value: Int 3
| |   `-IntegerLiteral 0x5555d4bd6ae0 <col:27> 'int' 3
| |-EnumConstantDecl 0x5555d4bd6bb0 <line:5982:3, col:23> col:3 CXEval_StrLiteral 'int'
| | `-ConstantExpr 0x5555d4bd6b90 <col:23> 'int'
| |   |-value: Int 4
| |   `-IntegerLiteral 0x5555d4bd6b70 <col:23> 'int' 4
| |-EnumConstantDecl 0x5555d4bd6c40 <line:5983:3, col:18> col:3 CXEval_CFStr 'int'
| | `-ConstantExpr 0x5555d4bd6c20 <col:18> 'int'
| |   |-value: Int 5
| |   `-IntegerLiteral 0x5555d4bd6c00 <col:18> 'int' 5
| |-EnumConstantDecl 0x5555d4bd6cd0 <line:5984:3, col:18> col:3 CXEval_Other 'int'
| | `-ConstantExpr 0x5555d4bd6cb0 <col:18> 'int'
| |   |-value: Int 6
| |   `-IntegerLiteral 0x5555d4bd6c90 <col:18> 'int' 6
| `-EnumConstantDecl 0x5555d4bd6d60 <line:5986:3, col:22> col:3 CXEval_UnExposed 'int'
|   `-ConstantExpr 0x5555d4bd6d40 <col:22> 'int'
|     |-value: Int 0
|     `-IntegerLiteral 0x5555d4bd6d20 <col:22> 'int' 0
|-TypedefDecl 0x5555d4bd6e08 <line:5978:1, line:5988:3> col:3 referenced CXEvalResultKind 'enum CXEvalResultKind':'CXEvalResultKind'
| `-ElaboratedType 0x5555d4bd6db0 'enum CXEvalResultKind' sugar
|   `-EnumType 0x5555d4bd69a0 'CXEvalResultKind'
|     `-Enum 0x5555d4bd6900 ''
|-TypedefDecl 0x5555d4bd6eb8 <line:5993:1, col:15> col:15 referenced CXEvalResult 'void *'
| |-PointerType 0x5555d4abe5e0 'void *'
| | `-BuiltinType 0x5555d4abdec0 'void'
| `-FullComment 0x5555d4c55320 <line:5991:3, col:32>
|   `-ParagraphComment 0x5555d4c552f0 <col:3, col:32>
|     `-TextComment 0x5555d4c552c0 <col:3, col:32> Text=" Evaluation result of a cursor"
|-FunctionDecl 0x5555d4bd7098 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:6001:61> col:29 clang_Cursor_Evaluate 'CXEvalResult (CXCursor)'
| |-ParmVarDecl 0x5555d4bd6fd0 <col:51, col:60> col:60 C 'CXCursor':'CXCursor'
| |-VisibilityAttr 0x5555d4bd7148 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c55460 </workspace/clang-c/Index.h:5996:3, line:5999:59>
|   `-ParagraphComment 0x5555d4c55430 <line:5996:3, line:5999:59>
|     |-TextComment 0x5555d4c55390 <line:5996:3, col:61> Text=" If cursor is a statement declaration tries to evaluate the"
|     |-TextComment 0x5555d4c553b0 <line:5997:3, col:68> Text=" statement and if its variable, tries to evaluate its initializer,"
|     |-TextComment 0x5555d4c553d0 <line:5998:3, col:31> Text=" into its corresponding type."
|     `-TextComment 0x5555d4c553f0 <line:5999:3, col:59> Text=" If it's an expression, tries to evaluate the expression."
|-FunctionDecl 0x5555d4bd7358 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:6006:72> col:33 clang_EvalResult_getKind 'CXEvalResultKind (CXEvalResult)'
| |-ParmVarDecl 0x5555d4bd7260 <col:58, col:71> col:71 E 'CXEvalResult':'void *'
| |-VisibilityAttr 0x5555d4bd7408 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c55530 </workspace/clang-c/Index.h:6004:3, col:44>
|   `-ParagraphComment 0x5555d4c55500 <col:3, col:44>
|     `-TextComment 0x5555d4c554d0 <col:3, col:44> Text=" Returns the kind of the evaluated result."
|-FunctionDecl 0x5555d4bd7580 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:6012:60> col:20 clang_EvalResult_getAsInt 'int (CXEvalResult)'
| |-ParmVarDecl 0x5555d4bd74b8 <col:46, col:59> col:59 E 'CXEvalResult':'void *'
| |-VisibilityAttr 0x5555d4bd7630 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c55620 </workspace/clang-c/Index.h:6009:3, line:6010:15>
|   `-ParagraphComment 0x5555d4c555f0 <line:6009:3, line:6010:15>
|     |-TextComment 0x5555d4c555a0 <line:6009:3, col:50> Text=" Returns the evaluation result as integer if the"
|     `-TextComment 0x5555d4c555c0 <line:6010:3, col:15> Text=" kind is Int."
|-FunctionDecl 0x5555d4bd77e0 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:6019:71> col:26 clang_EvalResult_getAsLongLong 'long long (CXEvalResult)'
| |-ParmVarDecl 0x5555d4bd76e8 <col:57, col:70> col:70 E 'CXEvalResult':'void *'
| |-VisibilityAttr 0x5555d4bd7890 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c55740 </workspace/clang-c/Index.h:6015:3, line:6017:43>
|   `-ParagraphComment 0x5555d4c55710 <line:6015:3, line:6017:43>
|     |-TextComment 0x5555d4c55690 <line:6015:3, col:62> Text=" Returns the evaluation result as a long long integer if the"
|     |-TextComment 0x5555d4c556b0 <line:6016:3, col:72> Text=" kind is Int. This prevents overflows that may happen if the result is"
|     `-TextComment 0x5555d4c556d0 <line:6017:3, col:43> Text=" returned with clang_EvalResult_getAsInt."
|-FunctionDecl 0x5555d4bd7b70 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:6025:70> col:25 clang_EvalResult_isUnsignedInt 'unsigned int (CXEvalResult)'
| |-ParmVarDecl 0x5555d4bd7aa8 <col:56, col:69> col:69 E 'CXEvalResult':'void *'
| |-VisibilityAttr 0x5555d4bd7c20 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c55830 </workspace/clang-c/Index.h:6022:3, line:6023:42>
|   `-ParagraphComment 0x5555d4c55800 <line:6022:3, line:6023:42>
|     |-TextComment 0x5555d4c557b0 <line:6022:3, col:65> Text=" Returns a non-zero value if the kind is Int and the evaluation"
|     `-TextComment 0x5555d4c557d0 <line:6023:3, col:42> Text=" result resulted in an unsigned integer."
|-FunctionDecl 0x5555d4bd7dd0 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:6032:46> col:1 clang_EvalResult_getAsUnsigned 'unsigned long long (CXEvalResult)'
| |-ParmVarDecl 0x5555d4bd7cd8 <col:32, col:45> col:45 E 'CXEvalResult':'void *'
| |-VisibilityAttr 0x5555d4bd7e80 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c55920 </workspace/clang-c/Index.h:6028:3, line:6029:66>
|   `-ParagraphComment 0x5555d4c558f0 <line:6028:3, line:6029:66>
|     |-TextComment 0x5555d4c558a0 <line:6028:3, col:58> Text=" Returns the evaluation result as an unsigned integer if"
|     `-TextComment 0x5555d4c558c0 <line:6029:3, col:66> Text=" the kind is Int and clang_EvalResult_isUnsignedInt is non-zero."
|-FunctionDecl 0x5555d4bd8030 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:6038:66> col:23 clang_EvalResult_getAsDouble 'double (CXEvalResult)'
| |-ParmVarDecl 0x5555d4bd7f38 <col:52, col:65> col:65 E 'CXEvalResult':'void *'
| |-VisibilityAttr 0x5555d4bd80e0 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c55a10 </workspace/clang-c/Index.h:6035:3, line:6036:18>
|   `-ParagraphComment 0x5555d4c559e0 <line:6035:3, line:6036:18>
|     |-TextComment 0x5555d4c55990 <line:6035:3, col:49> Text=" Returns the evaluation result as double if the"
|     `-TextComment 0x5555d4c559b0 <line:6036:3, col:18> Text=" kind is double."
|-FunctionDecl 0x5555d4bd8290 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:6046:68> col:28 clang_EvalResult_getAsStr 'const char *(CXEvalResult)'
| |-ParmVarDecl 0x5555d4bd8198 <col:54, col:67> col:67 E 'CXEvalResult':'void *'
| |-VisibilityAttr 0x5555d4bd8340 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c55b50 </workspace/clang-c/Index.h:6041:3, line:6044:28>
|   `-ParagraphComment 0x5555d4c55b20 <line:6041:3, line:6044:28>
|     |-TextComment 0x5555d4c55a80 <line:6041:3, col:60> Text=" Returns the evaluation result as a constant string if the"
|     |-TextComment 0x5555d4c55aa0 <line:6042:3, col:68> Text=" kind is other than Int or float. User must not free this pointer,"
|     |-TextComment 0x5555d4c55ac0 <line:6043:3, col:69> Text=" instead call clang_EvalResult_dispose on the CXEvalResult returned"
|     `-TextComment 0x5555d4c55ae0 <line:6044:3, col:28> Text=" by clang_Cursor_Evaluate."
|-FunctionDecl 0x5555d4bd84b8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:6051:60> col:21 clang_EvalResult_dispose 'void (CXEvalResult)'
| |-ParmVarDecl 0x5555d4bd83f8 <col:46, col:59> col:59 E 'CXEvalResult':'void *'
| |-VisibilityAttr 0x5555d4bd8568 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c55c20 </workspace/clang-c/Index.h:6049:3, col:36>
|   `-ParagraphComment 0x5555d4c55bf0 <col:3, col:36>
|     `-TextComment 0x5555d4c55bc0 <col:3, col:36> Text=" Disposes the created Eval memory."
|-TypedefDecl 0x5555d4bd8660 <line:6064:1, col:15> col:15 referenced CXRemapping 'void *'
| |-PointerType 0x5555d4abe5e0 'void *'
| | `-BuiltinType 0x5555d4abdec0 'void'
| `-FullComment 0x5555d4c55cf0 <line:6062:3, col:67>
|   `-ParagraphComment 0x5555d4c55cc0 <col:3, col:67>
|     `-TextComment 0x5555d4c55c90 <col:3, col:67> Text=" A remapping of original source files and their translated files."
|-FunctionDecl 0x5555d4bd8878 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:6074:64> col:28 clang_getRemappings 'CXRemapping (const char *)'
| |-ParmVarDecl 0x5555d4bd8788 <col:48, col:60> col:60 path 'const char *'
| |-VisibilityAttr 0x5555d4bd8928 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c56060 </workspace/clang-c/Index.h:6067:3, line:6072:80>
|   |-ParagraphComment 0x5555d4c55d90 <line:6067:3, col:24>
|   | `-TextComment 0x5555d4c55d60 <col:3, col:24> Text=" Retrieve a remapping."
|   |-ParagraphComment 0x5555d4c55de0 <line:6069:3>
|   | `-TextComment 0x5555d4c55db0 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c55e00 <col:4, col:64> [in] implicitly Param="path" ParamIndex=0
|   | `-ParagraphComment 0x5555d4c55ea0 <col:15, col:64>
|   |   `-TextComment 0x5555d4c55e60 <col:15, col:64> Text=" the path that contains metadata about remappings."
|   |-ParagraphComment 0x5555d4c55ef0 <line:6071:3>
|   | `-TextComment 0x5555d4c55ec0 <col:3> Text=" "
|   `-BlockCommandComment 0x5555d4c55f10 <col:4, line:6072:80> Name="returns"
|     `-ParagraphComment 0x5555d4c56010 <line:6071:12, line:6072:80>
|       |-TextComment 0x5555d4c55f40 <line:6071:12, col:65> Text=" the requested remapping. This remapping must be freed"
|       |-TextComment 0x5555d4c55f60 <line:6072:3, col:17> Text=" via a call to "
|       |-InlineCommandComment 0x5555d4c55fb0 <col:18, col:19> Name="c" RenderMonospaced Arg[0]="clang_remap_dispose()."
|       `-TextComment 0x5555d4c55fd0 <col:43, col:80> Text=" Can return NULL if an error occurred."
|-FunctionDecl 0x5555d4bd8e48 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:6088:62> line:6087:13 clang_getRemappingsFromFileList 'CXRemapping (const char **, unsigned int)'
| |-ParmVarDecl 0x5555d4bd8cb0 <col:45, col:58> col:58 filePaths 'const char **'
| |-ParmVarDecl 0x5555d4bd8d30 <line:6088:45, col:54> col:54 numFiles 'unsigned int'
| |-VisibilityAttr 0x5555d4bd8f00 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c564d0 </workspace/clang-c/Index.h:6077:3, line:6084:80>
|   |-ParagraphComment 0x5555d4c56100 <line:6077:3, col:24>
|   | `-TextComment 0x5555d4c560d0 <col:3, col:24> Text=" Retrieve a remapping."
|   |-ParagraphComment 0x5555d4c56150 <line:6079:3>
|   | `-TextComment 0x5555d4c56120 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c56170 <col:4, col:80> [in] implicitly Param="filePaths" ParamIndex=0
|   | `-ParagraphComment 0x5555d4c56200 <col:20, col:80>
|   |   `-TextComment 0x5555d4c561d0 <col:20, col:80> Text=" pointer to an array of file paths containing remapping info."
|   |-ParagraphComment 0x5555d4c56250 <line:6081:3>
|   | `-TextComment 0x5555d4c56220 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c56270 <col:4, col:40> [in] implicitly Param="numFiles" ParamIndex=1
|   | `-ParagraphComment 0x5555d4c56300 <col:19, col:40>
|   |   `-TextComment 0x5555d4c562d0 <col:19, col:40> Text=" number of file paths."
|   |-ParagraphComment 0x5555d4c56350 <line:6083:3>
|   | `-TextComment 0x5555d4c56320 <col:3> Text=" "
|   `-BlockCommandComment 0x5555d4c56370 <col:4, line:6084:80> Name="returns"
|     `-ParagraphComment 0x5555d4c56470 <line:6083:12, line:6084:80>
|       |-TextComment 0x5555d4c563a0 <line:6083:12, col:65> Text=" the requested remapping. This remapping must be freed"
|       |-TextComment 0x5555d4c563c0 <line:6084:3, col:17> Text=" via a call to "
|       |-InlineCommandComment 0x5555d4c56410 <col:18, col:19> Name="c" RenderMonospaced Arg[0]="clang_remap_dispose()."
|       `-TextComment 0x5555d4c56430 <col:43, col:80> Text=" Can return NULL if an error occurred."
|-FunctionDecl 0x5555d4bd9080 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:6093:60> col:25 clang_remap_getNumFiles 'unsigned int (CXRemapping)'
| |-ParmVarDecl 0x5555d4bd8fb8 <col:49> col:60 'CXRemapping':'void *'
| |-VisibilityAttr 0x5555d4bd9130 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c565a0 </workspace/clang-c/Index.h:6091:3, col:38>
|   `-ParagraphComment 0x5555d4c56570 <col:3, col:38>
|     `-TextComment 0x5555d4c56540 <col:3, col:38> Text=" Determine the number of remappings."
|-FunctionDecl 0x5555d4bd94a8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:6105:67> line:6103:21 clang_remap_getFilenames 'void (CXRemapping, unsigned int, CXString *, CXString *)'
| |-ParmVarDecl 0x5555d4bd91e8 <col:46> col:57 'CXRemapping':'void *'
| |-ParmVarDecl 0x5555d4bd9268 <col:59, col:68> col:68 index 'unsigned int'
| |-ParmVarDecl 0x5555d4bd92e8 <line:6104:46, col:56> col:56 original 'CXString *'
| |-ParmVarDecl 0x5555d4bd9368 <line:6105:46, col:56> col:56 transformed 'CXString *'
| |-VisibilityAttr 0x5555d4bd9570 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c568b0 </workspace/clang-c/Index.h:6096:3, line:6101:22>
|   |-ParagraphComment 0x5555d4c56640 <line:6096:3, col:67>
|   | `-TextComment 0x5555d4c56610 <col:3, col:67> Text=" Get the original and the associated filename from the remapping."
|   |-ParagraphComment 0x5555d4c56690 <line:6098:3>
|   | `-TextComment 0x5555d4c56660 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c566b0 <col:4, col:69> [in] implicitly Param="original" ParamIndex=2
|   | `-ParagraphComment 0x5555d4c56740 <col:19, col:69>
|   |   `-TextComment 0x5555d4c56710 <col:19, col:69> Text=" If non-NULL, will be set to the original filename."
|   |-ParagraphComment 0x5555d4c56790 <line:6100:3>
|   | `-TextComment 0x5555d4c56760 <col:3> Text=" "
|   `-ParamCommandComment 0x5555d4c567b0 <col:4, line:6101:22> [in] implicitly Param="transformed" ParamIndex=3
|     `-ParagraphComment 0x5555d4c56860 <line:6100:22, line:6101:22>
|       |-TextComment 0x5555d4c56810 <line:6100:22, col:80> Text=" If non-NULL, will be set to the filename that the original"
|       `-TextComment 0x5555d4c56830 <line:6101:3, col:22> Text=" is associated with."
|-FunctionDecl 0x5555d4bd96e8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:6110:52> col:21 clang_remap_dispose 'void (CXRemapping)'
| |-ParmVarDecl 0x5555d4bd9628 <col:41> col:52 'CXRemapping':'void *'
| |-VisibilityAttr 0x5555d4bd9798 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c56980 </workspace/clang-c/Index.h:6108:3, col:25>
|   `-ParagraphComment 0x5555d4c56950 <col:3, col:25>
|     `-TextComment 0x5555d4c56920 <col:3, col:25> Text=" Dispose the remapping."
|-EnumDecl 0x5555d4bd9848 <line:6121:1, col:56> col:6 CXVisitorResult
| |-FullComment 0x5555d4c56b40 <line:6116:4, line:6118:5>
| | |-ParagraphComment 0x5555d4c56a20 <line:6116:4>
| | | `-TextComment 0x5555d4c569f0 <col:4> Text=" "
| | |-VerbatimLineComment 0x5555d4c56a40 <col:5, col:53> Text=" CINDEX_HIGH Higher level API functions"
| | `-ParagraphComment 0x5555d4c56b00 <line:6118:3, col:5>
| |   |-TextComment 0x5555d4c56a80 <col:3> Text=" "
| |   |-TextComment 0x5555d4c56aa0 <col:4> Text="@"
| |   `-TextComment 0x5555d4c56ac0 <col:5> Text="{"
| |-EnumConstantDecl 0x5555d4bd9910 <line:6121:24> col:24 CXVisit_Break 'int'
| `-EnumConstantDecl 0x5555d4bd9960 <col:39> col:39 CXVisit_Continue 'int'
|-RecordDecl 0x5555d4bd99b0 <line:6123:9, line:6126:1> line:6123:16 struct CXCursorAndRangeVisitor definition
| |-FieldDecl 0x5555d4bd9a68 <line:6124:3, col:9> col:9 context 'void *'
| `-FieldDecl 0x5555d4bd9f20 <line:6125:3, col:71> col:26 visit 'enum CXVisitorResult (*)(void *, CXCursor, CXSourceRange)'
|-TypedefDecl 0x5555d4bd9fc8 <line:6123:1, line:6126:3> col:3 referenced CXCursorAndRangeVisitor 'struct CXCursorAndRangeVisitor':'struct CXCursorAndRangeVisitor'
| `-ElaboratedType 0x5555d4bd9f70 'struct CXCursorAndRangeVisitor' sugar
|   `-RecordType 0x5555d4bd9a30 'struct CXCursorAndRangeVisitor'
|     `-Record 0x5555d4bd99b0 'CXCursorAndRangeVisitor'
|-EnumDecl 0x5555d4bda068 <line:6128:9, line:6143:1> line:6128:9
| |-EnumConstantDecl 0x5555d4bda170 <line:6132:3, col:22> col:3 CXResult_Success 'int'
| | |-ConstantExpr 0x5555d4bda150 <col:22> 'int'
| | | |-value: Int 0
| | | `-IntegerLiteral 0x5555d4bda130 <col:22> 'int' 0
| | `-FullComment 0x5555d4c56c10 <line:6130:5, col:36>
| |   `-ParagraphComment 0x5555d4c56be0 <col:5, col:36>
| |     `-TextComment 0x5555d4c56bb0 <col:5, col:36> Text=" Function returned successfully."
| |-EnumConstantDecl 0x5555d4bda228 <line:6136:3, col:22> col:3 CXResult_Invalid 'int'
| | |-ConstantExpr 0x5555d4bda208 <col:22> 'int'
| | | |-value: Int 1
| | | `-IntegerLiteral 0x5555d4bda1e8 <col:22> 'int' 1
| | `-FullComment 0x5555d4c56ce0 <line:6134:5, col:56>
| |   `-ParagraphComment 0x5555d4c56cb0 <col:5, col:56>
| |     `-TextComment 0x5555d4c56c80 <col:5, col:56> Text=" One of the parameters was invalid for the function."
| `-EnumConstantDecl 0x5555d4bda2e8 <line:6141:3, col:25> col:3 CXResult_VisitBreak 'int'
|   |-ConstantExpr 0x5555d4bda2c8 <col:25> 'int'
|   | |-value: Int 2
|   | `-IntegerLiteral 0x5555d4bda2a8 <col:25> 'int' 2
|   `-FullComment 0x5555d4c56dd0 <line:6138:5, line:6139:19>
|     `-ParagraphComment 0x5555d4c56da0 <line:6138:5, line:6139:19>
|       |-TextComment 0x5555d4c56d50 <line:6138:5, col:64> Text=" The function was terminated by a callback (e.g. it returned"
|       `-TextComment 0x5555d4c56d70 <line:6139:5, col:19> Text=" CXVisit_Break)"
|-TypedefDecl 0x5555d4bda398 <line:6128:1, line:6143:3> col:3 referenced CXResult 'enum CXResult':'CXResult'
| `-ElaboratedType 0x5555d4bda340 'enum CXResult' sugar
|   `-EnumType 0x5555d4bda110 'CXResult'
|     `-Enum 0x5555d4bda068 ''
|-FunctionDecl 0x5555d4bda738 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:6160:66> line:6159:25 clang_findReferencesInFile 'CXResult (CXCursor, CXFile, CXCursorAndRangeVisitor)'
| |-ParmVarDecl 0x5555d4bda4c0 <line:6160:5, col:14> col:14 cursor 'CXCursor':'CXCursor'
| |-ParmVarDecl 0x5555d4bda538 <col:22, col:29> col:29 file 'CXFile':'void *'
| |-ParmVarDecl 0x5555d4bda610 <col:35, col:59> col:59 visitor 'CXCursorAndRangeVisitor':'struct CXCursorAndRangeVisitor'
| |-VisibilityAttr 0x5555d4bda7f8 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c57320 </workspace/clang-c/Index.h:6146:3, line:6157:44>
|   |-ParagraphComment 0x5555d4c56e70 <line:6146:3, col:55>
|   | `-TextComment 0x5555d4c56e40 <col:3, col:55> Text=" Find references of a declaration in a specific file."
|   |-ParagraphComment 0x5555d4c56ec0 <line:6148:3>
|   | `-TextComment 0x5555d4c56e90 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c56ee0 <col:4, col:65> [in] implicitly Param="cursor" ParamIndex=0
|   | `-ParagraphComment 0x5555d4c56f70 <col:17, col:65>
|   |   `-TextComment 0x5555d4c56f40 <col:17, col:65> Text=" pointing to a declaration or a reference of one."
|   |-ParagraphComment 0x5555d4c56fc0 <line:6150:3>
|   | `-TextComment 0x5555d4c56f90 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c56fe0 <col:4, col:40> [in] implicitly Param="file" ParamIndex=1
|   | `-ParagraphComment 0x5555d4c57070 <col:15, col:40>
|   |   `-TextComment 0x5555d4c57040 <col:15, col:40> Text=" to search for references."
|   |-ParagraphComment 0x5555d4c570c0 <line:6152:3>
|   | `-TextComment 0x5555d4c57090 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c570e0 <col:4, line:6155:72> [in] implicitly Param="visitor" ParamIndex=2
|   | `-ParagraphComment 0x5555d4c571e0 <line:6152:18, line:6155:72>
|   |   |-TextComment 0x5555d4c57140 <line:6152:18, col:80> Text=" callback that will receive pairs of CXCursor/CXSourceRange for"
|   |   |-TextComment 0x5555d4c57160 <line:6153:3, col:24> Text=" each reference found."
|   |   |-TextComment 0x5555d4c57180 <line:6154:3, col:75> Text=" The CXSourceRange will point inside the file; if the reference is inside"
|   |   `-TextComment 0x5555d4c571a0 <line:6155:3, col:72> Text=" a macro (and not a macro argument) the CXSourceRange will be invalid."
|   |-ParagraphComment 0x5555d4c57230 <line:6157:3>
|   | `-TextComment 0x5555d4c57200 <col:3> Text=" "
|   `-BlockCommandComment 0x5555d4c57250 <col:4, col:44> Name="returns"
|     `-ParagraphComment 0x5555d4c572b0 <col:12, col:44>
|       `-TextComment 0x5555d4c57280 <col:12, col:44> Text=" one of the CXResult enumerators."
|-FunctionDecl 0x5555d4bdaab8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:6175:71> line:6174:25 clang_findIncludesInFile 'CXResult (CXTranslationUnit, CXFile, CXCursorAndRangeVisitor)'
| |-ParmVarDecl 0x5555d4bda8a8 <line:6175:5, col:23> col:23 TU 'CXTranslationUnit':'struct CXTranslationUnitImpl *'
| |-ParmVarDecl 0x5555d4bda920 <col:27, col:34> col:34 file 'CXFile':'void *'
| |-ParmVarDecl 0x5555d4bda998 <col:40, col:64> col:64 visitor 'CXCursorAndRangeVisitor':'struct CXCursorAndRangeVisitor'
| |-VisibilityAttr 0x5555d4bdab78 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c57820 </workspace/clang-c/Index.h:6163:3, line:6172:44>
|   |-ParagraphComment 0x5555d4c573c0 <line:6163:3, col:55>
|   | `-TextComment 0x5555d4c57390 <col:3, col:55> Text=" Find #import/#include directives in a specific file."
|   |-ParagraphComment 0x5555d4c57410 <line:6165:3>
|   | `-TextComment 0x5555d4c573e0 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c57430 <col:4, col:59> [in] implicitly Param="TU" ParamIndex=0
|   | `-ParagraphComment 0x5555d4c574c0 <col:13, col:59>
|   |   `-TextComment 0x5555d4c57490 <col:13, col:59> Text=" translation unit containing the file to query."
|   |-ParagraphComment 0x5555d4c57510 <line:6167:3>
|   | `-TextComment 0x5555d4c574e0 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c57530 <col:4, col:57> [in] implicitly Param="file" ParamIndex=1
|   | `-ParagraphComment 0x5555d4c575c0 <col:15, col:57>
|   |   `-TextComment 0x5555d4c57590 <col:15, col:57> Text=" to search for #import/#include directives."
|   |-ParagraphComment 0x5555d4c57610 <line:6169:3>
|   | `-TextComment 0x5555d4c575e0 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c57630 <col:4, line:6170:24> [in] implicitly Param="visitor" ParamIndex=2
|   | `-ParagraphComment 0x5555d4c576e0 <line:6169:18, line:6170:24>
|   |   |-TextComment 0x5555d4c57690 <line:6169:18, col:80> Text=" callback that will receive pairs of CXCursor/CXSourceRange for"
|   |   `-TextComment 0x5555d4c576b0 <line:6170:3, col:24> Text=" each directive found."
|   |-ParagraphComment 0x5555d4c57730 <line:6172:3>
|   | `-TextComment 0x5555d4c57700 <col:3> Text=" "
|   `-BlockCommandComment 0x5555d4c57750 <col:4, col:44> Name="returns"
|     `-ParagraphComment 0x5555d4c577b0 <col:12, col:44>
|       `-TextComment 0x5555d4c57780 <col:12, col:44> Text=" one of the CXResult enumerators."
|-TypedefDecl 0x5555d4bdac10 <line:6197:1, col:15> col:15 referenced CXIdxClientFile 'void *'
| |-PointerType 0x5555d4abe5e0 'void *'
| | `-BuiltinType 0x5555d4abdec0 'void'
| `-FullComment 0x5555d4c578f0 <line:6195:3, col:61>
|   `-ParagraphComment 0x5555d4c578c0 <col:3, col:61>
|     `-TextComment 0x5555d4c57890 <col:3, col:61> Text=" The client's data object that is associated with a CXFile."
|-TypedefDecl 0x5555d4bdacb0 <line:6202:1, col:15> col:15 referenced CXIdxClientEntity 'void *'
| |-PointerType 0x5555d4abe5e0 'void *'
| | `-BuiltinType 0x5555d4abdec0 'void'
| `-FullComment 0x5555d4c579c0 <line:6200:3, col:70>
|   `-ParagraphComment 0x5555d4c57990 <col:3, col:70>
|     `-TextComment 0x5555d4c57960 <col:3, col:70> Text=" The client's data object that is associated with a semantic entity."
|-TypedefDecl 0x5555d4bdad50 <line:6208:1, col:15> col:15 referenced CXIdxClientContainer 'void *'
| |-PointerType 0x5555d4abe5e0 'void *'
| | `-BuiltinType 0x5555d4abdec0 'void'
| `-FullComment 0x5555d4c57ab0 <line:6205:3, line:6206:15>
|   `-ParagraphComment 0x5555d4c57a80 <line:6205:3, line:6206:15>
|     |-TextComment 0x5555d4c57a30 <line:6205:3, col:72> Text=" The client's data object that is associated with a semantic container"
|     `-TextComment 0x5555d4c57a50 <line:6206:3, col:15> Text=" of entities."
|-TypedefDecl 0x5555d4bdb050 <line:6214:1, col:15> col:15 referenced CXIdxClientASTFile 'void *'
| |-PointerType 0x5555d4abe5e0 'void *'
| | `-BuiltinType 0x5555d4abdec0 'void'
| `-FullComment 0x5555d4c57ba0 <line:6211:3, line:6212:14>
|   `-ParagraphComment 0x5555d4c57b70 <line:6211:3, line:6212:14>
|     |-TextComment 0x5555d4c57b20 <line:6211:3, col:68> Text=" The client's data object that is associated with an AST file (PCH"
|     `-TextComment 0x5555d4c57b40 <line:6212:3, col:14> Text=" or module)."
|-RecordDecl 0x5555d4bdb0d8 <line:6219:9, line:6222:1> line:6219:9 struct definition
| |-FullComment 0x5555d4c57c70 <line:6217:3, col:45>
| | `-ParagraphComment 0x5555d4c57c40 <col:3, col:45>
| |   `-TextComment 0x5555d4c57c10 <col:3, col:45> Text=" Source location passed to index callbacks."
| |-FieldDecl 0x5555d4bdb1e8 <line:6220:3, col:19> col:9 ptr_data 'void *[2]'
| `-FieldDecl 0x5555d4bdb250 <line:6221:3, col:12> col:12 int_data 'unsigned int'
|-TypedefDecl 0x5555d4bdb2f8 <line:6219:1, line:6222:3> col:3 referenced CXIdxLoc 'struct CXIdxLoc':'CXIdxLoc'
| |-ElaboratedType 0x5555d4bdb2a0 'struct CXIdxLoc' sugar
| | `-RecordType 0x5555d4bdb160 'CXIdxLoc'
| |   `-Record 0x5555d4bdb0d8 ''
| `-FullComment 0x5555d4c57d40 <line:6217:3, col:45>
|   `-ParagraphComment 0x5555d4c57d10 <col:3, col:45>
|     `-TextComment 0x5555d4c57ce0 <col:3, col:45> Text=" Source location passed to index callbacks."
|-RecordDecl 0x5555d4bdb390 <line:6227:9, line:6247:1> line:6227:9 struct definition
| |-FullComment 0x5555d4c57e10 <line:6225:3, col:36>
| | `-ParagraphComment 0x5555d4c57de0 <col:3, col:36>
| |   `-TextComment 0x5555d4c57db0 <col:3, col:36> Text=" Data for ppIncludedFile callback."
| |-FieldDecl 0x5555d4bdb4d0 <line:6231:3, col:12> col:12 hashLoc 'CXIdxLoc':'CXIdxLoc'
| | `-FullComment 0x5555d4c57f90 <line:6229:5, col:57>
| |   `-ParagraphComment 0x5555d4c57f60 <col:5, col:57>
| |     |-TextComment 0x5555d4c57e80 <col:5, col:28> Text=" Location of '#' in the "
| |     |-TextComment 0x5555d4c57eb0 <col:29, col:30> Text="#"
| |     |-TextComment 0x5555d4c57ed0 <col:31, col:38> Text="include/"
| |     |-TextComment 0x5555d4c57ef0 <col:39, col:40> Text="#"
| |     `-TextComment 0x5555d4c57f10 <col:41, col:57> Text="import directive."
| |-FieldDecl 0x5555d4bdb560 <line:6235:3, col:15> col:15 filename 'const char *'
| | `-FullComment 0x5555d4c58100 <line:6233:5, col:61>
| |   `-ParagraphComment 0x5555d4c580d0 <col:5, col:61>
| |     |-TextComment 0x5555d4c58000 <col:5, col:32> Text=" Filename as written in the "
| |     |-TextComment 0x5555d4c58020 <col:33, col:34> Text="#"
| |     |-TextComment 0x5555d4c58040 <col:35, col:42> Text="include/"
| |     |-TextComment 0x5555d4c58060 <col:43, col:44> Text="#"
| |     `-TextComment 0x5555d4c58080 <col:45, col:61> Text="import directive."
| |-FieldDecl 0x5555d4bdb5e8 <line:6239:3, col:10> col:10 file 'CXFile':'void *'
| | `-FullComment 0x5555d4c58270 <line:6237:5, col:71>
| |   `-ParagraphComment 0x5555d4c58240 <col:5, col:71>
| |     |-TextComment 0x5555d4c58170 <col:5, col:30> Text=" The actual file that the "
| |     |-TextComment 0x5555d4c58190 <col:31, col:32> Text="#"
| |     |-TextComment 0x5555d4c581b0 <col:33, col:40> Text="include/"
| |     |-TextComment 0x5555d4c581d0 <col:41, col:42> Text="#"
| |     `-TextComment 0x5555d4c581f0 <col:43, col:71> Text="import directive resolved to."
| |-FieldDecl 0x5555d4bdb650 <line:6240:3, col:7> col:7 isImport 'int'
| |-FieldDecl 0x5555d4bdb6b8 <line:6241:3, col:7> col:7 isAngled 'int'
| `-FieldDecl 0x5555d4bdb750 <line:6246:3, col:7> col:7 isModuleImport 'int'
|   `-FullComment 0x5555d4c58360 <line:6243:5, line:6244:12>
|     `-ParagraphComment 0x5555d4c58330 <line:6243:5, line:6244:12>
|       |-TextComment 0x5555d4c582e0 <line:6243:5, col:69> Text=" Non-zero if the directive was automatically turned into a module"
|       `-TextComment 0x5555d4c58300 <line:6244:5, col:12> Text=" import."
|-TypedefDecl 0x5555d4bdb858 <line:6227:1, line:6247:3> col:3 referenced CXIdxIncludedFileInfo 'struct CXIdxIncludedFileInfo':'CXIdxIncludedFileInfo'
| |-ElaboratedType 0x5555d4bdb800 'struct CXIdxIncludedFileInfo' sugar
| | `-RecordType 0x5555d4bdb410 'CXIdxIncludedFileInfo'
| |   `-Record 0x5555d4bdb390 ''
| `-FullComment 0x5555d4c58430 <line:6225:3, col:36>
|   `-ParagraphComment 0x5555d4c58400 <col:3, col:36>
|     `-TextComment 0x5555d4c583d0 <col:3, col:36> Text=" Data for ppIncludedFile callback."
|-RecordDecl 0x5555d4bdb8f0 <line:6252:9, line:6271:1> line:6252:9 struct definition
| |-FullComment 0x5555d4c58500 <line:6250:3, col:45>
| | `-ParagraphComment 0x5555d4c584d0 <col:3, col:45>
| |   `-TextComment 0x5555d4c584a0 <col:3, col:45> Text=" Data for IndexerCallbacks#importedASTFile."
| |-FieldDecl 0x5555d4bdb9c8 <line:6256:3, col:10> col:10 file 'CXFile':'void *'
| | `-FullComment 0x5555d4c585d0 <line:6254:5, col:73>
| |   `-ParagraphComment 0x5555d4c585a0 <col:5, col:73>
| |     `-TextComment 0x5555d4c58570 <col:5, col:73> Text=" Top level AST file containing the imported PCH, module or submodule."
| |-FieldDecl 0x5555d4bdba58 <line:6260:3, col:12> col:12 module 'CXModule':'void *'
| | `-FullComment 0x5555d4c586a0 <line:6258:5, col:58>
| |   `-ParagraphComment 0x5555d4c58670 <col:5, col:58>
| |     `-TextComment 0x5555d4c58640 <col:5, col:58> Text=" The imported module or NULL if the AST file is a PCH."
| |-FieldDecl 0x5555d4bdbae8 <line:6264:3, col:12> col:12 loc 'CXIdxLoc':'CXIdxLoc'
| | `-FullComment 0x5555d4c58770 <line:6262:5, col:70>
| |   `-ParagraphComment 0x5555d4c58740 <col:5, col:70>
| |     `-TextComment 0x5555d4c58710 <col:5, col:70> Text=" Location where the file is imported. Applicable only for modules."
| `-FieldDecl 0x5555d4bdbb80 <line:6269:3, col:7> col:7 isImplicit 'int'
|   `-FullComment 0x5555d4c58860 <line:6266:5, line:6267:50>
|     `-ParagraphComment 0x5555d4c58830 <line:6266:5, line:6267:50>
|       |-TextComment 0x5555d4c587e0 <line:6266:5, col:69> Text=" Non-zero if an inclusion directive was automatically turned into"
|       `-TextComment 0x5555d4c58800 <line:6267:5, col:50> Text=" a module import. Applicable only for modules."
|-TypedefDecl 0x5555d4bdbc28 <line:6252:1, line:6271:3> col:3 referenced CXIdxImportedASTFileInfo 'struct CXIdxImportedASTFileInfo':'CXIdxImportedASTFileInfo'
| |-ElaboratedType 0x5555d4bdbbd0 'struct CXIdxImportedASTFileInfo' sugar
| | `-RecordType 0x5555d4bdb970 'CXIdxImportedASTFileInfo'
| |   `-Record 0x5555d4bdb8f0 ''
| `-FullComment 0x5555d4c58930 <line:6250:3, col:45>
|   `-ParagraphComment 0x5555d4c58900 <col:3, col:45>
|     `-TextComment 0x5555d4c588d0 <col:3, col:45> Text=" Data for IndexerCallbacks#importedASTFile."
|-EnumDecl 0x5555d4bdbc98 <line:6273:9, line:6306:1> line:6273:9
| |-EnumConstantDecl 0x5555d4bdbda0 <line:6274:3, col:27> col:3 CXIdxEntity_Unexposed 'int'
| | `-ConstantExpr 0x5555d4bdbd80 <col:27> 'int'
| |   |-value: Int 0
| |   `-IntegerLiteral 0x5555d4bdbd60 <col:27> 'int' 0
| |-EnumConstantDecl 0x5555d4bdbe30 <line:6275:3, col:25> col:3 CXIdxEntity_Typedef 'int'
| | `-ConstantExpr 0x5555d4bdbe10 <col:25> 'int'
| |   |-value: Int 1
| |   `-IntegerLiteral 0x5555d4bdbdf0 <col:25> 'int' 1
| |-EnumConstantDecl 0x5555d4bdbec0 <line:6276:3, col:26> col:3 CXIdxEntity_Function 'int'
| | `-ConstantExpr 0x5555d4bdbea0 <col:26> 'int'
| |   |-value: Int 2
| |   `-IntegerLiteral 0x5555d4bdbe80 <col:26> 'int' 2
| |-EnumConstantDecl 0x5555d4bdbf50 <line:6277:3, col:26> col:3 CXIdxEntity_Variable 'int'
| | `-ConstantExpr 0x5555d4bdbf30 <col:26> 'int'
| |   |-value: Int 3
| |   `-IntegerLiteral 0x5555d4bdbf10 <col:26> 'int' 3
| |-EnumConstantDecl 0x5555d4bdbfe0 <line:6278:3, col:23> col:3 CXIdxEntity_Field 'int'
| | `-ConstantExpr 0x5555d4bdbfc0 <col:23> 'int'
| |   |-value: Int 4
| |   `-IntegerLiteral 0x5555d4bdbfa0 <col:23> 'int' 4
| |-EnumConstantDecl 0x5555d4bdc340 <line:6279:3, col:30> col:3 CXIdxEntity_EnumConstant 'int'
| | `-ConstantExpr 0x5555d4bdc320 <col:30> 'int'
| |   |-value: Int 5
| |   `-IntegerLiteral 0x5555d4bdc030 <col:30> 'int' 5
| |-EnumConstantDecl 0x5555d4bdc3d0 <line:6281:3, col:27> col:3 CXIdxEntity_ObjCClass 'int'
| | `-ConstantExpr 0x5555d4bdc3b0 <col:27> 'int'
| |   |-value: Int 6
| |   `-IntegerLiteral 0x5555d4bdc390 <col:27> 'int' 6
| |-EnumConstantDecl 0x5555d4bdc460 <line:6282:3, col:30> col:3 CXIdxEntity_ObjCProtocol 'int'
| | `-ConstantExpr 0x5555d4bdc440 <col:30> 'int'
| |   |-value: Int 7
| |   `-IntegerLiteral 0x5555d4bdc420 <col:30> 'int' 7
| |-EnumConstantDecl 0x5555d4bdc4f0 <line:6283:3, col:30> col:3 CXIdxEntity_ObjCCategory 'int'
| | `-ConstantExpr 0x5555d4bdc4d0 <col:30> 'int'
| |   |-value: Int 8
| |   `-IntegerLiteral 0x5555d4bdc4b0 <col:30> 'int' 8
| |-EnumConstantDecl 0x5555d4bdc580 <line:6285:3, col:36> col:3 CXIdxEntity_ObjCInstanceMethod 'int'
| | `-ConstantExpr 0x5555d4bdc560 <col:36> 'int'
| |   |-value: Int 9
| |   `-IntegerLiteral 0x5555d4bdc540 <col:36> 'int' 9
| |-EnumConstantDecl 0x5555d4bdc610 <line:6286:3, col:33> col:3 CXIdxEntity_ObjCClassMethod 'int'
| | `-ConstantExpr 0x5555d4bdc5f0 <col:33> 'int'
| |   |-value: Int 10
| |   `-IntegerLiteral 0x5555d4bdc5d0 <col:33> 'int' 10
| |-EnumConstantDecl 0x5555d4bdc6a0 <line:6287:3, col:30> col:3 CXIdxEntity_ObjCProperty 'int'
| | `-ConstantExpr 0x5555d4bdc680 <col:30> 'int'
| |   |-value: Int 11
| |   `-IntegerLiteral 0x5555d4bdc660 <col:30> 'int' 11
| |-EnumConstantDecl 0x5555d4bdc730 <line:6288:3, col:26> col:3 CXIdxEntity_ObjCIvar 'int'
| | `-ConstantExpr 0x5555d4bdc710 <col:26> 'int'
| |   |-value: Int 12
| |   `-IntegerLiteral 0x5555d4bdc6f0 <col:26> 'int' 12
| |-EnumConstantDecl 0x5555d4bdc7c0 <line:6290:3, col:22> col:3 CXIdxEntity_Enum 'int'
| | `-ConstantExpr 0x5555d4bdc7a0 <col:22> 'int'
| |   |-value: Int 13
| |   `-IntegerLiteral 0x5555d4bdc780 <col:22> 'int' 13
| |-EnumConstantDecl 0x5555d4bdc850 <line:6291:3, col:24> col:3 CXIdxEntity_Struct 'int'
| | `-ConstantExpr 0x5555d4bdc830 <col:24> 'int'
| |   |-value: Int 14
| |   `-IntegerLiteral 0x5555d4bdc810 <col:24> 'int' 14
| |-EnumConstantDecl 0x5555d4bdc8e0 <line:6292:3, col:23> col:3 CXIdxEntity_Union 'int'
| | `-ConstantExpr 0x5555d4bdc8c0 <col:23> 'int'
| |   |-value: Int 15
| |   `-IntegerLiteral 0x5555d4bdc8a0 <col:23> 'int' 15
| |-EnumConstantDecl 0x5555d4bdc970 <line:6294:3, col:26> col:3 CXIdxEntity_CXXClass 'int'
| | `-ConstantExpr 0x5555d4bdc950 <col:26> 'int'
| |   |-value: Int 16
| |   `-IntegerLiteral 0x5555d4bdc930 <col:26> 'int' 16
| |-EnumConstantDecl 0x5555d4bdca00 <line:6295:3, col:30> col:3 CXIdxEntity_CXXNamespace 'int'
| | `-ConstantExpr 0x5555d4bdc9e0 <col:30> 'int'
| |   |-value: Int 17
| |   `-IntegerLiteral 0x5555d4bdc9c0 <col:30> 'int' 17
| |-EnumConstantDecl 0x5555d4bdca90 <line:6296:3, col:35> col:3 CXIdxEntity_CXXNamespaceAlias 'int'
| | `-ConstantExpr 0x5555d4bdca70 <col:35> 'int'
| |   |-value: Int 18
| |   `-IntegerLiteral 0x5555d4bdca50 <col:35> 'int' 18
| |-EnumConstantDecl 0x5555d4bdcb20 <line:6297:3, col:35> col:3 CXIdxEntity_CXXStaticVariable 'int'
| | `-ConstantExpr 0x5555d4bdcb00 <col:35> 'int'
| |   |-value: Int 19
| |   `-IntegerLiteral 0x5555d4bdcae0 <col:35> 'int' 19
| |-EnumConstantDecl 0x5555d4bdcbb0 <line:6298:3, col:33> col:3 CXIdxEntity_CXXStaticMethod 'int'
| | `-ConstantExpr 0x5555d4bdcb90 <col:33> 'int'
| |   |-value: Int 20
| |   `-IntegerLiteral 0x5555d4bdcb70 <col:33> 'int' 20
| |-EnumConstantDecl 0x5555d4bdcc40 <line:6299:3, col:35> col:3 CXIdxEntity_CXXInstanceMethod 'int'
| | `-ConstantExpr 0x5555d4bdcc20 <col:35> 'int'
| |   |-value: Int 21
| |   `-IntegerLiteral 0x5555d4bdcc00 <col:35> 'int' 21
| |-EnumConstantDecl 0x5555d4bdccd0 <line:6300:3, col:32> col:3 CXIdxEntity_CXXConstructor 'int'
| | `-ConstantExpr 0x5555d4bdccb0 <col:32> 'int'
| |   |-value: Int 22
| |   `-IntegerLiteral 0x5555d4bdcc90 <col:32> 'int' 22
| |-EnumConstantDecl 0x5555d4bdcd60 <line:6301:3, col:31> col:3 CXIdxEntity_CXXDestructor 'int'
| | `-ConstantExpr 0x5555d4bdcd40 <col:31> 'int'
| |   |-value: Int 23
| |   `-IntegerLiteral 0x5555d4bdcd20 <col:31> 'int' 23
| |-EnumConstantDecl 0x5555d4bdcdf0 <line:6302:3, col:39> col:3 CXIdxEntity_CXXConversionFunction 'int'
| | `-ConstantExpr 0x5555d4bdcdd0 <col:39> 'int'
| |   |-value: Int 24
| |   `-IntegerLiteral 0x5555d4bdcdb0 <col:39> 'int' 24
| |-EnumConstantDecl 0x5555d4bdce80 <line:6303:3, col:30> col:3 CXIdxEntity_CXXTypeAlias 'int'
| | `-ConstantExpr 0x5555d4bdce60 <col:30> 'int'
| |   |-value: Int 25
| |   `-IntegerLiteral 0x5555d4bdce40 <col:30> 'int' 25
| `-EnumConstantDecl 0x5555d4bdcf10 <line:6304:3, col:30> col:3 CXIdxEntity_CXXInterface 'int'
|   `-ConstantExpr 0x5555d4bdcef0 <col:30> 'int'
|     |-value: Int 26
|     `-IntegerLiteral 0x5555d4bdced0 <col:30> 'int' 26
|-TypedefDecl 0x5555d4bdcfb8 <line:6273:1, line:6306:3> col:3 referenced CXIdxEntityKind 'enum CXIdxEntityKind':'CXIdxEntityKind'
| `-ElaboratedType 0x5555d4bdcf60 'enum CXIdxEntityKind' sugar
|   `-EnumType 0x5555d4bdbd40 'CXIdxEntityKind'
|     `-Enum 0x5555d4bdbc98 ''
|-EnumDecl 0x5555d4bdd028 <line:6308:9, line:6314:1> line:6308:9
| |-EnumConstantDecl 0x5555d4bdd130 <line:6309:3, col:26> col:3 CXIdxEntityLang_None 'int'
| | `-ConstantExpr 0x5555d4bdd110 <col:26> 'int'
| |   |-value: Int 0
| |   `-IntegerLiteral 0x5555d4bdd0f0 <col:26> 'int' 0
| |-EnumConstantDecl 0x5555d4bdd1c0 <line:6310:3, col:23> col:3 CXIdxEntityLang_C 'int'
| | `-ConstantExpr 0x5555d4bdd1a0 <col:23> 'int'
| |   |-value: Int 1
| |   `-IntegerLiteral 0x5555d4bdd180 <col:23> 'int' 1
| |-EnumConstantDecl 0x5555d4bdd250 <line:6311:3, col:26> col:3 CXIdxEntityLang_ObjC 'int'
| | `-ConstantExpr 0x5555d4bdd230 <col:26> 'int'
| |   |-value: Int 2
| |   `-IntegerLiteral 0x5555d4bdd210 <col:26> 'int' 2
| |-EnumConstantDecl 0x5555d4bde340 <line:6312:3, col:25> col:3 CXIdxEntityLang_CXX 'int'
| | `-ConstantExpr 0x5555d4bdd2c0 <col:25> 'int'
| |   |-value: Int 3
| |   `-IntegerLiteral 0x5555d4bdd2a0 <col:25> 'int' 3
| `-EnumConstantDecl 0x5555d4bde3d0 <line:6313:3, col:27> col:3 CXIdxEntityLang_Swift 'int'
|   `-ConstantExpr 0x5555d4bde3b0 <col:27> 'int'
|     |-value: Int 4
|     `-IntegerLiteral 0x5555d4bde390 <col:27> 'int' 4
|-TypedefDecl 0x5555d4bde478 <line:6308:1, line:6314:3> col:3 referenced CXIdxEntityLanguage 'enum CXIdxEntityLanguage':'CXIdxEntityLanguage'
| `-ElaboratedType 0x5555d4bde420 'enum CXIdxEntityLanguage' sugar
|   `-EnumType 0x5555d4bdd0d0 'CXIdxEntityLanguage'
|     `-Enum 0x5555d4bdd028 ''
|-EnumDecl 0x5555d4bde510 <line:6326:9, line:6331:1> line:6326:9
| |-FullComment 0x5555d4c58b10 <line:6317:3, line:6324:27>
| | `-ParagraphComment 0x5555d4c58ae0 <line:6317:3, line:6324:27>
| |   |-TextComment 0x5555d4c589a0 <line:6317:3, col:67> Text=" Extra C++ template information for an entity. This can apply to:"
| |   |-TextComment 0x5555d4c589c0 <line:6318:3, col:23> Text=" CXIdxEntity_Function"
| |   |-TextComment 0x5555d4c589e0 <line:6319:3, col:23> Text=" CXIdxEntity_CXXClass"
| |   |-TextComment 0x5555d4c58a00 <line:6320:3, col:30> Text=" CXIdxEntity_CXXStaticMethod"
| |   |-TextComment 0x5555d4c58a20 <line:6321:3, col:32> Text=" CXIdxEntity_CXXInstanceMethod"
| |   |-TextComment 0x5555d4c58a40 <line:6322:3, col:29> Text=" CXIdxEntity_CXXConstructor"
| |   |-TextComment 0x5555d4c58a60 <line:6323:3, col:36> Text=" CXIdxEntity_CXXConversionFunction"
| |   `-TextComment 0x5555d4c58a80 <line:6324:3, col:27> Text=" CXIdxEntity_CXXTypeAlias"
| |-EnumConstantDecl 0x5555d4bde610 <line:6327:3, col:29> col:3 CXIdxEntity_NonTemplate 'int'
| | `-ConstantExpr 0x5555d4bde5f0 <col:29> 'int'
| |   |-value: Int 0
| |   `-IntegerLiteral 0x5555d4bde5d0 <col:29> 'int' 0
| |-EnumConstantDecl 0x5555d4bde6a0 <line:6328:3, col:26> col:3 CXIdxEntity_Template 'int'
| | `-ConstantExpr 0x5555d4bde680 <col:26> 'int'
| |   |-value: Int 1
| |   `-IntegerLiteral 0x5555d4bde660 <col:26> 'int' 1
| |-EnumConstantDecl 0x5555d4bde730 <line:6329:3, col:47> col:3 CXIdxEntity_TemplatePartialSpecialization 'int'
| | `-ConstantExpr 0x5555d4bde710 <col:47> 'int'
| |   |-value: Int 2
| |   `-IntegerLiteral 0x5555d4bde6f0 <col:47> 'int' 2
| `-EnumConstantDecl 0x5555d4bde7c0 <line:6330:3, col:40> col:3 CXIdxEntity_TemplateSpecialization 'int'
|   `-ConstantExpr 0x5555d4bde7a0 <col:40> 'int'
|     |-value: Int 3
|     `-IntegerLiteral 0x5555d4bde780 <col:40> 'int' 3
|-TypedefDecl 0x5555d4bde868 <line:6326:1, line:6331:3> col:3 referenced CXIdxEntityCXXTemplateKind 'enum CXIdxEntityCXXTemplateKind':'CXIdxEntityCXXTemplateKind'
| |-ElaboratedType 0x5555d4bde810 'enum CXIdxEntityCXXTemplateKind' sugar
| | `-EnumType 0x5555d4bde5b0 'CXIdxEntityCXXTemplateKind'
| |   `-Enum 0x5555d4bde510 ''
| `-FullComment 0x5555d4c58cf0 <line:6317:3, line:6324:27>
|   `-ParagraphComment 0x5555d4c58cc0 <line:6317:3, line:6324:27>
|     |-TextComment 0x5555d4c58b80 <line:6317:3, col:67> Text=" Extra C++ template information for an entity. This can apply to:"
|     |-TextComment 0x5555d4c58ba0 <line:6318:3, col:23> Text=" CXIdxEntity_Function"
|     |-TextComment 0x5555d4c58bc0 <line:6319:3, col:23> Text=" CXIdxEntity_CXXClass"
|     |-TextComment 0x5555d4c58be0 <line:6320:3, col:30> Text=" CXIdxEntity_CXXStaticMethod"
|     |-TextComment 0x5555d4c58c00 <line:6321:3, col:32> Text=" CXIdxEntity_CXXInstanceMethod"
|     |-TextComment 0x5555d4c58c20 <line:6322:3, col:29> Text=" CXIdxEntity_CXXConstructor"
|     |-TextComment 0x5555d4c58c40 <line:6323:3, col:36> Text=" CXIdxEntity_CXXConversionFunction"
|     `-TextComment 0x5555d4c58c60 <line:6324:3, col:27> Text=" CXIdxEntity_CXXTypeAlias"
|-EnumDecl 0x5555d4bde8d8 <line:6333:9, line:6338:1> line:6333:9
| |-EnumConstantDecl 0x5555d4bde9e0 <line:6334:3, col:25> col:3 CXIdxAttr_Unexposed 'int'
| | `-ConstantExpr 0x5555d4bde9c0 <col:25> 'int'
| |   |-value: Int 0
| |   `-IntegerLiteral 0x5555d4bde9a0 <col:25> 'int' 0
| |-EnumConstantDecl 0x5555d4bdea70 <line:6335:3, col:24> col:3 CXIdxAttr_IBAction 'int'
| | `-ConstantExpr 0x5555d4bdea50 <col:24> 'int'
| |   |-value: Int 1
| |   `-IntegerLiteral 0x5555d4bdea30 <col:24> 'int' 1
| |-EnumConstantDecl 0x5555d4bdeb00 <line:6336:3, col:24> col:3 CXIdxAttr_IBOutlet 'int'
| | `-ConstantExpr 0x5555d4bdeae0 <col:24> 'int'
| |   |-value: Int 2
| |   `-IntegerLiteral 0x5555d4bdeac0 <col:24> 'int' 2
| `-EnumConstantDecl 0x5555d4bdeb90 <line:6337:3, col:34> col:3 CXIdxAttr_IBOutletCollection 'int'
|   `-ConstantExpr 0x5555d4bdeb70 <col:34> 'int'
|     |-value: Int 3
|     `-IntegerLiteral 0x5555d4bdeb50 <col:34> 'int' 3
|-TypedefDecl 0x5555d4bdec38 <line:6333:1, line:6338:3> col:3 referenced CXIdxAttrKind 'enum CXIdxAttrKind':'CXIdxAttrKind'
| `-ElaboratedType 0x5555d4bdebe0 'enum CXIdxAttrKind' sugar
|   `-EnumType 0x5555d4bde980 'CXIdxAttrKind'
|     `-Enum 0x5555d4bde8d8 ''
|-RecordDecl 0x5555d4bdeca8 <line:6340:9, line:6344:1> line:6340:9 struct definition
| |-FieldDecl 0x5555d4bdedc0 <line:6341:3, col:17> col:17 kind 'CXIdxAttrKind':'CXIdxAttrKind'
| |-FieldDecl 0x5555d4bdee20 <line:6342:3, col:12> col:12 cursor 'CXCursor':'CXCursor'
| `-FieldDecl 0x5555d4bdee80 <line:6343:3, col:12> col:12 loc 'CXIdxLoc':'CXIdxLoc'
|-TypedefDecl 0x5555d4bdef28 <line:6340:1, line:6344:3> col:3 referenced CXIdxAttrInfo 'struct CXIdxAttrInfo':'CXIdxAttrInfo'
| `-ElaboratedType 0x5555d4bdeed0 'struct CXIdxAttrInfo' sugar
|   `-RecordType 0x5555d4bded30 'CXIdxAttrInfo'
|     `-Record 0x5555d4bdeca8 ''
|-RecordDecl 0x5555d4bdef98 <line:6346:9, line:6355:1> line:6346:9 struct definition
| |-FieldDecl 0x5555d4bdf0b0 <line:6347:3, col:19> col:19 kind 'CXIdxEntityKind':'CXIdxEntityKind'
| |-FieldDecl 0x5555d4bdf170 <line:6348:3, col:30> col:30 templateKind 'CXIdxEntityCXXTemplateKind':'CXIdxEntityCXXTemplateKind'
| |-FieldDecl 0x5555d4bdf230 <line:6349:3, col:23> col:23 lang 'CXIdxEntityLanguage':'CXIdxEntityLanguage'
| |-FieldDecl 0x5555d4bdf298 <line:6350:3, col:15> col:15 name 'const char *'
| |-FieldDecl 0x5555d4bdf390 <line:6351:3, col:15> col:15 USR 'const char *'
| |-FieldDecl 0x5555d4bdf3f0 <line:6352:3, col:12> col:12 cursor 'CXCursor':'CXCursor'
| |-FieldDecl 0x5555d4bdf570 <line:6353:3, col:31> col:31 attributes 'const CXIdxAttrInfo *const *'
| `-FieldDecl 0x5555d4bdf5d8 <line:6354:3, col:12> col:12 numAttributes 'unsigned int'
|-TypedefDecl 0x5555d4bdf688 <line:6346:1, line:6355:3> col:3 referenced CXIdxEntityInfo 'struct CXIdxEntityInfo':'CXIdxEntityInfo'
| `-ElaboratedType 0x5555d4bdf630 'struct CXIdxEntityInfo' sugar
|   `-RecordType 0x5555d4bdf020 'CXIdxEntityInfo'
|     `-Record 0x5555d4bdef98 ''
|-RecordDecl 0x5555d4bdf6f8 <line:6357:9, line:6359:1> line:6357:9 struct definition
| `-FieldDecl 0x5555d4bdf7b0 <line:6358:3, col:12> col:12 cursor 'CXCursor':'CXCursor'
|-TypedefDecl 0x5555d4bdf8c8 <line:6357:1, line:6359:3> col:3 referenced CXIdxContainerInfo 'struct CXIdxContainerInfo':'CXIdxContainerInfo'
| `-ElaboratedType 0x5555d4bdf870 'struct CXIdxContainerInfo' sugar
|   `-RecordType 0x5555d4bdf780 'CXIdxContainerInfo'
|     `-Record 0x5555d4bdf6f8 ''
|-RecordDecl 0x5555d4bdf938 <line:6361:9, line:6366:1> line:6361:9 struct definition
| |-FieldDecl 0x5555d4bdf9f8 <line:6362:3, col:24> col:24 attrInfo 'const CXIdxAttrInfo *'
| |-FieldDecl 0x5555d4bdfb20 <line:6363:3, col:26> col:26 objcClass 'const CXIdxEntityInfo *'
| |-FieldDecl 0x5555d4bdfb80 <line:6364:3, col:12> col:12 classCursor 'CXCursor':'CXCursor'
| `-FieldDecl 0x5555d4bdfbe0 <line:6365:3, col:12> col:12 classLoc 'CXIdxLoc':'CXIdxLoc'
|-TypedefDecl 0x5555d4bdfc88 <line:6361:1, line:6366:3> col:3 referenced CXIdxIBOutletCollectionAttrInfo 'struct CXIdxIBOutletCollectionAttrInfo':'CXIdxIBOutletCollectionAttrInfo'
| `-ElaboratedType 0x5555d4bdfc30 'struct CXIdxIBOutletCollectionAttrInfo' sugar
|   `-RecordType 0x5555d4bdf9c0 'CXIdxIBOutletCollectionAttrInfo'
|     `-Record 0x5555d4bdf938 ''
|-EnumDecl 0x5555d4bdfcf8 <line:6368:9, col:44> col:9
| `-EnumConstantDecl 0x5555d4bdfe00 <col:16, col:40> col:16 CXIdxDeclFlag_Skipped 'int'
|   `-ConstantExpr 0x5555d4bdfde0 <col:40> 'int'
|     |-value: Int 1
|     `-IntegerLiteral 0x5555d4bdfdc0 <col:40> 'int' 1
|-TypedefDecl 0x5555d4bdfea8 <col:1, col:46> col:46 CXIdxDeclInfoFlags 'enum CXIdxDeclInfoFlags':'CXIdxDeclInfoFlags'
| `-ElaboratedType 0x5555d4bdfe50 'enum CXIdxDeclInfoFlags' sugar
|   `-EnumType 0x5555d4bdfda0 'CXIdxDeclInfoFlags'
|     `-Enum 0x5555d4bdfcf8 ''
|-RecordDecl 0x5555d4bdff18 <line:6370:9, line:6394:1> line:6370:9 struct definition
| |-FieldDecl 0x5555d4bdffd8 <line:6371:3, col:26> col:26 entityInfo 'const CXIdxEntityInfo *'
| |-FieldDecl 0x5555d4be0038 <line:6372:3, col:12> col:12 cursor 'CXCursor':'CXCursor'
| |-FieldDecl 0x5555d4be0098 <line:6373:3, col:12> col:12 loc 'CXIdxLoc':'CXIdxLoc'
| |-FieldDecl 0x5555d4be01c0 <line:6374:3, col:29> col:29 semanticContainer 'const CXIdxContainerInfo *'
| |-FieldDecl 0x5555d4be0250 <line:6379:3, col:29> col:29 lexicalContainer 'const CXIdxContainerInfo *'
| | `-FullComment 0x5555d4c58de0 <line:6376:5, line:6377:49>
| |   `-ParagraphComment 0x5555d4c58db0 <line:6376:5, line:6377:49>
| |     |-TextComment 0x5555d4c58d60 <line:6376:5, col:65> Text=" Generally same as #semanticContainer but can be different in"
| |     `-TextComment 0x5555d4c58d80 <line:6377:5, col:49> Text=" cases like out-of-line C++ member functions."
| |-FieldDecl 0x5555d4be02b8 <line:6380:3, col:7> col:7 isRedeclaration 'int'
| |-FieldDecl 0x5555d4be0320 <line:6381:3, col:7> col:7 isDefinition 'int'
| |-FieldDecl 0x5555d4be0fb0 <line:6382:3, col:7> col:7 isContainer 'int'
| |-FieldDecl 0x5555d4be1018 <line:6383:3, col:29> col:29 declAsContainer 'const CXIdxContainerInfo *'
| |-FieldDecl 0x5555d4be10b0 <line:6388:3, col:7> col:7 isImplicit 'int'
| | `-FullComment 0x5555d4c58ed0 <line:6385:5, line:6386:71>
| |   `-ParagraphComment 0x5555d4c58ea0 <line:6385:5, line:6386:71>
| |     |-TextComment 0x5555d4c58e50 <line:6385:5, col:69> Text=" Whether the declaration exists in code or was created implicitly"
| |     `-TextComment 0x5555d4c58e70 <line:6386:5, col:71> Text=" by the compiler, e.g. implicit Objective-C methods for properties."
| |-FieldDecl 0x5555d4be1118 <line:6389:3, col:31> col:31 attributes 'const CXIdxAttrInfo *const *'
| |-FieldDecl 0x5555d4be1180 <line:6390:3, col:12> col:12 numAttributes 'unsigned int'
| `-FieldDecl 0x5555d4be11e8 <line:6392:3, col:12> col:12 flags 'unsigned int'
|-TypedefDecl 0x5555d4be1298 <line:6370:1, line:6394:3> col:3 referenced CXIdxDeclInfo 'struct CXIdxDeclInfo':'CXIdxDeclInfo'
| `-ElaboratedType 0x5555d4be1240 'struct CXIdxDeclInfo' sugar
|   `-RecordType 0x5555d4bdffa0 'CXIdxDeclInfo'
|     `-Record 0x5555d4bdff18 ''
|-EnumDecl 0x5555d4be1308 <line:6396:9, line:6400:1> line:6396:9
| |-EnumConstantDecl 0x5555d4be1410 <line:6397:3, col:35> col:3 CXIdxObjCContainer_ForwardRef 'int'
| | `-ConstantExpr 0x5555d4be13f0 <col:35> 'int'
| |   |-value: Int 0
| |   `-IntegerLiteral 0x5555d4be13d0 <col:35> 'int' 0
| |-EnumConstantDecl 0x5555d4be14a0 <line:6398:3, col:34> col:3 CXIdxObjCContainer_Interface 'int'
| | `-ConstantExpr 0x5555d4be1480 <col:34> 'int'
| |   |-value: Int 1
| |   `-IntegerLiteral 0x5555d4be1460 <col:34> 'int' 1
| `-EnumConstantDecl 0x5555d4be1530 <line:6399:3, col:39> col:3 CXIdxObjCContainer_Implementation 'int'
|   `-ConstantExpr 0x5555d4be1510 <col:39> 'int'
|     |-value: Int 2
|     `-IntegerLiteral 0x5555d4be14f0 <col:39> 'int' 2
|-TypedefDecl 0x5555d4be15d8 <line:6396:1, line:6400:3> col:3 referenced CXIdxObjCContainerKind 'enum CXIdxObjCContainerKind':'CXIdxObjCContainerKind'
| `-ElaboratedType 0x5555d4be1580 'enum CXIdxObjCContainerKind' sugar
|   `-EnumType 0x5555d4be13b0 'CXIdxObjCContainerKind'
|     `-Enum 0x5555d4be1308 ''
|-RecordDecl 0x5555d4be1648 <line:6402:9, line:6405:1> line:6402:9 struct definition
| |-FieldDecl 0x5555d4be17c0 <line:6403:3, col:24> col:24 declInfo 'const CXIdxDeclInfo *'
| `-FieldDecl 0x5555d4be1880 <line:6404:3, col:26> col:26 kind 'CXIdxObjCContainerKind':'CXIdxObjCContainerKind'
|-TypedefDecl 0x5555d4be1928 <line:6402:1, line:6405:3> col:3 referenced CXIdxObjCContainerDeclInfo 'struct CXIdxObjCContainerDeclInfo':'CXIdxObjCContainerDeclInfo'
| `-ElaboratedType 0x5555d4be18d0 'struct CXIdxObjCContainerDeclInfo' sugar
|   `-RecordType 0x5555d4be16d0 'CXIdxObjCContainerDeclInfo'
|     `-Record 0x5555d4be1648 ''
|-RecordDecl 0x5555d4be1998 <line:6407:9, line:6411:1> line:6407:9 struct definition
| |-FieldDecl 0x5555d4be1a58 <line:6408:3, col:26> col:26 base 'const CXIdxEntityInfo *'
| |-FieldDecl 0x5555d4be1ab8 <line:6409:3, col:12> col:12 cursor 'CXCursor':'CXCursor'
| `-FieldDecl 0x5555d4be1b18 <line:6410:3, col:12> col:12 loc 'CXIdxLoc':'CXIdxLoc'
|-TypedefDecl 0x5555d4be1bc8 <line:6407:1, line:6411:3> col:3 referenced CXIdxBaseClassInfo 'struct CXIdxBaseClassInfo':'CXIdxBaseClassInfo'
| `-ElaboratedType 0x5555d4be1b70 'struct CXIdxBaseClassInfo' sugar
|   `-RecordType 0x5555d4be1a20 'CXIdxBaseClassInfo'
|     `-Record 0x5555d4be1998 ''
|-RecordDecl 0x5555d4be1c38 <line:6413:9, line:6417:1> line:6413:9 struct definition
| |-FieldDecl 0x5555d4be1cf8 <line:6414:3, col:26> col:26 protocol 'const CXIdxEntityInfo *'
| |-FieldDecl 0x5555d4be1d58 <line:6415:3, col:12> col:12 cursor 'CXCursor':'CXCursor'
| `-FieldDecl 0x5555d4be1db8 <line:6416:3, col:12> col:12 loc 'CXIdxLoc':'CXIdxLoc'
|-TypedefDecl 0x5555d4be1e68 <line:6413:1, line:6417:3> col:3 referenced CXIdxObjCProtocolRefInfo 'struct CXIdxObjCProtocolRefInfo':'CXIdxObjCProtocolRefInfo'
| `-ElaboratedType 0x5555d4be1e10 'struct CXIdxObjCProtocolRefInfo' sugar
|   `-RecordType 0x5555d4be1cc0 'CXIdxObjCProtocolRefInfo'
|     `-Record 0x5555d4be1c38 ''
|-RecordDecl 0x5555d4be1ed8 <line:6419:9, line:6422:1> line:6419:9 struct definition
| |-FieldDecl 0x5555d4be30d0 <line:6420:3, col:42> col:42 protocols 'const CXIdxObjCProtocolRefInfo *const *'
| `-FieldDecl 0x5555d4be3138 <line:6421:3, col:12> col:12 numProtocols 'unsigned int'
|-TypedefDecl 0x5555d4be31e8 <line:6419:1, line:6422:3> col:3 referenced CXIdxObjCProtocolRefListInfo 'struct CXIdxObjCProtocolRefListInfo':'CXIdxObjCProtocolRefListInfo'
| `-ElaboratedType 0x5555d4be3190 'struct CXIdxObjCProtocolRefListInfo' sugar
|   `-RecordType 0x5555d4be1f60 'CXIdxObjCProtocolRefListInfo'
|     `-Record 0x5555d4be1ed8 ''
|-RecordDecl 0x5555d4be3258 <line:6424:9, line:6428:1> line:6424:9 struct definition
| |-FieldDecl 0x5555d4be33d0 <line:6425:3, col:37> col:37 containerInfo 'const CXIdxObjCContainerDeclInfo *'
| |-FieldDecl 0x5555d4be34f0 <line:6426:3, col:29> col:29 superInfo 'const CXIdxBaseClassInfo *'
| `-FieldDecl 0x5555d4be3610 <line:6427:3, col:39> col:39 protocols 'const CXIdxObjCProtocolRefListInfo *'
|-TypedefDecl 0x5555d4be36b8 <line:6424:1, line:6428:3> col:3 referenced CXIdxObjCInterfaceDeclInfo 'struct CXIdxObjCInterfaceDeclInfo':'CXIdxObjCInterfaceDeclInfo'
| `-ElaboratedType 0x5555d4be3660 'struct CXIdxObjCInterfaceDeclInfo' sugar
|   `-RecordType 0x5555d4be32e0 'CXIdxObjCInterfaceDeclInfo'
|     `-Record 0x5555d4be3258 ''
|-RecordDecl 0x5555d4be3728 <line:6430:9, line:6436:1> line:6430:9 struct definition
| |-FieldDecl 0x5555d4be37e8 <line:6431:3, col:37> col:37 containerInfo 'const CXIdxObjCContainerDeclInfo *'
| |-FieldDecl 0x5555d4be3850 <line:6432:3, col:26> col:26 objcClass 'const CXIdxEntityInfo *'
| |-FieldDecl 0x5555d4be38b0 <line:6433:3, col:12> col:12 classCursor 'CXCursor':'CXCursor'
| |-FieldDecl 0x5555d4be3910 <line:6434:3, col:12> col:12 classLoc 'CXIdxLoc':'CXIdxLoc'
| `-FieldDecl 0x5555d4be3978 <line:6435:3, col:39> col:39 protocols 'const CXIdxObjCProtocolRefListInfo *'
|-TypedefDecl 0x5555d4be3a28 <line:6430:1, line:6436:3> col:3 referenced CXIdxObjCCategoryDeclInfo 'struct CXIdxObjCCategoryDeclInfo':'CXIdxObjCCategoryDeclInfo'
| `-ElaboratedType 0x5555d4be39d0 'struct CXIdxObjCCategoryDeclInfo' sugar
|   `-RecordType 0x5555d4be37b0 'CXIdxObjCCategoryDeclInfo'
|     `-Record 0x5555d4be3728 ''
|-RecordDecl 0x5555d4be3a98 <line:6438:9, line:6442:1> line:6438:9 struct definition
| |-FieldDecl 0x5555d4be3b58 <line:6439:3, col:24> col:24 declInfo 'const CXIdxDeclInfo *'
| |-FieldDecl 0x5555d4be3bc0 <line:6440:3, col:26> col:26 getter 'const CXIdxEntityInfo *'
| `-FieldDecl 0x5555d4be3c28 <line:6441:3, col:26> col:26 setter 'const CXIdxEntityInfo *'
|-TypedefDecl 0x5555d4be3cd8 <line:6438:1, line:6442:3> col:3 referenced CXIdxObjCPropertyDeclInfo 'struct CXIdxObjCPropertyDeclInfo':'CXIdxObjCPropertyDeclInfo'
| `-ElaboratedType 0x5555d4be3c80 'struct CXIdxObjCPropertyDeclInfo' sugar
|   `-RecordType 0x5555d4be3b20 'CXIdxObjCPropertyDeclInfo'
|     `-Record 0x5555d4be3a98 ''
|-RecordDecl 0x5555d4be3d48 <line:6444:9, line:6448:1> line:6444:9 struct definition
| |-FieldDecl 0x5555d4be3e08 <line:6445:3, col:24> col:24 declInfo 'const CXIdxDeclInfo *'
| |-FieldDecl 0x5555d4be3ed0 <line:6446:3, col:36> col:36 bases 'const CXIdxBaseClassInfo *const *'
| `-FieldDecl 0x5555d4be3f38 <line:6447:3, col:12> col:12 numBases 'unsigned int'
|-TypedefDecl 0x5555d4be4000 <line:6444:1, line:6448:3> col:3 referenced CXIdxCXXClassDeclInfo 'struct CXIdxCXXClassDeclInfo':'CXIdxCXXClassDeclInfo'
| `-ElaboratedType 0x5555d4be3f90 'struct CXIdxCXXClassDeclInfo' sugar
|   `-RecordType 0x5555d4be3dd0 'CXIdxCXXClassDeclInfo'
|     `-Record 0x5555d4be3d48 ''
|-EnumDecl 0x5555d4be40c8 <line:6456:9, line:6466:1> line:6456:9
| |-FullComment 0x5555d4c59110 <line:6451:3, line:6455:1>
| | |-ParagraphComment 0x5555d4c58f70 <line:6451:3, col:50>
| | | `-TextComment 0x5555d4c58f40 <col:3, col:50> Text=" Data for IndexerCallbacks#indexEntityReference."
| | `-ParagraphComment 0x5555d4c590e0 <line:6453:3, line:6455:1>
| |   |-TextComment 0x5555d4c58f90 <line:6453:3, col:64> Text=" This may be deprecated in a future version as this duplicates"
| |   |-TextComment 0x5555d4c58fb0 <line:6454:3, col:7> Text=" the "
| |   |-InlineCommandComment 0x5555d4c59000 <col:8, col:9> Name="c" RenderMonospaced Arg[0]="CXSymbolRole_Implicit"
| |   |-TextComment 0x5555d4c59020 <col:32, col:39> Text=" bit in "
| |   |-InlineCommandComment 0x5555d4c59070 <col:40, col:41> Name="c" RenderMonospaced Arg[0]="CXSymbolRole."
| |   `-TextComment 0x5555d4c59090 <line:6455:1> Text=" "
| |-EnumConstantDecl 0x5555d4be41d0 <line:6460:3, col:27> col:3 CXIdxEntityRef_Direct 'int'
| | |-ConstantExpr 0x5555d4be41b0 <col:27> 'int'
| | | |-value: Int 1
| | | `-IntegerLiteral 0x5555d4be4190 <col:27> 'int' 1
| | `-FullComment 0x5555d4c591e0 <line:6458:5, col:54>
| |   `-ParagraphComment 0x5555d4c591b0 <col:5, col:54>
| |     `-TextComment 0x5555d4c59180 <col:5, col:54> Text=" The entity is referenced directly in user's code."
| `-EnumConstantDecl 0x5555d4be4288 <line:6465:3, col:29> col:3 CXIdxEntityRef_Implicit 'int'
|   |-ConstantExpr 0x5555d4be4268 <col:29> 'int'
|   | |-value: Int 2
|   | `-IntegerLiteral 0x5555d4be4248 <col:29> 'int' 2
|   `-FullComment 0x5555d4c592d0 <line:6462:5, line:6463:24>
|     `-ParagraphComment 0x5555d4c592a0 <line:6462:5, line:6463:24>
|       |-TextComment 0x5555d4c59250 <line:6462:5, col:69> Text=" An implicit reference, e.g. a reference of an Objective-C method"
|       `-TextComment 0x5555d4c59270 <line:6463:5, col:24> Text=" via the dot syntax."
|-TypedefDecl 0x5555d4be4338 <line:6456:1, line:6466:3> col:3 referenced CXIdxEntityRefKind 'enum CXIdxEntityRefKind':'CXIdxEntityRefKind'
| |-ElaboratedType 0x5555d4be42e0 'enum CXIdxEntityRefKind' sugar
| | `-EnumType 0x5555d4be4170 'CXIdxEntityRefKind'
| |   `-Enum 0x5555d4be40c8 ''
| `-FullComment 0x5555d4c59510 <line:6451:3, line:6455:1>
|   |-ParagraphComment 0x5555d4c59370 <line:6451:3, col:50>
|   | `-TextComment 0x5555d4c59340 <col:3, col:50> Text=" Data for IndexerCallbacks#indexEntityReference."
|   `-ParagraphComment 0x5555d4c594e0 <line:6453:3, line:6455:1>
|     |-TextComment 0x5555d4c59390 <line:6453:3, col:64> Text=" This may be deprecated in a future version as this duplicates"
|     |-TextComment 0x5555d4c593b0 <line:6454:3, col:7> Text=" the "
|     |-InlineCommandComment 0x5555d4c59400 <col:8, col:9> Name="c" RenderMonospaced Arg[0]="CXSymbolRole_Implicit"
|     |-TextComment 0x5555d4c59420 <col:32, col:39> Text=" bit in "
|     |-InlineCommandComment 0x5555d4c59470 <col:40, col:41> Name="c" RenderMonospaced Arg[0]="CXSymbolRole."
|     `-TextComment 0x5555d4c59490 <line:6455:1> Text=" "
|-EnumDecl 0x5555d4be43d0 <line:6474:9, line:6485:1> line:6474:9
| |-FullComment 0x5555d4c59650 <line:6469:3, line:6472:68>
| | |-ParagraphComment 0x5555d4c595b0 <line:6469:3, col:51>
| | | `-TextComment 0x5555d4c59580 <col:3, col:51> Text=" Roles that are attributed to symbol occurrences."
| | `-ParagraphComment 0x5555d4c59620 <line:6471:3, line:6472:68>
| |   |-TextComment 0x5555d4c595d0 <line:6471:3, col:79> Text=" Internal: this currently mirrors low 9 bits of clang::index::SymbolRole with"
| |   `-TextComment 0x5555d4c595f0 <line:6472:3, col:68> Text=" higher bits zeroed. These high bits may be exposed in the future."
| |-EnumConstantDecl 0x5555d4be44d0 <line:6475:3, col:23> col:3 CXSymbolRole_None 'int'
| | `-ConstantExpr 0x5555d4be44b0 <col:23> 'int'
| |   |-value: Int 0
| |   `-IntegerLiteral 0x5555d4be4490 <col:23> 'int' 0
| |-EnumConstantDecl 0x5555d4be45a0 <line:6476:3, col:35> col:3 CXSymbolRole_Declaration 'int'
| | `-ConstantExpr 0x5555d4be4580 <col:30, col:35> 'int'
| |   |-value: Int 1
| |   `-BinaryOperator 0x5555d4be4560 <col:30, col:35> 'int' '<<'
| |     |-IntegerLiteral 0x5555d4be4520 <col:30> 'int' 1
| |     `-IntegerLiteral 0x5555d4be4540 <col:35> 'int' 0
| |-EnumConstantDecl 0x5555d4be4670 <line:6477:3, col:34> col:3 CXSymbolRole_Definition 'int'
| | `-ConstantExpr 0x5555d4be4650 <col:29, col:34> 'int'
| |   |-value: Int 2
| |   `-BinaryOperator 0x5555d4be4630 <col:29, col:34> 'int' '<<'
| |     |-IntegerLiteral 0x5555d4be45f0 <col:29> 'int' 1
| |     `-IntegerLiteral 0x5555d4be4610 <col:34> 'int' 1
| |-EnumConstantDecl 0x5555d4be4740 <line:6478:3, col:33> col:3 CXSymbolRole_Reference 'int'
| | `-ConstantExpr 0x5555d4be4720 <col:28, col:33> 'int'
| |   |-value: Int 4
| |   `-BinaryOperator 0x5555d4be4700 <col:28, col:33> 'int' '<<'
| |     |-IntegerLiteral 0x5555d4be46c0 <col:28> 'int' 1
| |     `-IntegerLiteral 0x5555d4be46e0 <col:33> 'int' 2
| |-EnumConstantDecl 0x5555d4be4810 <line:6479:3, col:28> col:3 CXSymbolRole_Read 'int'
| | `-ConstantExpr 0x5555d4be47f0 <col:23, col:28> 'int'
| |   |-value: Int 8
| |   `-BinaryOperator 0x5555d4be47d0 <col:23, col:28> 'int' '<<'
| |     |-IntegerLiteral 0x5555d4be4790 <col:23> 'int' 1
| |     `-IntegerLiteral 0x5555d4be47b0 <col:28> 'int' 3
| |-EnumConstantDecl 0x5555d4be48e0 <line:6480:3, col:29> col:3 CXSymbolRole_Write 'int'
| | `-ConstantExpr 0x5555d4be48c0 <col:24, col:29> 'int'
| |   |-value: Int 16
| |   `-BinaryOperator 0x5555d4be48a0 <col:24, col:29> 'int' '<<'
| |     |-IntegerLiteral 0x5555d4be4860 <col:24> 'int' 1
| |     `-IntegerLiteral 0x5555d4be4880 <col:29> 'int' 4
| |-EnumConstantDecl 0x5555d4be49b0 <line:6481:3, col:28> col:3 CXSymbolRole_Call 'int'
| | `-ConstantExpr 0x5555d4be4990 <col:23, col:28> 'int'
| |   |-value: Int 32
| |   `-BinaryOperator 0x5555d4be4970 <col:23, col:28> 'int' '<<'
| |     |-IntegerLiteral 0x5555d4be4930 <col:23> 'int' 1
| |     `-IntegerLiteral 0x5555d4be4950 <col:28> 'int' 5
| |-EnumConstantDecl 0x5555d4be4a80 <line:6482:3, col:31> col:3 CXSymbolRole_Dynamic 'int'
| | `-ConstantExpr 0x5555d4be4a60 <col:26, col:31> 'int'
| |   |-value: Int 64
| |   `-BinaryOperator 0x5555d4be4a40 <col:26, col:31> 'int' '<<'
| |     |-IntegerLiteral 0x5555d4be4a00 <col:26> 'int' 1
| |     `-IntegerLiteral 0x5555d4be4a20 <col:31> 'int' 6
| |-EnumConstantDecl 0x5555d4be4b50 <line:6483:3, col:33> col:3 CXSymbolRole_AddressOf 'int'
| | `-ConstantExpr 0x5555d4be4b30 <col:28, col:33> 'int'
| |   |-value: Int 128
| |   `-BinaryOperator 0x5555d4be4b10 <col:28, col:33> 'int' '<<'
| |     |-IntegerLiteral 0x5555d4be4ad0 <col:28> 'int' 1
| |     `-IntegerLiteral 0x5555d4be4af0 <col:33> 'int' 7
| `-EnumConstantDecl 0x5555d4be4c20 <line:6484:3, col:32> col:3 CXSymbolRole_Implicit 'int'
|   `-ConstantExpr 0x5555d4be4c00 <col:27, col:32> 'int'
|     |-value: Int 256
|     `-BinaryOperator 0x5555d4be4be0 <col:27, col:32> 'int' '<<'
|       |-IntegerLiteral 0x5555d4be4ba0 <col:27> 'int' 1
|       `-IntegerLiteral 0x5555d4be4bc0 <col:32> 'int' 8
|-TypedefDecl 0x5555d4be4cc8 <line:6474:1, line:6485:3> col:3 referenced CXSymbolRole 'enum CXSymbolRole':'CXSymbolRole'
| |-ElaboratedType 0x5555d4be4c70 'enum CXSymbolRole' sugar
| | `-EnumType 0x5555d4be4470 'CXSymbolRole'
| |   `-Enum 0x5555d4be43d0 ''
| `-FullComment 0x5555d4c59790 <line:6469:3, line:6472:68>
|   |-ParagraphComment 0x5555d4c596f0 <line:6469:3, col:51>
|   | `-TextComment 0x5555d4c596c0 <col:3, col:51> Text=" Roles that are attributed to symbol occurrences."
|   `-ParagraphComment 0x5555d4c59760 <line:6471:3, line:6472:68>
|     |-TextComment 0x5555d4c59710 <line:6471:3, col:79> Text=" Internal: this currently mirrors low 9 bits of clang::index::SymbolRole with"
|     `-TextComment 0x5555d4c59730 <line:6472:3, col:68> Text=" higher bits zeroed. These high bits may be exposed in the future."
|-RecordDecl 0x5555d4be4d60 <line:6490:9, line:6521:1> line:6490:9 struct definition
| |-FullComment 0x5555d4c59860 <line:6488:3, col:50>
| | `-ParagraphComment 0x5555d4c59830 <col:3, col:50>
| |   `-TextComment 0x5555d4c59800 <col:3, col:50> Text=" Data for IndexerCallbacks#indexEntityReference."
| |-FieldDecl 0x5555d4be4e70 <line:6491:3, col:22> col:22 kind 'CXIdxEntityRefKind':'CXIdxEntityRefKind'
| |-FieldDecl 0x5555d4be4ef8 <line:6495:3, col:12> col:12 cursor 'CXCursor':'CXCursor'
| | `-FullComment 0x5555d4c59930 <line:6493:5, col:22>
| |   `-ParagraphComment 0x5555d4c59900 <col:5, col:22>
| |     `-TextComment 0x5555d4c598d0 <col:5, col:22> Text=" Reference cursor."
| |-FieldDecl 0x5555d4be4f58 <line:6496:3, col:12> col:12 loc 'CXIdxLoc':'CXIdxLoc'
| |-FieldDecl 0x5555d4be5008 <line:6500:3, col:26> col:26 referencedEntity 'const CXIdxEntityInfo *'
| | `-FullComment 0x5555d4c59a00 <line:6498:5, col:37>
| |   `-ParagraphComment 0x5555d4c599d0 <col:5, col:37>
| |     `-TextComment 0x5555d4c599a0 <col:5, col:37> Text=" The entity that gets referenced."
| |-FieldDecl 0x5555d4be50a0 <line:6512:3, col:26> col:26 parentEntity 'const CXIdxEntityInfo *'
| | `-FullComment 0x5555d4c59c50 <line:6502:5, line:6510:50>
| |   |-ParagraphComment 0x5555d4c59aa0 <line:6502:5, col:54>
| |   | `-TextComment 0x5555d4c59a70 <col:5, col:54> Text=" Immediate "parent" of the reference. For example:"
| |   |-ParagraphComment 0x5555d4c59af0 <line:6504:5>
| |   | `-TextComment 0x5555d4c59ac0 <col:5> Text=" "
| |   |-VerbatimBlockComment 0x5555d4c59b10 <col:6, col:11> Name="code" CloseName="endcode"
| |   | `-VerbatimBlockLineComment 0x5555d4c59b60 <line:6505:5, col:15> Text=" Foo *var;"
| |   `-ParagraphComment 0x5555d4c59c10 <line:6508:5, line:6510:50>
| |     |-TextComment 0x5555d4c59b90 <line:6508:5, col:65> Text=" The parent of reference of type 'Foo' is the variable 'var'."
| |     |-TextComment 0x5555d4c59bb0 <line:6509:5, col:65> Text=" For references inside statement bodies of functions/methods,"
| |     `-TextComment 0x5555d4c59bd0 <line:6510:5, col:50> Text=" the parentEntity will be the function/method."
| |-FieldDecl 0x5555d4be5130 <line:6516:3, col:29> col:29 container 'const CXIdxContainerInfo *'
| | `-FullComment 0x5555d4c59d20 <line:6514:5, col:48>
| |   `-ParagraphComment 0x5555d4c59cf0 <col:5, col:48>
| |     `-TextComment 0x5555d4c59cc0 <col:5, col:48> Text=" Lexical container context of the reference."
| `-FieldDecl 0x5555d4be5220 <line:6520:3, col:16> col:16 role 'CXSymbolRole':'CXSymbolRole'
|   `-FullComment 0x5555d4c59df0 <line:6518:5, col:43>
|     `-ParagraphComment 0x5555d4c59dc0 <col:5, col:43>
|       `-TextComment 0x5555d4c59d90 <col:5, col:43> Text=" Sets of symbol roles of the reference."
|-TypedefDecl 0x5555d4be52c8 <line:6490:1, line:6521:3> col:3 referenced CXIdxEntityRefInfo 'struct CXIdxEntityRefInfo':'CXIdxEntityRefInfo'
| |-ElaboratedType 0x5555d4be5270 'struct CXIdxEntityRefInfo' sugar
| | `-RecordType 0x5555d4be4de0 'CXIdxEntityRefInfo'
| |   `-Record 0x5555d4be4d60 ''
| `-FullComment 0x5555d4c23d30 <line:6488:3, col:50>
|   `-ParagraphComment 0x5555d4c59e90 <col:3, col:50>
|     `-TextComment 0x5555d4c59e60 <col:3, col:50> Text=" Data for IndexerCallbacks#indexEntityReference."
|-RecordDecl 0x5555d4be5360 <line:6527:9, line:6573:1> line:6527:9 struct definition
| |-FullComment 0x5555d4c23e20 <line:6524:3, line:6525:31>
| | `-ParagraphComment 0x5555d4c23df0 <line:6524:3, line:6525:31>
| |   |-TextComment 0x5555d4c23da0 <line:6524:3, col:58> Text=" A group of callbacks used by #clang_indexSourceFile and"
| |   `-TextComment 0x5555d4c23dc0 <line:6525:3, col:31> Text=" #clang_indexTranslationUnit."
| |-FieldDecl 0x5555d4be5630 <line:6532:3, col:61> col:9 abortQuery 'int (*)(CXClientData, void *)'
| | `-FullComment 0x5555d4c23f10 <line:6529:5, line:6530:56>
| |   `-ParagraphComment 0x5555d4c23ee0 <line:6529:5, line:6530:56>
| |     |-TextComment 0x5555d4c23e90 <line:6529:5, col:69> Text=" Called periodically to check whether indexing should be aborted."
| |     `-TextComment 0x5555d4c23eb0 <line:6530:5, col:56> Text=" Should return 0 to continue, and non-zero to abort."
| |-FieldDecl 0x5555d4be5970 <line:6537:3, col:79> col:10 diagnostic 'void (*)(CXClientData, CXDiagnosticSet, void *)'
| | `-FullComment 0x5555d4c23fe0 <line:6535:5, col:71>
| |   `-ParagraphComment 0x5555d4c23fb0 <col:5, col:71>
| |     `-TextComment 0x5555d4c23f80 <col:5, col:71> Text=" Called at the end of indexing; passes the complete diagnostic set."
| |-FieldDecl 0x5555d4be5ce0 <line:6539:3, line:6540:52> line:6539:21 enteredMainFile 'CXIdxClientFile (*)(CXClientData, CXFile, void *)'
| |-FieldDecl 0x5555d4be6068 <line:6545:3, line:6546:66> line:6545:21 ppIncludedFile 'CXIdxClientFile (*)(CXClientData, const CXIdxIncludedFileInfo *)'
| | `-FullComment 0x5555d4c24150 <line:6543:5, col:51>
| |   `-ParagraphComment 0x5555d4c24120 <col:5, col:51>
| |     |-TextComment 0x5555d4c24050 <col:5, col:29> Text=" Called when a file gets "
| |     |-TextComment 0x5555d4c24070 <col:30, col:31> Text="#"
| |     |-TextComment 0x5555d4c24090 <col:32, col:40> Text="included/"
| |     |-TextComment 0x5555d4c240b0 <col:41, col:42> Text="#"
| |     `-TextComment 0x5555d4c240d0 <col:43, col:51> Text="imported."
| |-FieldDecl 0x5555d4be6458 <line:6556:3, line:6557:73> line:6556:24 importedASTFile 'CXIdxClientASTFile (*)(CXClientData, const CXIdxImportedASTFileInfo *)'
| | `-FullComment 0x5555d4c242e0 <line:6549:5, line:6554:18>
| |   |-ParagraphComment 0x5555d4c241f0 <line:6549:5, col:58>
| |   | `-TextComment 0x5555d4c241c0 <col:5, col:58> Text=" Called when a AST file (PCH or module) gets imported."
| |   `-ParagraphComment 0x5555d4c242b0 <line:6551:5, line:6554:18>
| |     |-TextComment 0x5555d4c24210 <line:6551:5, col:77> Text=" AST files will not get indexed (there will not be callbacks to index all"
| |     |-TextComment 0x5555d4c24230 <line:6552:5, col:77> Text=" the entities in an AST file). The recommended action is that, if the AST"
| |     |-TextComment 0x5555d4c24250 <line:6553:5, col:76> Text=" file is not already indexed, to initiate a new indexing job specific to"
| |     `-TextComment 0x5555d4c24270 <line:6554:5, col:18> Text=" the AST file."
| |-FieldDecl 0x5555d4be6788 <line:6562:3, line:6563:64> line:6562:26 startedTranslationUnit 'CXIdxClientContainer (*)(CXClientData, void *)'
| | `-FullComment 0x5555d4c243b0 <line:6560:5, col:60>
| |   `-ParagraphComment 0x5555d4c24380 <col:5, col:60>
| |     `-TextComment 0x5555d4c24350 <col:5, col:60> Text=" Called at the beginning of indexing a translation unit."
| |-FieldDecl 0x5555d4be6a18 <line:6565:3, col:75> col:10 indexDeclaration 'void (*)(CXClientData, const CXIdxDeclInfo *)'
| `-FieldDecl 0x5555d4be6d98 <line:6570:3, line:6571:58> line:6570:10 indexEntityReference 'void (*)(CXClientData, const CXIdxEntityRefInfo *)'
|   `-FullComment 0x5555d4c24480 <line:6568:5, col:46>
|     `-ParagraphComment 0x5555d4c24450 <col:5, col:46>
|       `-TextComment 0x5555d4c24420 <col:5, col:46> Text=" Called to index a reference of an entity."
|-TypedefDecl 0x5555d4be6e48 <line:6527:1, line:6573:3> col:3 referenced IndexerCallbacks 'struct IndexerCallbacks':'IndexerCallbacks'
| |-ElaboratedType 0x5555d4be6df0 'struct IndexerCallbacks' sugar
| | `-RecordType 0x5555d4be53e0 'IndexerCallbacks'
| |   `-Record 0x5555d4be5360 ''
| `-FullComment 0x5555d4c24570 <line:6524:3, line:6525:31>
|   `-ParagraphComment 0x5555d4c24540 <line:6524:3, line:6525:31>
|     |-TextComment 0x5555d4c244f0 <line:6524:3, col:58> Text=" A group of callbacks used by #clang_indexSourceFile and"
|     `-TextComment 0x5555d4c24510 <line:6525:3, col:31> Text=" #clang_indexTranslationUnit."
|-FunctionDecl 0x5555d4be7010 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:6575:73> col:20 clang_index_isEntityObjCContainerKind 'int (CXIdxEntityKind)'
| |-ParmVarDecl 0x5555d4be6ee8 <col:58> col:73 'CXIdxEntityKind':'CXIdxEntityKind'
| `-VisibilityAttr 0x5555d4be70c0 </workspace/clang-c/Platform.h:34:41, col:61> Default
|-FunctionDecl 0x5555d4be7250 <col:26, /workspace/clang-c/Index.h:6577:59> col:1 clang_index_getObjCContainerDeclInfo 'const CXIdxObjCContainerDeclInfo *(const CXIdxDeclInfo *)'
| |-ParmVarDecl 0x5555d4be7150 <col:38, col:58> col:59 'const CXIdxDeclInfo *'
| `-VisibilityAttr 0x5555d4be7300 </workspace/clang-c/Platform.h:34:41, col:61> Default
|-FunctionDecl 0x5555d4be7550 <col:26, /workspace/clang-c/Index.h:6580:59> col:1 clang_index_getObjCInterfaceDeclInfo 'const CXIdxObjCInterfaceDeclInfo *(const CXIdxDeclInfo *)'
| |-ParmVarDecl 0x5555d4be73f8 <col:38, col:58> col:59 'const CXIdxDeclInfo *'
| `-VisibilityAttr 0x5555d4be7600 </workspace/clang-c/Platform.h:34:41, col:61> Default
|-FunctionDecl 0x5555d4be7850 <col:26, /workspace/clang-c/Index.h:6584:58> col:1 clang_index_getObjCCategoryDeclInfo 'const CXIdxObjCCategoryDeclInfo *(const CXIdxDeclInfo *)'
| |-ParmVarDecl 0x5555d4be76f8 <col:37, col:57> col:58 'const CXIdxDeclInfo *'
| `-VisibilityAttr 0x5555d4be7900 </workspace/clang-c/Platform.h:34:41, col:61> Default
|-FunctionDecl 0x5555d4be7a90 <col:26, /workspace/clang-c/Index.h:6587:61> col:1 clang_index_getObjCProtocolRefListInfo 'const CXIdxObjCProtocolRefListInfo *(const CXIdxDeclInfo *)'
| |-ParmVarDecl 0x5555d4be7990 <col:40, col:60> col:61 'const CXIdxDeclInfo *'
| `-VisibilityAttr 0x5555d4be7b40 </workspace/clang-c/Platform.h:34:41, col:61> Default
|-FunctionDecl 0x5555d4be7d90 <col:26, /workspace/clang-c/Index.h:6590:58> col:1 clang_index_getObjCPropertyDeclInfo 'const CXIdxObjCPropertyDeclInfo *(const CXIdxDeclInfo *)'
| |-ParmVarDecl 0x5555d4be7c38 <col:37, col:57> col:58 'const CXIdxDeclInfo *'
| `-VisibilityAttr 0x5555d4be7e40 </workspace/clang-c/Platform.h:34:41, col:61> Default
|-FunctionDecl 0x5555d4be80b0 <col:26, /workspace/clang-c/Index.h:6593:64> col:1 clang_index_getIBOutletCollectionAttrInfo 'const CXIdxIBOutletCollectionAttrInfo *(const CXIdxAttrInfo *)'
| |-ParmVarDecl 0x5555d4be7f38 <col:43, col:63> col:64 'const CXIdxAttrInfo *'
| `-VisibilityAttr 0x5555d4be8160 </workspace/clang-c/Platform.h:34:41, col:61> Default
|-FunctionDecl 0x5555d4be83b0 <col:26, /workspace/clang-c/Index.h:6596:54> col:1 clang_index_getCXXClassDeclInfo 'const CXIdxCXXClassDeclInfo *(const CXIdxDeclInfo *)'
| |-ParmVarDecl 0x5555d4be8258 <col:33, col:53> col:54 'const CXIdxDeclInfo *'
| `-VisibilityAttr 0x5555d4be8460 </workspace/clang-c/Platform.h:34:41, col:61> Default
|-FunctionDecl 0x5555d4be8618 <col:26, /workspace/clang-c/Index.h:6603:58> col:1 clang_index_getClientContainer 'CXIdxClientContainer (const CXIdxContainerInfo *)'
| |-ParmVarDecl 0x5555d4be8520 <col:32, col:57> col:58 'const CXIdxContainerInfo *'
| |-VisibilityAttr 0x5555d4be86c8 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c24660 </workspace/clang-c/Index.h:6599:3, line:6600:13>
|   `-ParagraphComment 0x5555d4c24630 <line:6599:3, line:6600:13>
|     |-TextComment 0x5555d4c245e0 <line:6599:3, col:61> Text=" For retrieving a custom CXIdxClientContainer attached to a"
|     `-TextComment 0x5555d4c24600 <line:6600:3, col:13> Text=" container."
|-FunctionDecl 0x5555d4be8908 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:6610:72> line:6609:21 clang_index_setClientContainer 'void (const CXIdxContainerInfo *, CXIdxClientContainer)'
| |-ParmVarDecl 0x5555d4be8780 <col:52, col:77> col:78 'const CXIdxContainerInfo *'
| |-ParmVarDecl 0x5555d4be87f8 <line:6610:52> col:72 'CXIdxClientContainer':'void *'
| |-VisibilityAttr 0x5555d4be89c0 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c24750 </workspace/clang-c/Index.h:6606:3, line:6607:13>
|   `-ParagraphComment 0x5555d4c24720 <line:6606:3, line:6607:13>
|     |-TextComment 0x5555d4c246d0 <line:6606:3, col:58> Text=" For setting a custom CXIdxClientContainer attached to a"
|     `-TextComment 0x5555d4c246f0 <line:6607:3, col:13> Text=" container."
|-FunctionDecl 0x5555d4be8bd8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:6616:52> col:1 clang_index_getClientEntity 'CXIdxClientEntity (const CXIdxEntityInfo *)'
| |-ParmVarDecl 0x5555d4be8ae8 <col:29, col:51> col:52 'const CXIdxEntityInfo *'
| |-VisibilityAttr 0x5555d4be8c88 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c24820 </workspace/clang-c/Index.h:6613:3, col:67>
|   `-ParagraphComment 0x5555d4c247f0 <col:3, col:67>
|     `-TextComment 0x5555d4c247c0 <col:3, col:67> Text=" For retrieving a custom CXIdxClientEntity attached to an entity."
|-FunctionDecl 0x5555d4be8ec8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:6622:66> line:6621:21 clang_index_setClientEntity 'void (const CXIdxEntityInfo *, CXIdxClientEntity)'
| |-ParmVarDecl 0x5555d4be8d40 <col:49, col:71> col:72 'const CXIdxEntityInfo *'
| |-ParmVarDecl 0x5555d4be8db8 <line:6622:49> col:66 'CXIdxClientEntity':'void *'
| |-VisibilityAttr 0x5555d4be8f80 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c248f0 </workspace/clang-c/Index.h:6619:3, col:64>
|   `-ParagraphComment 0x5555d4c248c0 <col:3, col:64>
|     `-TextComment 0x5555d4c24890 <col:3, col:64> Text=" For setting a custom CXIdxClientEntity attached to an entity."
|-TypedefDecl 0x5555d4b9a150 <line:6628:1, col:15> col:15 referenced CXIndexAction 'void *'
| |-PointerType 0x5555d4abe5e0 'void *'
| | `-BuiltinType 0x5555d4abdec0 'void'
| `-FullComment 0x5555d4c249e0 <line:6625:3, line:6626:21>
|   `-ParagraphComment 0x5555d4c249b0 <line:6625:3, line:6626:21>
|     |-TextComment 0x5555d4c24960 <line:6625:3, col:63> Text=" An indexing action/session, to be applied to one or multiple"
|     `-TextComment 0x5555d4c24980 <line:6626:3, col:21> Text=" translation units."
|-FunctionDecl 0x5555d4b9a338 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:6636:67> col:30 clang_IndexAction_create 'CXIndexAction (CXIndex)'
| |-ParmVarDecl 0x5555d4b9a270 <col:55, col:63> col:63 CIdx 'CXIndex':'void *'
| |-VisibilityAttr 0x5555d4b9a3e8 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c24be0 </workspace/clang-c/Index.h:6631:3, line:6634:79>
|   |-ParagraphComment 0x5555d4c24aa0 <line:6631:3, line:6632:21>
|   | |-TextComment 0x5555d4c24a50 <line:6631:3, col:63> Text=" An indexing action/session, to be applied to one or multiple"
|   | `-TextComment 0x5555d4c24a70 <line:6632:3, col:21> Text=" translation units."
|   |-ParagraphComment 0x5555d4c24af0 <line:6634:3>
|   | `-TextComment 0x5555d4c24ac0 <col:3> Text=" "
|   `-ParamCommandComment 0x5555d4c24b10 <col:4, col:79> [in] implicitly Param="CIdx" ParamIndex=0
|     `-ParagraphComment 0x5555d4c24ba0 <col:15, col:79>
|       `-TextComment 0x5555d4c24b70 <col:15, col:79> Text=" The index object with which the index action will be associated."
|-FunctionDecl 0x5555d4b9a558 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:6644:60> col:21 clang_IndexAction_dispose 'void (CXIndexAction)'
| |-ParmVarDecl 0x5555d4b9a498 <col:47> col:60 'CXIndexAction':'void *'
| |-VisibilityAttr 0x5555d4b9a608 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c24d20 </workspace/clang-c/Index.h:6639:3, line:6642:56>
|   |-ParagraphComment 0x5555d4c24c80 <line:6639:3, col:34>
|   | `-TextComment 0x5555d4c24c50 <col:3, col:34> Text=" Destroy the given index action."
|   `-ParagraphComment 0x5555d4c24cf0 <line:6641:3, line:6642:56>
|     |-TextComment 0x5555d4c24ca0 <line:6641:3, col:76> Text=" The index action must not be destroyed until all of the translation units"
|     `-TextComment 0x5555d4c24cc0 <line:6642:3, col:56> Text=" created within that index action have been destroyed."
|-EnumDecl 0x5555d4b9a688 <line:6646:9, line:6683:1> line:6646:9
| |-EnumConstantDecl 0x5555d4b9a790 <line:6650:3, col:21> col:3 CXIndexOpt_None 'int'
| | |-ConstantExpr 0x5555d4b9a770 <col:21> 'int'
| | | |-value: Int 0
| | | `-IntegerLiteral 0x5555d4b9a750 <col:21> 'int' 0
| | `-FullComment 0x5555d4c24df0 <line:6648:5, col:66>
| |   `-ParagraphComment 0x5555d4c24dc0 <col:5, col:66>
| |     `-TextComment 0x5555d4c24d90 <col:5, col:66> Text=" Used to indicate that no special indexing options are needed."
| |-EnumConstantDecl 0x5555d4b9a848 <line:6657:3, col:38> col:3 CXIndexOpt_SuppressRedundantRefs 'int'
| | |-ConstantExpr 0x5555d4b9a828 <col:38> 'int'
| | | |-value: Int 1
| | | `-IntegerLiteral 0x5555d4b9a808 <col:38> 'int' 1
| | `-FullComment 0x5555d4c24f10 <line:6653:5, line:6655:61>
| |   `-ParagraphComment 0x5555d4c24ee0 <line:6653:5, line:6655:61>
| |     |-TextComment 0x5555d4c24e60 <line:6653:5, col:71> Text=" Used to indicate that IndexerCallbacks#indexEntityReference should"
| |     |-TextComment 0x5555d4c24e80 <line:6654:5, col:77> Text=" be invoked for only one reference of an entity per source file that does"
| |     `-TextComment 0x5555d4c24ea0 <line:6655:5, col:61> Text=" not also include a declaration/definition of the entity."
| |-EnumConstantDecl 0x5555d4b9a908 <line:6663:3, col:42> col:3 CXIndexOpt_IndexFunctionLocalSymbols 'int'
| | |-ConstantExpr 0x5555d4b9a8e8 <col:42> 'int'
| | | |-value: Int 2
| | | `-IntegerLiteral 0x5555d4b9a8c8 <col:42> 'int' 2
| | `-FullComment 0x5555d4c25000 <line:6660:5, line:6661:44>
| |   `-ParagraphComment 0x5555d4c24fd0 <line:6660:5, line:6661:44>
| |     |-TextComment 0x5555d4c24f80 <line:6660:5, col:65> Text=" Function-local symbols should be indexed. If this is not set"
| |     `-TextComment 0x5555d4c24fa0 <line:6661:5, col:44> Text=" function-local symbols will be ignored."
| |-EnumConstantDecl 0x5555d4b9a9c8 <line:6669:3, col:52> col:3 CXIndexOpt_IndexImplicitTemplateInstantiations 'int'
| | |-ConstantExpr 0x5555d4b9a9a8 <col:52> 'int'
| | | |-value: Int 4
| | | `-IntegerLiteral 0x5555d4b9a988 <col:52> 'int' 4
| | `-FullComment 0x5555d4c250f0 <line:6666:5, line:6667:65>
| |   `-ParagraphComment 0x5555d4c250c0 <line:6666:5, line:6667:65>
| |     |-TextComment 0x5555d4c25070 <line:6666:5, col:71> Text=" Implicit function/class template instantiations should be indexed."
| |     `-TextComment 0x5555d4c25090 <line:6667:5, col:65> Text=" If this is not set, implicit instantiations will be ignored."
| |-EnumConstantDecl 0x5555d4b9aa88 <line:6674:3, col:33> col:3 CXIndexOpt_SuppressWarnings 'int'
| | |-ConstantExpr 0x5555d4b9aa68 <col:33> 'int'
| | | |-value: Int 8
| | | `-IntegerLiteral 0x5555d4b9aa48 <col:33> 'int' 8
| | `-FullComment 0x5555d4c251c0 <line:6672:5, col:62>
| |   `-ParagraphComment 0x5555d4c25190 <col:5, col:62>
| |     `-TextComment 0x5555d4c25160 <col:5, col:62> Text=" Suppress all compiler warnings when parsing for indexing."
| `-EnumConstantDecl 0x5555d4b9ab48 <line:6681:3, col:42> col:3 CXIndexOpt_SkipParsedBodiesInSession 'int'
|   |-ConstantExpr 0x5555d4b9ab28 <col:42> 'int'
|   | |-value: Int 16
|   | `-IntegerLiteral 0x5555d4b9ab08 <col:42> 'int' 16
|   `-FullComment 0x5555d4c25360 <line:6677:5, line:6679:49>
|     `-ParagraphComment 0x5555d4c25330 <line:6677:5, line:6679:49>
|       |-TextComment 0x5555d4c25230 <line:6677:5, col:66> Text=" Skip a function/method body that was already parsed during an"
|       |-TextComment 0x5555d4c25250 <line:6678:5, col:40> Text=" indexing session associated with a "
|       |-InlineCommandComment 0x5555d4c252a0 <col:41, col:42> Name="c" RenderMonospaced Arg[0]="CXIndexAction"
|       |-TextComment 0x5555d4c252c0 <col:57, col:64> Text=" object."
|       `-TextComment 0x5555d4c252e0 <line:6679:5, col:49> Text=" Bodies in system headers are always skipped."
|-TypedefDecl 0x5555d4b9abf8 <line:6646:1, line:6683:3> col:3 CXIndexOptFlags 'enum CXIndexOptFlags':'CXIndexOptFlags'
| `-ElaboratedType 0x5555d4b9aba0 'enum CXIndexOptFlags' sugar
|   `-EnumType 0x5555d4b9a730 'CXIndexOptFlags'
|     `-Enum 0x5555d4b9a688 ''
|-FunctionDecl 0x5555d4bee460 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:6715:79> line:6710:20 clang_indexSourceFile 'int (CXIndexAction, CXClientData, IndexerCallbacks *, unsigned int, unsigned int, const char *, const char *const *, int, struct CXUnsavedFile *, unsigned int, CXTranslationUnit *, unsigned int)'
| |-ParmVarDecl 0x5555d4b9acc0 <line:6711:5> col:18 'CXIndexAction':'void *'
| |-ParmVarDecl 0x5555d4b9ad38 <col:20, col:33> col:33 client_data 'CXClientData':'void *'
| |-ParmVarDecl 0x5555d4b9ae70 <col:46, col:64> col:64 index_callbacks 'IndexerCallbacks *'
| |-ParmVarDecl 0x5555d4b9aef0 <line:6712:5, col:14> col:14 index_callbacks_size 'unsigned int'
| |-ParmVarDecl 0x5555d4b9af70 <col:36, col:45> col:45 index_options 'unsigned int'
| |-ParmVarDecl 0x5555d4b9aff0 <line:6713:5, col:17> col:17 source_filename 'const char *'
| |-ParmVarDecl 0x5555d4b9b070 <col:34, col:53> col:53 command_line_args 'const char *const *'
| |-ParmVarDecl 0x5555d4bee040 <line:6714:5, col:9> col:9 num_command_line_args 'int'
| |-ParmVarDecl 0x5555d4bee0d0 <col:32, col:54> col:54 unsaved_files 'struct CXUnsavedFile *'
| |-ParmVarDecl 0x5555d4bee150 <line:6715:5, col:14> col:14 num_unsaved_files 'unsigned int'
| |-ParmVarDecl 0x5555d4bee1d0 <col:33, col:52> col:52 out_TU 'CXTranslationUnit *'
| |-ParmVarDecl 0x5555d4bee250 <col:60, col:69> col:69 TU_options 'unsigned int'
| |-VisibilityAttr 0x5555d4bee568 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c61ed0 </workspace/clang-c/Index.h:6686:3, line:6708:74>
|   |-ParagraphComment 0x5555d4c25420 <line:6686:3, line:6687:68>
|   | |-TextComment 0x5555d4c253d0 <line:6686:3, col:69> Text=" Index the given source file and the translation unit corresponding"
|   | `-TextComment 0x5555d4c253f0 <line:6687:3, col:68> Text=" to that file via callbacks implemented through #IndexerCallbacks."
|   |-ParagraphComment 0x5555d4c25470 <line:6689:3>
|   | `-TextComment 0x5555d4c25440 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c25490 <col:4, line:6690:38> [in] implicitly Param="client_data" ParamIndex=1
|   | `-ParagraphComment 0x5555d4c25540 <line:6689:22, line:6690:38>
|   |   |-TextComment 0x5555d4c254f0 <line:6689:22, col:69> Text=" pointer data supplied by the client, which will"
|   |   `-TextComment 0x5555d4c25510 <line:6690:3, col:38> Text=" be passed to the invoked callbacks."
|   |-ParagraphComment 0x5555d4c25590 <line:6692:3>
|   | `-TextComment 0x5555d4c25560 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c255b0 <col:4, line:6693:14> [in] implicitly Param="index_callbacks" ParamIndex=2
|   | `-ParagraphComment 0x5555d4c25660 <line:6692:26, line:6693:14>
|   |   |-TextComment 0x5555d4c25610 <line:6692:26, col:71> Text=" Pointer to indexing callbacks that the client"
|   |   `-TextComment 0x5555d4c25630 <line:6693:3, col:14> Text=" implements."
|   |-ParagraphComment 0x5555d4c256b0 <line:6695:3>
|   | `-TextComment 0x5555d4c25680 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c256d0 <col:4, line:6696:29> [in] implicitly Param="index_callbacks_size" ParamIndex=3
|   | `-ParagraphComment 0x5555d4c25790 <line:6695:31, line:6696:29>
|   |   |-TextComment 0x5555d4c25740 <line:6695:31, col:76> Text=" Size of #IndexerCallbacks structure that gets"
|   |   `-TextComment 0x5555d4c25760 <line:6696:3, col:29> Text=" passed in index_callbacks."
|   |-ParagraphComment 0x5555d4c257e0 <line:6698:3>
|   | `-TextComment 0x5555d4c257b0 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c25800 <col:4, line:6699:70> [in] implicitly Param="index_options" ParamIndex=4
|   | `-ParagraphComment 0x5555d4c258b0 <line:6698:24, line:6699:70>
|   |   |-TextComment 0x5555d4c25860 <line:6698:24, col:73> Text=" A bitmask of options that affects how indexing is"
|   |   `-TextComment 0x5555d4c25880 <line:6699:3, col:70> Text=" performed. This should be a bitwise OR of the CXIndexOpt_XXX flags."
|   |-ParagraphComment 0x5555d4c25900 <line:6701:3>
|   | `-TextComment 0x5555d4c258d0 <col:3> Text=" "
|   |-ParamCommandComment 0x5555d4c25920 <col:4, line:6702:78> [out] explicitly Param="out_TU" ParamIndex=10
|   | `-ParagraphComment 0x5555d4c25ac0 <line:6701:22, line:6702:78>
|   |   |-TextComment 0x5555d4c25980 <line:6701:22, col:41> Text=" pointer to store a "
|   |   |-InlineCommandComment 0x5555d4c259d0 <col:42, col:43> Name="c" RenderMonospaced Arg[0]="CXTranslationUnit"
|   |   |-TextComment 0x5555d4c259f0 <col:62, col:73> Text=" that can be"
|   |   |-TextComment 0x5555d4c25a10 <line:6702:3, col:45> Text=" reused after indexing is finished. Set to "
|   |   |-InlineCommandComment 0x5555d4c25a50 <col:46, col:47> Name="c" RenderMonospaced Arg[0]="NULL"
|   |   `-TextComment 0x5555d4c25a70 <col:53, col:78> Text=" if you do not require it."
|   |-ParagraphComment 0x5555d4c25b10 <line:6704:3>
|   | `-TextComment 0x5555d4c25ae0 <col:3> Text=" "
|   |-BlockCommandComment 0x5555d4c25b30 <col:4, line:6706:16> Name="returns"
|   | `-ParagraphComment 0x5555d4c25c30 <line:6704:12, line:6706:16>
|   |   |-TextComment 0x5555d4c25b60 <line:6704:12, col:78> Text=" 0 on success or if there were errors from which the compiler could"
|   |   |-TextComment 0x5555d4c25b80 <line:6705:3, col:75> Text=" recover.  If there is a failure from which there is no recovery, returns"
|   |   |-TextComment 0x5555d4c25ba0 <line:6706:3, col:14> Text=" a non-zero "
|   |   `-InlineCommandComment 0x5555d4c25bf0 <col:15, col:16> Name="c" RenderMonospaced Arg[0]="CXErrorCode."
|   `-ParagraphComment 0x5555d4c25c80 <line:6708:3, col:74>
|     `-TextComment 0x5555d4c25c50 <col:3, col:74> Text=" The rest of the parameters are the same as #clang_parseTranslationUnit."
|-FunctionDecl 0x5555d4beec90 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:6727:79> line:6722:20 clang_indexSourceFileFullArgv 'int (CXIndexAction, CXClientData, IndexerCallbacks *, unsigned int, unsigned int, const char *, const char *const *, int, struct CXUnsavedFile *, unsigned int, CXTranslationUnit *, unsigned int)'
| |-ParmVarDecl 0x5555d4bee618 <line:6723:5> col:18 'CXIndexAction':'void *'
| |-ParmVarDecl 0x5555d4bee690 <col:20, col:33> col:33 client_data 'CXClientData':'void *'
| |-ParmVarDecl 0x5555d4bee710 <col:46, col:64> col:64 index_callbacks 'IndexerCallbacks *'
| |-ParmVarDecl 0x5555d4bee790 <line:6724:5, col:14> col:14 index_callbacks_size 'unsigned int'
| |-ParmVarDecl 0x5555d4bee810 <col:36, col:45> col:45 index_options 'unsigned int'
| |-ParmVarDecl 0x5555d4bee890 <line:6725:5, col:17> col:17 source_filename 'const char *'
| |-ParmVarDecl 0x5555d4bee910 <col:34, col:53> col:53 command_line_args 'const char *const *'
| |-ParmVarDecl 0x5555d4bee990 <line:6726:5, col:9> col:9 num_command_line_args 'int'
| |-ParmVarDecl 0x5555d4beea20 <col:32, col:54> col:54 unsaved_files 'struct CXUnsavedFile *'
| |-ParmVarDecl 0x5555d4beeaa0 <line:6727:5, col:14> col:14 num_unsaved_files 'unsigned int'
| |-ParmVarDecl 0x5555d4beeb20 <col:33, col:52> col:52 out_TU 'CXTranslationUnit *'
| |-ParmVarDecl 0x5555d4beeba0 <col:60, col:69> col:69 TU_options 'unsigned int'
| |-VisibilityAttr 0x5555d4beed98 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c62070 </workspace/clang-c/Index.h:6718:3, line:6720:44>
|   `-ParagraphComment 0x5555d4c62040 <line:6718:3, line:6720:44>
|     |-TextComment 0x5555d4c61f40 <line:6718:3, col:65> Text=" Same as clang_indexSourceFile but requires a full command line"
|     |-TextComment 0x5555d4c61f60 <line:6719:3, col:7> Text=" for "
|     |-InlineCommandComment 0x5555d4c61fb0 <col:8, col:9> Name="c" RenderMonospaced Arg[0]="command_line_args"
|     |-TextComment 0x5555d4c61fd0 <col:28, col:77> Text=" including argv[0]. This is useful if the standard"
|     `-TextComment 0x5555d4c61ff0 <line:6720:3, col:44> Text=" library paths are relative to the binary."
|-FunctionDecl 0x5555d4bef240 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:6747:77> line:6745:20 clang_indexTranslationUnit 'int (CXIndexAction, CXClientData, IndexerCallbacks *, unsigned int, unsigned int, CXTranslationUnit)'
| |-ParmVarDecl 0x5555d4beee48 <line:6746:5> col:18 'CXIndexAction':'void *'
| |-ParmVarDecl 0x5555d4beeec0 <col:20, col:33> col:33 client_data 'CXClientData':'void *'
| |-ParmVarDecl 0x5555d4beef40 <col:46, col:64> col:64 index_callbacks 'IndexerCallbacks *'
| |-ParmVarDecl 0x5555d4beefc0 <line:6747:5, col:14> col:14 index_callbacks_size 'unsigned int'
| |-ParmVarDecl 0x5555d4bef050 <col:36, col:45> col:45 index_options 'unsigned int'
| |-ParmVarDecl 0x5555d4bef0c8 <col:60> col:77 'CXTranslationUnit':'struct CXTranslationUnitImpl *'
| |-VisibilityAttr 0x5555d4bef318 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c623d0 </workspace/clang-c/Index.h:6730:3, line:6743:33>
|   |-ParagraphComment 0x5555d4c62130 <line:6730:3, line:6731:21>
|   | |-TextComment 0x5555d4c620e0 <line:6730:3, col:69> Text=" Index the given translation unit via callbacks implemented through"
|   | `-TextComment 0x5555d4c62100 <line:6731:3, col:21> Text=" #IndexerCallbacks."
|   |-ParagraphComment 0x5555d4c621a0 <line:6733:3, line:6734:61>
|   | |-TextComment 0x5555d4c62150 <line:6733:3, col:72> Text=" The order of callback invocations is not guaranteed to be the same as"
|   | `-TextComment 0x5555d4c62170 <line:6734:3, col:61> Text=" when indexing a source file. The high level order will be:"
|   |-ParagraphComment 0x5555d4c62240 <line:6736:3, line:6738:37>
|   | |-TextComment 0x5555d4c621c0 <line:6736:3, col:40> Text="   -Preprocessor callbacks invocations"
|   | |-TextComment 0x5555d4c621e0 <line:6737:3, col:49> Text="   -Declaration/reference callbacks invocations"
|   | `-TextComment 0x5555d4c62200 <line:6738:3, col:37> Text="   -Diagnostic callback invocations"
|   |-ParagraphComment 0x5555d4c62290 <line:6740:3, col:57>
|   | `-TextComment 0x5555d4c62260 <col:3, col:57> Text=" The parameters are the same as #clang_indexSourceFile."
|   |-ParagraphComment 0x5555d4c622e0 <line:6742:3>
|   | `-TextComment 0x5555d4c622b0 <col:3> Text=" "
|   `-BlockCommandComment 0x5555d4c62300 <col:4, line:6743:33> Name="returns"
|     `-ParagraphComment 0x5555d4c62380 <line:6742:12, line:6743:33>
|       |-TextComment 0x5555d4c62330 <line:6742:12, col:74> Text=" If there is a failure from which there is no recovery, returns"
|       `-TextComment 0x5555d4c62350 <line:6743:3, col:33> Text=" non-zero, otherwise returns 0."
|-FunctionDecl 0x5555d4bef7e8 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:6761:68> line:6757:21 clang_indexLoc_getFileLocation 'void (CXIdxLoc, CXIdxClientFile *, CXFile *, unsigned int *, unsigned int *, unsigned int *)'
| |-ParmVarDecl 0x5555d4bef3c8 <col:52, col:61> col:61 loc 'CXIdxLoc':'CXIdxLoc'
| |-ParmVarDecl 0x5555d4bef470 <line:6758:52, col:69> col:69 indexFile 'CXIdxClientFile *'
| |-ParmVarDecl 0x5555d4bef4f0 <line:6759:52, col:60> col:60 file 'CXFile *'
| |-ParmVarDecl 0x5555d4bef570 <col:66, col:76> col:76 line 'unsigned int *'
| |-ParmVarDecl 0x5555d4bef5f0 <line:6760:52, col:62> col:62 column 'unsigned int *'
| |-ParmVarDecl 0x5555d4bef670 <line:6761:52, col:62> col:62 offset 'unsigned int *'
| |-VisibilityAttr 0x5555d4bef8c0 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c62560 </workspace/clang-c/Index.h:6750:3, line:6755:42>
|   |-ParagraphComment 0x5555d4c62490 <line:6750:3, line:6751:22>
|   | |-TextComment 0x5555d4c62440 <line:6750:3, col:72> Text=" Retrieve the CXIdxFile, file, line, column, and offset represented by"
|   | `-TextComment 0x5555d4c62460 <line:6751:3, col:22> Text=" the given CXIdxLoc."
|   `-ParagraphComment 0x5555d4c62530 <line:6753:3, line:6755:42>
|     |-TextComment 0x5555d4c624b0 <line:6753:3, col:63> Text=" If the location refers into a macro expansion, retrieves the"
|     |-TextComment 0x5555d4c624d0 <line:6754:3, col:73> Text=" location of the macro expansion and if it refers into a macro argument"
|     `-TextComment 0x5555d4c624f0 <line:6755:3, col:42> Text=" retrieves the location of the argument."
|-FunctionDecl 0x5555d4befa68 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:6767:65> col:18 clang_indexLoc_getCXSourceLocation 'CXSourceLocation (CXIdxLoc)'
| |-ParmVarDecl 0x5555d4bef978 <col:53, col:62> col:62 loc 'CXIdxLoc':'CXIdxLoc'
| |-VisibilityAttr 0x5555d4befb18 </workspace/clang-c/Platform.h:34:41, col:61> Default
| `-FullComment 0x5555d4c62630 </workspace/clang-c/Index.h:6764:3, col:67>
|   `-ParagraphComment 0x5555d4c62600 <col:3, col:67>
|     `-TextComment 0x5555d4c625d0 <col:3, col:67> Text=" Retrieve the CXSourceLocation represented by the given CXIdxLoc."
|-TypedefDecl 0x5555d4befde8 <line:6780:1, line:6781:72> line:6780:32 referenced CXFieldVisitor 'enum CXVisitorResult (*)(CXCursor, CXClientData)'
| |-PointerType 0x5555d4befd70 'enum CXVisitorResult (*)(CXCursor, CXClientData)'
| | `-ParenType 0x5555d4befd10 'enum CXVisitorResult (CXCursor, CXClientData)' sugar
| |   `-FunctionProtoType 0x5555d4befcd0 'enum CXVisitorResult (CXCursor, CXClientData)' cdecl
| |     |-ElaboratedType 0x5555d4bd9c30 'enum CXVisitorResult' sugar
| |     | `-EnumType 0x5555d4bd98f0 'enum CXVisitorResult'
| |     |   `-Enum 0x5555d4bd9848 'CXVisitorResult'
| |     |-ElaboratedType 0x5555d4b92d70 'CXCursor' sugar
| |     | `-TypedefType 0x5555d4b92d40 'CXCursor' sugar
| |     |   |-Typedef 0x5555d4b92c58 'CXCursor'
| |     |   `-ElaboratedType 0x5555d4b92c00 'struct CXCursor' sugar
| |     |     `-RecordType 0x5555d4b929e0 'CXCursor'
| |     |       `-Record 0x5555d4b92958 ''
| |     `-ElaboratedType 0x5555d4bb9a20 'CXClientData' sugar
| |       `-TypedefType 0x5555d4bb99f0 'CXClientData' sugar
| |         |-Typedef 0x5555d4b5d5a8 'CXClientData'
| |         `-PointerType 0x5555d4abe5e0 'void *'
| |           `-BuiltinType 0x5555d4abdec0 'void'
| `-FullComment 0x5555d4c62a20 <line:6770:3, line:6779:1>
|   |-ParagraphComment 0x5555d4c626d0 <line:6770:3, col:55>
|   | `-TextComment 0x5555d4c626a0 <col:3, col:55> Text=" Visitor invoked for each field found by a traversal."
|   |-ParagraphComment 0x5555d4c62870 <line:6772:3, line:6775:5>
|   | |-TextComment 0x5555d4c626f0 <line:6772:3, col:64> Text=" This visitor function will be invoked for each field found by"
|   | |-TextComment 0x5555d4c62710 <line:6773:3> Text=" "
|   | |-InlineCommandComment 0x5555d4c62760 <col:4, col:5> Name="c" RenderMonospaced Arg[0]="clang_Type_visitFields."
|   | |-TextComment 0x5555d4c62780 <col:30, col:68> Text=" Its first argument is the cursor being"
|   | |-TextComment 0x5555d4c627a0 <line:6774:3, col:62> Text=" visited, its second argument is the client data provided to"
|   | |-TextComment 0x5555d4c627c0 <line:6775:3> Text=" "
|   | `-InlineCommandComment 0x5555d4c62810 <col:4, col:5> Name="c" RenderMonospaced Arg[0]="clang_Type_visitFields."
|   `-ParagraphComment 0x5555d4c629e0 <line:6777:3, line:6779:1>
|     |-TextComment 0x5555d4c62890 <line:6777:3, col:40> Text=" The visitor should return one of the "
|     |-InlineCommandComment 0x5555d4c628e0 <col:41, col:42> Name="c" RenderMonospaced Arg[0]="CXVisitorResult"
|     |-TextComment 0x5555d4c62900 <col:59, col:65> Text=" values"
|     |-TextComment 0x5555d4c62920 <line:6778:3, col:13> Text=" to direct "
|     |-InlineCommandComment 0x5555d4c62970 <col:14, col:15> Name="c" RenderMonospaced Arg[0]="clang_Type_visitFields."
|     `-TextComment 0x5555d4c62990 <line:6779:1> Text=" "
`-FunctionDecl 0x5555d4bf0120 </workspace/clang-c/Platform.h:34:26, /workspace/clang-c/Index.h:6803:72> line:6802:25 clang_Type_visitFields 'unsigned int (CXType, CXFieldVisitor, CXClientData)'
  |-ParmVarDecl 0x5555d4befe98 <col:48, col:55> col:55 T 'CXType':'CXType'
  |-ParmVarDecl 0x5555d4beff70 <col:58, col:73> col:73 visitor 'CXFieldVisitor':'enum CXVisitorResult (*)(CXCursor, CXClientData)'
  |-ParmVarDecl 0x5555d4beffe8 <line:6803:48, col:61> col:61 client_data 'CXClientData':'void *'
  |-VisibilityAttr 0x5555d4bf01e0 </workspace/clang-c/Platform.h:34:41, col:61> Default
  `-FullComment 0x5555d4c631c0 </workspace/clang-c/Index.h:6784:3, line:6801:1>
    |-ParagraphComment 0x5555d4c62ac0 <line:6784:3, col:41>
    | `-TextComment 0x5555d4c62a90 <col:3, col:41> Text=" Visit the fields of a particular type."
    |-ParagraphComment 0x5555d4c62c50 <line:6786:3, line:6789:25>
    | |-TextComment 0x5555d4c62ae0 <line:6786:3, col:66> Text=" This function visits all the direct fields of the given cursor,"
    | |-TextComment 0x5555d4c62b00 <line:6787:3, col:22> Text=" invoking the given "
    | |-InlineCommandComment 0x5555d4c62b40 <col:23, col:24> Name="p" RenderMonospaced Arg[0]="visitor"
    | |-TextComment 0x5555d4c62b60 <col:33, col:66> Text=" function with the cursors of each"
    | |-TextComment 0x5555d4c62b80 <line:6788:3, col:60> Text=" visited field. The traversal may be ended prematurely, if"
    | |-TextComment 0x5555d4c62ba0 <line:6789:3, col:23> Text=" the visitor returns "
    | `-InlineCommandComment 0x5555d4c62bf0 <col:24, col:25> Name="c" RenderMonospaced Arg[0]="CXFieldVisit_Break."
    |-ParagraphComment 0x5555d4c62ca0 <line:6791:3>
    | `-TextComment 0x5555d4c62c70 <col:3> Text=" "
    |-ParamCommandComment 0x5555d4c62cc0 <col:4, col:55> [in] implicitly Param="T" ParamIndex=0
    | `-ParagraphComment 0x5555d4c62d50 <col:12, col:55>
    |   `-TextComment 0x5555d4c62d20 <col:12, col:55> Text=" the record type whose field may be visited."
    |-ParagraphComment 0x5555d4c62da0 <line:6793:3>
    | `-TextComment 0x5555d4c62d70 <col:3> Text=" "
    |-ParamCommandComment 0x5555d4c62dc0 <col:4, line:6794:14> [in] implicitly Param="visitor" ParamIndex=1
    | `-ParagraphComment 0x5555d4c62ec0 <line:6793:18, line:6794:14>
    |   |-TextComment 0x5555d4c62e20 <line:6793:18, col:68> Text=" the visitor function that will be invoked for each"
    |   |-TextComment 0x5555d4c62e40 <line:6794:3, col:12> Text=" field of "
    |   `-InlineCommandComment 0x5555d4c62e80 <col:13, col:14> Name="p" RenderMonospaced Arg[0]="T."
    |-ParagraphComment 0x5555d4c62f10 <line:6796:3>
    | `-TextComment 0x5555d4c62ee0 <col:3> Text=" "
    |-ParamCommandComment 0x5555d4c62f30 <col:4, line:6797:52> [in] implicitly Param="client_data" ParamIndex=2
    | `-ParagraphComment 0x5555d4c62fe0 <line:6796:22, line:6797:52>
    |   |-TextComment 0x5555d4c62f90 <line:6796:22, col:69> Text=" pointer data supplied by the client, which will"
    |   `-TextComment 0x5555d4c62fb0 <line:6797:3, col:52> Text=" be passed to the visitor each time it is invoked."
    |-ParagraphComment 0x5555d4c63030 <line:6799:3>
    | `-TextComment 0x5555d4c63000 <col:3> Text=" "
    `-BlockCommandComment 0x5555d4c63050 <col:4, line:6801:1> Name="returns"
      `-ParagraphComment 0x5555d4c63150 <line:6799:12, line:6801:1>
        |-TextComment 0x5555d4c63080 <line:6799:12, col:60> Text=" a non-zero value if the traversal was terminated"
        |-TextComment 0x5555d4c630a0 <line:6800:3, col:40> Text=" prematurely by the visitor returning "
        |-InlineCommandComment 0x5555d4c630f0 <col:41, col:42> Name="c" RenderMonospaced Arg[0]="CXFieldVisit_Break."
        `-TextComment 0x5555d4c63110 <line:6801:1> Text=" "
